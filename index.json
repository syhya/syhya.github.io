[{"content":"DeepSeek AI recently released DeepSeek-R1 (DeepSeek-AI, 2025), whose reasoning performance on multiple benchmarks approaches the level of OpenAI\u0026rsquo;s o1 (OpenAI, 2024), marking a significant step for the open-source community in successfully replicating o1. Relevant code for R1 can be found in the huggingface\u0026rsquo;s attempt to open-source replication project open-r1. While previous research has often relied on massive amounts of supervised data to enhance the performance of Large Language Models (LLMs), the success of DeepSeek-R1 and its earlier experiment, DeepSeek-R1-Zero, powerfully demonstrates the potential of purely large-scale reinforcement learning in improving the reasoning capabilities of LLMs. This success reinforces the profound insight proposed by Richard Sutton in \u0026ldquo;The Bitter Lesson\u0026rdquo;:\nOne thing that should be learned from the bitter lesson is the great power of general purpose methods, of methods that continue to scale with increased computation even as the available computation becomes very great. The two methods that seem to scale arbitrarily in this way are search and learning. (Richard Sutton, 2019)\nNotations The following table lists the mathematical symbols used in this article to facilitate your reading.\nSymbol Meaning \\( q \\) or \\( Q \\) Question, user input or instruction \\( o \\) or \\( O \\) Output, model-generated text response or answer \\( t \\) Token index, indicating the position of the \\( t \\)-th token in the output text \\( o_t \\) The \\( t \\)-th token in the output text \\( o \\) \\( o_{\u0026lt;t} \\) The sequence of tokens in the output text \\( o \\) preceding the \\( t \\)-th token \\( \u0026#124;o\u0026#124; \\) Length of the output text \\( o \\), usually referring to the number of tokens \\( G \\) Output group size, in the GRPO algorithm, the number of outputs sampled for each question \\( \\pi_\\theta, \\pi_{\\theta_{\\text{old}}}, \\pi_{\\text{ref}}, \\pi_{\\text{sft}} \\) Policy models and their variants, used to generate text outputs or as reference models \\( A_t, A_i \\) Advantage function and relative advantage value \\( \\varepsilon \\) Clipping hyperparameter, used to limit the range of the importance sampling, ensuring the stability of policy updates \\( \\beta \\) Regularization coefficient, used to control the weight of the KL divergence penalty term in the objective function \\( \\mathbb{D}_{KL} \\) KL divergence, a measure of the difference between two probability distributions, used to constrain the distance between the new policy and the reference policy \\( \\mathcal{J}, \\mathcal{L} \\) Objective function and loss function \\( \\mathbb{E} \\) Expectation, representing the average value of a random variable, in the objective function, it represents the average over sample data \\( P_{\\text{sft}}(Q, O) \\) Distribution of the SFT dataset, representing the joint probability distribution of question \\( Q \\) and output \\( O \\) in the \\( SFT \\) dataset \\( P_{\\text{sft}}(Q) \\) Distribution of questions in the SFT dataset, representing the marginal probability distribution of question \\( Q \\) in the \\( SFT \\) dataset \\( \\pi_\\theta(o_t \\mid q, o_{\u0026lt;t} ) \\) Conditional probability of the policy model generating the \\( t \\)-th token \\( o_t \\) given the question \\( q \\) and previously generated tokens \\( o_{\u0026lt;t} \\) \\( \\mathbb{I}(o) \\) Indicator function that determines whether the output \\( o \\) is of high quality, 1 if high quality, 0 otherwise \\( r(o) \\) Reward function, a function that evaluates the quality of the model output \\( o \\) \\( r_i \\) Reward value of the \\( i \\)-th output \\( \\nabla_{\\theta} \\) Gradient operator, representing the gradient of a function with respect to model parameters \\( \\theta \\) \\( \\mathcal{N}(\\mu, 1) \\) Normal distribution with mean \\( \\mu \\) and standard deviation 1 \\( \\binom{a}{b} \\) Binomial coefficient, representing the number of combinations of choosing \\( b \\) elements from \\( a \\) elements \\( r(o) = \\frac{\\pi_{\\text{ref}}(o \\mid q)}{\\pi_\\theta(o \\mid q)} \\) Probability ratio, the ratio of the probability of generating output \\( o \\) by the reference model to the current policy model Training Process Overview The training of the DeepSeek-R1 series models is a multi-stage process aimed at building LLMs with superior reasoning and general language capabilities. The entire training process starts from the DeepSeek-V3 (DeepSeek-AI, 2024) model and iteratively optimizes it to obtain different versions of the DeepSeek-R1 model.\nFig. 1. DeepSeek R1 Training Pipeline. (Image source: Harris Chan\u0026rsquo;s Tweet)\nAs shown in Figure 1, the DeepSeek-R1 training process is clearly displayed and mainly divided into the following key stages:\nBase Model and Initial Fine-tuning: The starting point of the process is the DeepSeek-V3 Base model. First, SFT technology is used to initially train the base model on cold-start long-text CoT data, endowing the model with preliminary reasoning abilities.\nReinforcing Reasoning Ability: Based on SFT, a reasoning-oriented reinforcement learning method, specifically the Group Relative Policy Optimization (GRPO) algorithm, combined with rule-based rewards and CoT language consistency rewards, is used to further enhance the model\u0026rsquo;s reasoning ability.\nReasoning Data Generation and Rejection Sampling: Using reasoning prompts and rejection sampling techniques, and leveraging rules and the DeepSeek-V3 model to judge data quality, high-quality reasoning data is generated.\nNon-Reasoning Data Generation: Using the CoT prompting method, the DeepSeek-V3 model is used for data augmentation to generate non-reasoning data, which is combined with the original SFT data to improve the model\u0026rsquo;s general language capabilities.\nDistillation: Combining reasoning data and non-reasoning data for distillation training. Through SFT, the capabilities of DeepSeek-V3 are transferred to a series of smaller models (Qwen and Llama series), resulting in the DeepSeek-R1-Distill series models.\nFinal Model Fine-tuning: The DeepSeek-V3 model is fine-tuned again with SFT and reinforcement learning. In the reinforcement learning stage, reasoning and preference rewards are adopted, and diverse training prompts are used, ultimately resulting in the DeepSeek-R1 model.\nDeepSeek-R1-Zero: Trained directly on DeepSeek-V3 Base using the GRPO algorithm, serving as a comparative baseline for other models.\nNext, this blog post will delve into the key technologies and methods in the DeepSeek-R1 training process.\nDeepSeek-R1-Zero PPO Proximal Policy Optimization (PPO) (Schulman et al., 2017) algorithm is a classic algorithm widely used in reinforcement learning. In the InstructGPT (Ouyang et al., 2022) paper, it was proven to be an effective and stable method for training LLMs in the reinforcement learning fine-tuning stage.\nThe core idea of reinforcement learning is to allow an agent to learn through interaction with an environment, maximizing cumulative rewards through trial and error. In the LLM scenario, the model itself is the agent, and the \u0026ldquo;environment\u0026rdquo; can be understood as the questions raised by users and the expected ways of answering. The policy \\( \\pi_\\theta \\) represents the agent\u0026rsquo;s behavior guidelines, i.e., given an input (e.g., question \\( q \\)), the policy will output an action (e.g., generate text \\( o \\)). The policy \\( \\pi_\\theta \\) is usually parameterized by a neural network model, and the training objective is to find the optimal parameters \\( \\theta \\) so that the policy can generate high-quality outputs.\nThe Actor-Critic framework is a commonly used architecture in reinforcement learning, and PPO also belongs to the Actor-Critic algorithm family. The Actor-Critic framework includes two core components:\nActor (Policy Model): Responsible for learning the policy \\( \\pi_\\theta \\), i.e., how to choose actions (generate text) based on the current state (e.g., user question). Critic (Value Model): Responsible for evaluating the quality of the Actor\u0026rsquo;s policy, usually achieved by learning a value function \\( V(s) \\) or \\( Q(s, a) \\). The value function predicts the expected value of cumulative rewards that can be obtained in the future given a state \\( s \\) (or state-action pair \\( (s, a) \\)). The goal of PPO is to improve the policy model (Actor) so that it can generate higher quality outputs, while using the value model (Critic) to stabilize the training process. PPO updates the policy model \\( \\pi_{\\theta} \\) by maximizing the following objective function:\n\\[ \\mathcal{J}_{PPO}(\\theta) = \\mathbb{E}\\!\\Biggl[ \\min\\Bigl( \\frac{\\pi_\\theta(a\\!\\mid\\!s)}{\\pi_{\\theta_{\\text{old}}}(a\\!\\mid\\!s)}A_t,\\, \\operatorname{clip}\\Bigl( \\frac{\\pi_\\theta(a\\!\\mid\\!s)}{\\pi_{\\theta_{\\text{old}}}(a\\!\\mid\\!s)}, 1-\\varepsilon,\\, 1+\\varepsilon \\Bigr)A_t \\Bigr) \\Biggr] \\]Parameter Description:\nExpectation \\( \\mathbb{E}[\\cdot] \\): Represents the average over samples. In actual training, we sample a batch of data (e.g., user questions and model-generated answers) and then calculate the average objective function value for this batch of data.\nImportance Sampling: Measures the probability ratio of the current policy \\( \\pi_\\theta \\) to the old policy \\( \\pi_{\\theta_{\\text{old}}} \\) on action \\( a \\). PPO adopts the idea of proximal policy update, limiting the magnitude of each policy update to avoid excessive policy changes that lead to training instability.\nAdvantage Function \\( A_t \\): Evaluates the advantage of taking action \\( a \\) in state \\( s \\) relative to the average level. The advantage function is usually estimated by the Critic model (value network), and can be Advantage Estimation or Generalized Advantage Estimation (GAE) and other methods. The larger the advantage function \\( A_t \\), the better the current action \\( a \\), and the policy model should increase the probability of taking this action.\nclip: One of the core mechanisms of PPO, which can essentially be seen as a penalty function, used to limit the range of the importance sampling between \\( [1-\\varepsilon, 1+\\varepsilon] \\), where \\( \\varepsilon \\) is a hyperparameter (usually set to 0.2). The clipping operation prevents excessive policy update steps and improves training stability.\nThe clip function penalizes excessively large or small policy update magnitudes by limiting the importance sampling.\nWhen the importance sampling exceeds the range of \\( [1-\\varepsilon, 1+\\varepsilon] \\), the clip function will limit it within this range, thereby reducing the gain (or reducing the loss) of the objective function. For positive updates (\\( A_t \u003e 0 \\)): If the importance sampling is too large (exceeds \\( 1+\\varepsilon \\)), clip will limit it to \\( 1+\\varepsilon \\), reducing the actual update magnitude and penalizing overly aggressive policy improvements. For negative updates (\\( A_t \u003c 0 \\)): If the importance sampling is too small (less than \\( 1-\\varepsilon \\)), clip will limit it to \\( 1-\\varepsilon \\), also limiting the update magnitude and avoiding drastic changes in policy. The objective function takes the minimum value between clip before and clip after, ensuring that when the importance sampling is out of range, PPO will penalize policy updates, ensuring the \u0026ldquo;conservatism\u0026rdquo; of policy updates.\nIn the actual optimization process, we usually define the PPO loss function \\( \\mathcal{L}_{PPO}(\\theta) \\) as the negative value of the objective function, and maximize the objective function by minimizing the loss:\n\\[ \\mathcal{L}_{PPO}(\\theta) = -\\,\\mathcal{J}_{PPO}(\\theta). \\]The PPO algorithm, due to its characteristics of being simple and effective, and relatively stable, has become one of the benchmark algorithms in the field of reinforcement learning and has achieved success in various tasks, including reinforcement learning fine-tuning of LLMs. PPO is generally considered more stable than earlier methods such as TRPO, but its specific application in large models still requires careful hyperparameter tuning. In large-scale language model scenarios, if the value network and policy network are completely separated and of comparable size, it will inevitably bring more computational and memory overhead. To solve these problems, the DeepSeek team proposed Group Relative Policy Optimization (GRPO) algorithm.\nGRPO Group Relative Policy Optimization (GRPO) (Shao, et al., 2024) is an efficient and stable reinforcement learning algorithm specifically designed by the DeepSeek team for training LLMs like DeepSeek-R1-Zero. GRPO\u0026rsquo;s core innovation lies in abandoning the dependence on an independent value network (critic model) in the traditional Actor-Critic framework, reducing computational costs and improving training stability. Broadly speaking, GRPO can be regarded as an Actor-Only reinforcement learning method.\nGRPO is inspired by the idea of relative evaluation. In many practical scenarios, we are often better at judging the relative quality among a group of things than giving absolute value evaluations. For example, when evaluating a group of student assignments, teachers may find it easier to compare the merits of different assignments than to give each assignment an absolute score. GRPO introduces this idea of relative evaluation into reinforcement learning, using in-group relative scoring to build a baseline, completely replacing the dependence on value networks.\nSpecifically, for each question \\( q \\), GRPO samples a set of outputs \\( \\{o_1, o_2, \\ldots, o_G\\} \\) from the old policy \\( \\pi_{\\theta_{\\text{old}}} \\), forming an output group. Then, the policy model \\( \\pi_{\\theta} \\) is updated by maximizing the following objective function:\n\\[ \\begin{aligned} \\mathcal{J}_{GRPO}(\\theta) \u0026 = \\mathbb{E}\\left[q \\sim P(Q), \\{o_i\\}_{i=1}^G \\sim \\pi_{\\theta_{\\text{old}}}(O \\mid q)\\right] \\\\ \u0026 \\quad \\frac{1}{G} \\sum_{i=1}^G \\Biggl( \\min\\biggl( \\frac{\\pi_\\theta(o_i \\mid q)}{\\pi_{\\theta_{\\text{old}}}(o_i \\mid q)} \\,A_i,\\, \\operatorname{clip}\\Bigl( \\frac{\\pi_\\theta(o_i \\mid q)}{\\pi_{\\theta_{\\text{old}}}(o_i \\mid q)}, 1-\\varepsilon,\\, 1+\\varepsilon \\Bigr)\\,A_i \\biggr) \\;-\\;\\beta\\,\\mathbb{D}_{KL}\\bigl(\\pi_\\theta \\,\\|\\, \\pi_{\\text{ref}}\\bigr) \\Biggr), \\end{aligned} \\]Similar to the PPO objective function, the GRPO objective function also includes the importance sampling and clip to ensure the stability of policy updates. The differences are:\nRelative Advantage Value \\( A_i \\): GRPO uses the relative advantage value \\( A_i \\) instead of the advantage function \\( A_t \\) in PPO. The relative advantage value \\( A_i \\) is calculated based on in-group rewards, without the need for value network estimation. KL Divergence Penalty Term \\( \\mathbb{D}_{KL}\\bigl(\\pi_\\theta \\,\\|\\, \\pi_{\\text{ref}}\\bigr) \\): To further constrain policy updates, GRPO introduces a KL divergence penalty term, limiting the difference between the new policy \\( \\pi_\\theta \\) and the reference policy \\( \\pi_{\\text{ref}} \\) from being too large. Fig. 2. The comparison of PPO and GRPO. (Image source: DeepSeek-AI, 2024)\nFrom Figure 2 above, we can see that the core innovation of GRPO lies in the calculation method of the relative advantage value \\( A_i \\). Unlike PPO, GRPO does not rely on an independent value network, but directly uses in-group rewards for relative evaluation. For each output group \\( \\{o_1, o_2, \\ldots, o_G\\} \\), GRPO first obtains the reward values \\( \\{r_1, r_2, \\ldots, r_G\\} \\) corresponding to each output. Then, the relative advantage value \\( A_i \\) is calculated according to the following formula:\n\\[ A_i = \\frac{\\,r_i \\;-\\; \\text{mean}(\\{r_1, r_2, \\ldots, r_G\\})\\,}{ \\text{std}\\bigl(\\{r_1, r_2, \\ldots, r_G\\}\\bigr)}. \\]The relative advantage value \\( A_i \\) is obtained by standardizing the in-group rewards \\( \\{r_1, r_2, \\ldots, r_G\\} \\), with zero mean and unit variance, better reflecting the relative merits of each output within the group.\nGRPO adopts the method of relative evaluation, which has the following advantages:\nNo need to train a value network: Avoids the computational overhead and instability caused by training a large-scale value network. Reduces variance in value estimation: Relative evaluation focuses on the relative merits of outputs within the group, rather than absolute values, reducing estimation variance and improving training stability. More consistent with the comparative nature of reward models: Reward models are usually trained based on comparative data, and GRPO\u0026rsquo;s relative evaluation method is more consistent with this. More suitable for credit assignment in sequence generation tasks: Even if the reward is sparse, GRPO can learn effectively because it focuses on the relative quality between outputs in the same group. Schulman Unbiased Estimator KL divergence \\( \\mathbb{D}_{KL}\\left(\\pi_\\theta \\|\\pi_{\\text{ref}}\\right) \\) measures the information loss of policy \\( \\pi_\\theta \\) relative to the reference policy \\( \\pi_{\\text{ref}} \\), and its standard definition is:\n\\[ \\mathbb{D}_{KL}\\left(\\pi_\\theta \\|\\pi_{\\text{ref}}\\right) = \\mathbb{E}_{o \\sim \\pi_\\theta(\\cdot|q)} \\left[ \\log \\frac{\\pi_\\theta(o \\mid q)}{\\pi_{\\text{ref}}(o \\mid q)} \\right]. \\]As mentioned earlier, directly calculating the above expectation in practice faces challenges. To solve this problem, GRPO adopts the Schulman unbiased estimator (Schulman, 2020). Unlike the KL divergence penalty term that may be used in formula, we use the following unbiased estimator to estimate the KL divergence between \\( \\pi_\\theta \\) and \\( \\pi_{ref} \\):\n$$ \\mathbb{D}_{K L}\\left[\\pi_{\\theta}| | \\pi_{r e f}\\right]=\\frac{\\pi_{r e f}\\left(o_{i, t} \\mid q, o_{i,\u0026lt;t}\\right)}{\\pi_{\\theta}\\left(o_{i, t} \\mid q, o_{i,\u0026lt;t}\\right)}-\\log \\frac{\\pi_{r e f}\\left(o_{i, t} \\mid q, o_{i,\u0026lt;t}\\right)}{\\pi_{\\theta}\\left(o_{i, t} \\mid q, o_{i,\u0026lt;t}\\right)}-1. $$To understand the advantages of this estimator, we first mathematically derive its unbiasedness.\nUnbiasedness Proof To simplify the notation, let \\( r(o) = \\frac{\\pi_{ref}(o \\mid q)}{\\pi_\\theta(o \\mid q)} \\). Then the Schulman estimator can be written as:\n\\[ \\hat{D}_{KL}(o) = r(o) - \\log r(o) - 1. \\]We need to prove that when \\( o \\) is sampled from \\( \\pi_\\theta(\\cdot|q) \\), the expectation of \\( \\hat{D}_{KL}(o) \\) is equal to the true KL divergence \\( \\mathbb{D}_{KL}\\left(\\pi_\\theta \\|\\pi_{\\text{ref}}\\right) \\).\n\\[ \\begin{aligned} \\mathbb{E}_{o \\sim \\pi_\\theta(\\cdot|q)} [\\hat{D}_{KL}(o)] \u0026= \\mathbb{E}_{o \\sim \\pi_\\theta(\\cdot|q)} [r(o) - \\log r(o) - 1] \\\\ \u0026= \\mathbb{E}_{o \\sim \\pi_\\theta(\\cdot|q)} \\left[ \\frac{\\pi_{ref}(o \\mid q)}{\\pi_\\theta(o \\mid q)} - \\log \\frac{\\pi_{ref}(o \\mid q)}{\\pi_\\theta(o \\mid q)} - 1 \\right] \\\\ \u0026= \\sum_{o} \\pi_\\theta(o \\mid q) \\left[ \\frac{\\pi_{ref}(o \\mid q)}{\\pi_\\theta(o \\mid q)} - \\log \\frac{\\pi_{ref}(o \\mid q)}{\\pi_\\theta(o \\mid q)} - 1 \\right] \\quad (\\text{Discrete case, integral for continuous case}) \\\\ \u0026= \\sum_{o} \\left[ \\pi_{ref}(o \\mid q) - \\pi_\\theta(o \\mid q) \\log \\frac{\\pi_{ref}(o \\mid q)}{\\pi_\\theta(o \\mid q)} - \\pi_\\theta(o \\mid q) \\right] \\\\ \u0026= \\underbrace{\\sum_{o} \\pi_{ref}(o \\mid q)}_{=1} - \\underbrace{\\sum_{o} \\pi_\\theta(o \\mid q) \\log \\frac{\\pi_{ref}(o \\mid q)}{\\pi_\\theta(o \\mid q)}}_{=-\\mathbb{D}_{KL}(\\pi_\\theta || \\pi_{ref})} - \\underbrace{\\sum_{o} \\pi_\\theta(o \\mid q)}_{=1} \\\\ \u0026= 1 - (-\\mathbb{D}_{KL}(\\pi_\\theta || \\pi_{ref})) - 1 \\\\ \u0026= \\mathbb{D}_{KL}(\\pi_\\theta || \\pi_{ref}). \\end{aligned} \\]Therefore, we have proven that \\( \\hat{D}_{KL}(o) \\) is an unbiased estimator of \\( \\mathbb{D}_{KL}\\left(\\pi_\\theta \\|\\pi_{\\text{ref}}\\right) \\).\nComparison of Three KL Divergence Estimators To intuitively understand the differences between the three estimators, the following table lists their mathematical expressions, where \\( r(o) = \\frac{\\pi_{ref}(o \\mid q)}{\\pi_\\theta(o \\mid q)} \\):\nEstimator Mathematical Expression Main Features k1 (Naive Estimator) \\( \\hat{D}_{KL}^{(k1)}(o) = \\log \\frac{\\pi_\\theta(o \\mid q)}{\\pi_{ref}(o \\mid q)} = \\log \\frac{1}{r(o)} \\) Simple and direct, corresponds to the definition of KL divergence; high variance, large fluctuations in estimation results. k2 (Squared Log-Ratio Estimator) \\( \\hat{D}_{KL}^{(k2)}(o) = \\frac{1}{2} (\\log r(o))^2 \\) Uses the square of the log-ratio, always positive, reduces variance; introduces bias, especially when distribution differences are large. k3 (Schulman Unbiased Estimator) \\( \\hat{D}_{KL}^{(k3)}(o) = r(o) - \\log r(o) - 1 \\) Combines the ratio \\( r(o) \\) and the log-ratio \\( \\log r(o) \\); unbiased, low variance, stable estimation. k1 (Naive Estimator): Unbiased, simple and direct, but with high variance, leading to unstable estimation results. k2 (Squared Log-Ratio Estimator): Reduces variance, but introduces bias, especially when the distribution difference is large, the bias is significant. k3 (Schulman Unbiased Estimator): Combines unbiasedness and low variance, providing stable estimation results. Experimental Results To evaluate the performance of the three KL divergence estimators, we conducted numerical experiments, and the results are shown in the table below. In the experiment, the distribution \\( q = \\mathcal{N}(0, 1) \\) was fixed, and the mean \\( \\mu \\) of the distribution \\( p = \\mathcal{N}(\\mu, 1) \\) was changed to control the true KL divergence \\( \\mathbb{D}_{KL}(p \\| q) \\). Monte Carlo estimation was performed using 500 million samples, and the experiment was repeated to obtain stable results.\nExperimental code can be found at unbiased_kl_divergence.py\nTrue KL Divergence Estimator Average Estimated Value Standard Deviation Relative Bias (%) 0.005 k1 0.005 0.1 0.0387 0.005 k2 0.005 0.0071 0.2415 0.005 k3 0.005 0.0071 -0.0082 0.125 k1 0.125 0.5 -0.0389 0.125 k2 0.1328 0.1875 6.2500 0.125 k3 0.125 0.1845 0.0072 0.5 k1 0.5 1 -0.0018 0.5 k2 0.625 0.866 25.0004 0.5 k3 0.5 0.8478 0.0052 Naive Estimator (k1):\nUnbiasedness: The average estimated value is highly consistent with the true KL divergence, and the relative bias is close to 0%. Variance: The standard deviation is higher than k3 and increases with the true KL divergence, leading to unstable estimation results. Squared Log-Ratio Estimator (k2):\nUnbiasedness: There is a certain bias, and the bias increases significantly with the increase of the true KL divergence (for example, when the true KL is 0.5, the relative bias reaches 25%). Variance: The variance is lower at lower true KL divergence, but the overall performance is unstable. Schulman Unbiased Estimator (k3):\nUnbiasedness: The experimental results show that the relative bias is extremely small, almost 0%, which verifies its unbiasedness. Variance: The standard deviation is significantly lower than k1, and compared with k1, it shows lower variance under all KL divergences, especially when the KL divergence is low, the advantage is significant. Advantages Summary Unbiasedness: Both theoretical and experimental results show that k3 is an unbiased estimator, which can accurately reflect the true KL divergence. Positive Definiteness: The estimated value is always non-negative, which is consistent with the nature of KL divergence. Lower Variance: Compared with k1, k3 significantly reduces the estimation variance and provides more stable estimation results, especially when the KL divergence is small, the performance is outstanding. The Schulman unbiased estimator \\( \\hat{D}_{KL}^{(k3)}(o) = r(o) - \\log r(o) - 1 \\) provides an estimation method for KL divergence that combines unbiasedness and low variance. Its unbiasedness ensures the accuracy of the estimation, and the lower variance improves the stability of the estimation, especially suitable for reinforcement learning scenarios that require stable gradient signals, such as policy optimization. Based on these advantages, the GRPO algorithm chooses to use k3 as an estimator to penalize policy deviation, thereby ensuring the stability of the training process and the performance of the final policy.\nIn actual optimization, the GRPO loss function \\( \\mathcal{L}_{GRPO}(\\theta) \\) is defined as the negative value of the objective function \\( \\mathcal{J}_{GRPO}(\\theta) \\), and the objective function \\( \\mathcal{J}_{GRPO}(\\theta) \\) is maximized by minimizing the loss function \\( \\mathcal{L}_{GRPO}(\\theta) \\):\n\\[ \\mathcal{L}_{GRPO}(\\theta) = -\\,\\mathcal{J}_{GRPO}(\\theta) \\]Comparison of PPO and GRPO To more clearly understand the similarities and differences between PPO and GRPO, the following table compares the two algorithms:\nFeature PPO GRPO Actor-Critic or Not Yes Yes (broadly considered Actor-Only) Value Network Needed Requires an independent value network (Critic) No independent value network required Advantage Estimation Estimates absolute advantage value through a value network Relatively evaluates relative advantage value through in-group rewards Computational Cost Higher, requires training a value network Lower, no need to train a value network Training Stability Relatively good, but value network training may introduce instability Better, avoids instability from value network training Algorithm Complexity Relatively complex, needs to maintain and update policy and value networks Relatively simple, only needs to maintain and update the policy network Applicable Scenarios Widely applicable to various RL tasks, including fine-tuning of small to medium-sized language models Especially suitable for RL fine-tuning of large-scale language models, focusing on efficiency and stability Credit Assignment Relies on value network for temporal difference learning to handle credit assignment issues Relies on final rewards and in-group relative evaluation, can also be assisted by intermediate rewards Variance Issue Value network estimation may introduce variance In-group relative advantage estimation may have variance under small group sizes, which can be mitigated by increasing group size, etc. As can be seen from the table, PPO is a general and powerful reinforcement learning algorithm, but its mechanism of training a value network brings additional computational burden and potential instability in LLMs scenarios. GRPO cleverly avoids the need for a value network by introducing in-group relative scoring, significantly reducing computational costs and improving training stability while ensuring performance. This makes GRPO an ideal choice for training LLMs like DeepSeek-R1-Zero when training resources are limited.\nCode Generation Evaluation Metrics Code generation employs more rigorous testing methods. The code generated by the model is executed through a compiler, and multiple unit tests are performed using predefined test cases to determine the correctness of the code. Commonly used evaluation metrics include pass@k (Chen et al., 2021) and cons@N (OpenAI, 2024).\npass@k: Measures the probability that at least one sample out of k code samples generated by the model can pass all predefined test cases.\nBiased Estimation Formula for pass@k \\[ \\text{Simplified pass@k} = \\frac{1}{P} \\sum_{i=1}^{P} C_i \\]\\[ C_i = \\begin{cases} 1 \u0026 \\text{if at least one of the k generated samples is correct} \\\\ 0 \u0026 \\text{if all k generated samples are incorrect} \\end{cases} \\]Parameter Description:\n\\( P \\): Total number of problems evaluated. \\( C_i \\): For the \\( i \\)-th problem, \\( C_i = 1 \\) if at least one of the \\( k \\) generated samples is correct, otherwise \\( C_i = 0 \\). \\( \\sum_{i=1}^{P} C_i \\): Represents the total number of problems \u0026ldquo;solved\u0026rdquo; among all \\( P \\) problems. \\( \\frac{1}{P} \\sum_{i=1}^{P} C_i \\): Represents the proportion of \u0026ldquo;solved\u0026rdquo; problems, i.e., accuracy. Formula Meaning: This simplified method directly calculates the proportion of problems for which at least one sample is correct after generating k samples. Although this method provides a biased estimate of pass@k, which may slightly overestimate the true value, it is very commonly used in practice because it is intuitive, easy to calculate, and can provide a reasonable approximation of model performance when the sample size is large enough. Especially in industrial and rapid evaluation scenarios, this simplified method is very practical.\nHowever, LLMs are affected by parameters such as temperature, top_p, top_k, and repetition_penalty during reasoning decoding. These parameters can make code generation results random and diverse, and if the parameters are set too randomly when sample K is relatively small, it will affect the evaluation results of pass@k. Therefore, using an unbiased estimation method can more accurately reflect the true performance of the model.\nUnbiased Estimation Formula for pass@k \\[ \\text { pass @ } k:=\\underset{\\text { Problems }}{\\mathbb{E}}\\left[1-\\frac{\\binom{n-c}{k}}{\\binom{n}{k}}\\right] \\]Parameter Description:\n\\( n \\): Total number of code samples generated for each problem. \\( c \\): Number of correct samples among the \\( n \\) samples that can pass all unit tests. \\( k \\): Parameter \\( k \\) in the pass@\\(k\\) metric, indicating the number of generated samples we consider. \\( \\binom{a}{b} \\): Represents the binomial coefficient, calculating the number of combinations of choosing \\( b \\) elements from \\( a \\) elements. \\( \\underset{\\text { Problems }}{\\mathbb{E}} \\): Represents the expected value (average value) over all evaluation problems. Formula Meaning:\nThe formula actually calculates the probability of having at least one correct sample. The formula \\( \\frac{\\binom{n-c}{k}}{\\binom{n}{k}} \\) calculates the probability of randomly selecting \\( k \\) samples from the generated \\( n \\) samples, and none of these \\( k \\) samples are correct. We subtract this probability from 1 to get the probability of randomly selecting \\( k \\) samples from \\( n \\) samples, and at least one of these \\( k \\) samples is correct, which is the meaning of the pass@\\(k\\) metric. This formula provides an unbiased estimate of pass@k, which is more suitable for scenarios requiring precise evaluation such as academic research. In actual calculations, a sample size \\( n \\) much larger than \\( k \\) is usually generated (for example, \\( n=200 \\), \\( k \\leq 100 \\) is used in papers) to more stably estimate pass@\\(k\\). Simplified Product Form of pass@k For easier numerical calculation, the original formula can also be converted into the following product form, which is still an unbiased estimate and can avoid numerical overflow problems:\n\\[ \\text { pass @ } k = \\underset{\\text { Problems }}{\\mathbb{E}}\\left[1 - \\prod_{i=0}^{k-1} \\frac{n-c-i}{n-i}\\right] \\]Derivation Process:\nThe opposite of having at least one correct sample is that all k samples are incorrect. Therefore, pass@k is equal to 1 minus the probability that all k samples are incorrect.\nConsider the scenario of sampling without replacement. Assume we draw \\( k \\) samples from \\( n \\) samples, and we want to calculate the probability that all \\( k \\) samples are incorrect. There are a total of \\( n \\) samples, of which \\( n-c \\) are incorrect.\nWhen drawing for the first time, the probability of drawing an incorrect sample is \\( \\frac{n-c}{n} \\).\nGiven that an incorrect sample was drawn in the first draw, when drawing for the second time, among the remaining \\( n-1 \\) samples, there are \\( n-c-1 \\) incorrect samples. Therefore, the conditional probability of still drawing an incorrect sample for the second time is \\( \\frac{n-c-1}{n-1} \\).\nBy analogy, when drawing for the \\( i \\)-th time ( \\( i \\) from 1 to \\( k \\)), given that incorrect samples were drawn in the previous \\( i-1 \\) times, the conditional probability of still drawing an incorrect sample for the \\( i \\)-th time is \\( \\frac{n-c-(i-1)}{n-(i-1)} = \\frac{n-c-i+1}{n-i+1} \\). To align with the index \\( i=0 \\) in the formula, we change the index to range from \\( i=0 \\) to \\( k-1 \\), then when drawing for the \\( (i+1) \\)-th time ( \\( i \\) from 0 to \\( k-1 \\)), the conditional probability is \\( \\frac{n-c-i}{n-i} \\).\nMultiply these conditional probabilities of \\( k \\) draws to get the probability that all \\( k \\) samples are incorrect:\n\\[ P(\\text{all k samples are incorrect}) = \\frac{n-c}{n} \\times \\frac{n-c-1}{n-1} \\times \\cdots \\times \\frac{n-c-k+1}{n-k+1} = \\prod_{i=0}^{k-1} \\frac{n-c-i}{n-i} \\] Finally, the simplified formula for pass@k is:\n\\[ \\text { pass @ } k = \\underset{\\text { Problems }}{\\mathbb{E}}\\left[1 - \\prod_{i=0}^{k-1} \\frac{n-c-i}{n-i}\\right] \\] This product form formula avoids directly calculating binomial coefficients that may be numerically large, is easier to understand and numerically calculate, especially in programming implementation, it can be multiplied term by term to effectively prevent numerical overflow.\ncons@N cons@N: By generating N samples and selecting the answer with the highest frequency as the final answer, the accuracy of this answer is evaluated. In the evaluation of DeepSeek-R1-Zero, cons@64 was used, i.e., 64 samples were generated, and the answer that appeared most frequently among them was taken as the final answer for evaluation.\n\\[ \\text{cons@N} = \\frac{1}{P} \\sum_{i=1}^{P} \\mathbb{I}(\\text{ConsensusAnswer}_i \\text{ is correct}) \\]Parameter Description:\n\\( P \\): Total number of problems evaluated. \\( \\text{ConsensusAnswer}_i \\): Consensus answer obtained through majority voting. \\( \\mathbb{I}(\\text{ConsensusAnswer}_i \\text{ is correct}) \\): Indicator function, 1 if the consensus answer is correct, 0 otherwise. Formula Meaning: Calculate the proportion of consensus answers that are correct among all evaluation problems. By increasing the number of generated samples \\( N \\) and adopting a majority voting strategy, the cons@N metric can more stably and reliably evaluate the average performance of the model. In cases where the model\u0026rsquo;s generated results have a certain degree of randomness, this metric can verify the consistency and accuracy of the model\u0026rsquo;s output.\nReward Model Reward models are crucial in the development of LLMs, mainly used in the following key stages:\nReinforcement Learning from Human Feedback: In the Reinforcement Learning from Human Feedback (RLHF) process, reward models are used to evaluate the quality of model-generated results and provide reward signals for subsequent reinforcement learning.\nKey Tool for Rejection Sampling: In the rejection sampling process, reward models score a large number of candidate results and filter out high-quality samples for SFT. Rejection sampling is an important method for automated sample engineering, and reward models are its core component.\nDiscriminator in Business Scenarios: In practical applications, reward models serve as discriminators or validators of LLM output results, evaluating the quality of generated results. Only results with scores exceeding a preset threshold will be output, otherwise, regeneration or degradation processing will be performed to improve the reliability and safety of the output.\nORM vs PRM Fig. 3. Outcome reward vs Process reward. (Image source: Zeng et al., 2024)\nCurrent reward models are mainly divided into two paradigms: Outcome Reward Model (ORM) and Process Reward Model (PRM). Figure 3 above intuitively shows the difference between these two reward models. The following table also compares the main characteristics of these two models:\nFeature ORM PRM Definition Holistically scores the complete result generated by the model Provides fine-grained scoring for each step or stage during content generation Main Advantages Simple and direct, easy to implement Comprehensive evaluation of overall results Provides more refined reward signals Helps guide each step of the model generation process Main Disadvantages High variance, large fluctuations in estimation results Lack of feedback during the process More complex to train and apply May introduce bias, especially when distribution differences are large Applicable Scenarios Tasks requiring overall evaluation of generated results Tasks requiring fine-grained control of the generation process, such as step-by-step reasoning or complex generation tasks Ability to Avoid Reward Hacking Medium, depends on the accuracy of overall scoring Lower, can cheat by optimizing rewards for each step rather than overall performance Training Complexity Lower, no need for additional supervision of the generation process Higher, needs to score at each step of generation, increasing computational and data requirements Explainability High, scoring is based on the final result Lower, scoring involves multiple steps of the generation process, difficult to fully understand the scoring basis for each step Adopting ORM To train DeepSeek-R1-Zero, the DeepSeek team chose ORM instead of PRM. This choice is based on the following considerations:\nAvoiding Reward Hacking PRM is prone to being exploited by agents in large-scale RL training, leading to reward hacking (Gao et al., 2022). Models may adopt \u0026ldquo;shortcuts\u0026rdquo; to maximize rewards instead of improving reasoning ability. Rule-based reward systems effectively avoid reward hacking problems through clear and interpretable rules.\nRule-based reward systems may be difficult to cover all types of questions when the problem scenario is complex or creative answers are required, and rule design may have loopholes that can be exploited by the model.\nReducing Training Complexity Training PRM requires a lot of computing resources and data, increasing the complexity of the training process. Rule-based reward systems, on the other hand, do not require additional training, and rules can be directly applied once determined, simplifying the training process. Rule-based reward systems are particularly suitable for tasks with automatic scoring or clear objectives, such as math problems, LeetCode programming problems, and tasks with clear output format requirements. For open-ended dialogue or creative tasks, it may be necessary to combine human feedback or trained reward models.\nReward Mechanism The reward system of DeepSeek-R1-Zero adopts a dual reward mechanism, which is automatically evaluated through predefined rules to ensure the efficiency and real-time nature of the evaluation process. This system mainly includes the following two types of rewards:\n1. Accuracy Reward\nDefinition: Measures the correctness of the model output result, which is the most critical part of the reward system. Implementation Method: Different verification methods are adopted according to different task types: Math Problems: Verify whether the final answer is consistent with the standard answer. Code Generation: Execute the code generated by the model through a compiler, and use preset unit test cases for multiple tests to determine the correctness of the code. Purpose: Guide the model to generate accurate and reliable output results. 2. Format Reward\nDefinition: A reward mechanism introduced to improve the readability and structure of model output, facilitating subsequent analysis and evaluation. Evaluation Method: Automatically evaluated by a predefined rule system during reinforcement learning training. Purpose: Encourage the model to generate structured output, such as including the thinking process and the final answer, making it easier to understand and analyze. The reward function \\( r(o) \\) of DeepSeek-R1-Zero consists of a weighted sum of accuracy reward and format reward:\n$$ r(o) = r_{\\text{accuracy}}(o) + \\lambda \\cdot r_{\\text{format_effective}}(o) $$Where, the effective format reward \\( r_{\\text{format_effective}}(o) \\) is calculated as follows:\n$$ r_{\\text{format_effective}}(o) = \\begin{cases} r_{\\text{format}}(o) \u0026 \\text{if the basic format of } o \\text{ meets the requirements} \\\\ 0 \u0026 \\text{if the basic format of } o \\text{ does not meet the requirements} \\end{cases} $$The basic format reward \\( r_{\\text{format}}(o) \\) is graded according to the degree of compliance with the format specification:\n$$ r_{\\text{format}}(o) = \\begin{cases} R_{\\text{format_full}} \u0026 \\text{if the format of } o \\text{ fully complies with the specification} \\\\ R_{\\text{format_partial}} \u0026 \\text{if the format of } o \\text{ partially complies with the specification} \\\\ 0 \u0026 \\text{if the format of } o \\text{ does not comply with the specification} \\end{cases} $$Experimental Process Training Template To guide the base model to follow specified instructions, the DeepSeek team designed a concise and effective training template. This template requires the model to first generate the reasoning process (placed between \u0026lt;think\u0026gt; and \u0026lt;/think\u0026gt; tags), and then provide the final answer (placed between \u0026lt;answer\u0026gt; and \u0026lt;/answer\u0026gt; tags). This structured format not only ensures the readability of the output, but also allows researchers to clearly observe the model\u0026rsquo;s reasoning process during RL training, thereby more accurately assessing the model\u0026rsquo;s learning progress.\nRole Prompt Content Assistant Reply User prompt (user question) Assistant: \u0026lt;think\u0026gt; Reasoning Process \u0026lt;/think\u0026gt; \u0026lt;answer\u0026gt; Answer \u0026lt;/answer\u0026gt; \u0026lt;think\u0026gt; and \u0026lt;/think\u0026gt; (Thinking Process Tags): Used to wrap the model\u0026rsquo;s intermediate reasoning steps, clearly showing the model\u0026rsquo;s thinking process, facilitating understanding of the model\u0026rsquo;s reasoning logic and error analysis. \u0026lt;answer\u0026gt; and \u0026lt;/answer\u0026gt; (Final Answer Tags): Used to wrap the model\u0026rsquo;s final answer, facilitating program automation to extract the answer part for efficient evaluation and subsequent processing. Evaluation Process Accuracy Evaluation: Evaluate whether the answer of the model output \\( o \\) is correct, and calculate the accuracy reward \\( r_{\\text{accuracy}}(o) \\). Basic Format Check: Check whether the basic format of the output \\( o \\) meets predefined requirements, such as whether it contains necessary tags \u0026lt;think\u0026gt; and \u0026lt;answer\u0026gt;, and whether the tags are correctly closed and nested. Effective Format Reward Judgment: Basic format does not comply: Effective format reward \\( r_{\\text{format_effective}}(o) = 0 \\). Basic format complies: Further evaluate the degree of format specification compliance, and calculate the basic format reward \\( r_{\\text{format}}(o) \\). Final Reward Calculation: Linearly weight and sum the accuracy reward \\( r_{\\text{accuracy}}(o) \\) and the effective format reward \\( r_{\\text{format_effective}}(o) \\) to obtain the final reward \\( r(o) \\). By combining accuracy reward and format reward, the reward system of DeepSeek-R1-Zero not only focuses on the correctness of the model output, but also emphasizes the structuredness and readability of the output results. This enables the model to not only give correct answers, but also show its thinking process, making it more like an intelligent agent with reasoning ability, rather than just a simple answer output machine.\nExperimental Results Fig. 4. Comparison of DeepSeek-R1-Zero and OpenAI o1 models on reasoning-related benchmarks. (Image source: DeepSeek-AI, 2025)\nFigure 4 shows the performance of different models on multiple benchmarks. In the AIME 2024 benchmark, the pass@1 score of the DeepSeek-R1-Zero model reached 71.0%, and the cons@64 score was 86.7%, comparable to the OpenAI o1-0912 model.\nFig. 5. The average response length of DeepSeek-R1-Zero on the training set during the RL process. (Image source: DeepSeek-AI, 2025)\nFigure 5 shows that as training deepens, the DeepSeek-R1-Zero model exhibits the ability of spontaneous self-evolution. The model dynamically allocates \u0026ldquo;thinking time\u0026rdquo; according to the complexity of the question. For more complex questions, it spontaneously generates longer reasoning chains for deeper thinking. This adaptive adjustment of \u0026ldquo;thinking time\u0026rdquo; is not artificially set, but an emergent behavior of the model in the RL training process, fully reflecting the autonomous improvement of the model\u0026rsquo;s reasoning ability driven by reinforcement learning.\nDeepSeek-R1 Training Process To further improve model performance based on DeepSeek-R1-Zero, the DeepSeek team adopted a multi-stage training strategy and incorporated cold-start data into the training process. The training process of DeepSeek-R1 mainly includes the following four stages, reflecting the progressive path from initial policy initialization to comprehensive capability improvement:\nCold Start: Using high-quality long Chain-of-Thought (CoT) data, perform preliminary SFT on the DeepSeek-V3-Base base model to lay the foundation for subsequent reinforcement learning.\nReasoning-Oriented RL: Based on the cold-start model, apply reinforcement learning algorithms, focusing on enhancing the model\u0026rsquo;s ability in reasoning-intensive tasks.\nRejection Sampling \u0026amp; SFT: Filter high-quality reasoning data through rejection sampling technology, and combine it with non-reasoning data for SFT to further improve the model\u0026rsquo;s reasoning ability and general ability.\nAll-Scenario RL: Comprehensively consider reasoning and non-reasoning tasks, and conduct the second stage of reinforcement learning to align the model with human preferences and improve performance in a wider range of scenarios.\nCold Start In the training process of DeepSeek-R1, the cold start stage is crucial, like the igniter of an engine, laying a solid foundation for the subsequent complex reinforcement learning process. SFT is the core technology of the cold start stage.\nTraining Objective The objective of the cold start stage is clear and critical: using high-quality Chain-of-Thought (CoT) data to perform preliminary fine-tuning on the DeepSeek-V3-Base base model. This fine-tuning aims to quickly endow the model with the following core capabilities:\nPreliminary Reasoning Ability: Guide the model to learn to imitate the human reasoning process, laying the foundation for more complex reasoning. Good Text Generation Quality: Ensure the fluency and naturalness of the text output by the model, improving the user experience. These CoT data are like the model\u0026rsquo;s \u0026ldquo;starting fuel\u0026rdquo;, helping the model quickly grasp human reasoning patterns and providing good policy initialization for subsequent reinforcement learning, effectively avoiding the inefficiency and instability of RL training starting from scratch in the early stage.\nData Construction To construct high-quality cold-start data, the DeepSeek team conducted multi-faceted explorations and finally integrated the following efficient methods:\nFew-shot Prompting: Using a small number of high-quality examples to guide the model to generate longer, deeper, and more logical CoT data. Model Generation + Reflection Verification: Directly prompt the model to generate answers, and add reflection and verification links to ensure the quality of answers and the correctness of reasoning. Optimize R1-Zero Output: Collect the output of the DeepSeek-R1-Zero model, and improve the readability and overall quality of the data through manual annotation and optimization. Through the above strategies, the DeepSeek team accumulated thousands of high-quality cold-start data, and used this as a basis to fine-tune DeepSeek-V3-Base as a solid starting point for reinforcement learning.\nAdvantages of Cold Start Compared to directly using DeepSeek-R1-Zero as a starting point, cold-start data brings several significant advantages, laying a better foundation for subsequent training:\nImproved Readability:\nThe output of DeepSeek-R1-Zero has readability challenges, such as language mixing, lack of structured format, etc. Cold-start data is specially designed with a more readable output mode, including: Adding Summary: Add a refined summary at the end of the reply to quickly extract core conclusions. Filtering Bad Replies: Remove unfriendly or low-quality replies to ensure data purity. Structured Output Format: Adopt the | special_token | \u0026lt;reasoning_process\u0026gt; | special_token | \u0026lt;summary\u0026gt; format to clearly present the reasoning process and summary. Enhanced Performance:\nBy carefully designing data patterns that incorporate human prior knowledge, the DeepSeek team observed a significant improvement in model performance compared to R1-Zero. This further verifies that iterative training is an effective path to improve the performance of reasoning models. Superior Policy Initialization:\nThe core of SFT in the cold start stage is policy initialization. Policy initialization is a key step in building Reasoning LLMs, such as the OpenAI o1 series. By learning high-quality CoT data, the model initially grasps human reasoning patterns and has the ability to generate structured reasoning processes, laying a solid foundation for subsequent reinforcement learning training and avoiding the dilemma of starting exploration from scratch. SFT The core objective of Supervised Fine-tuning (SFT) is to fine-tune the model on supervised labeled data so that its predictions are as close as possible to the true labels. This aims to improve the model\u0026rsquo;s ability in specific tasks and instruction execution.\nLoss Function The training objective of SFT is to minimize the difference between model predictions and true labels. The loss function usually adopts Cross-Entropy Loss, also known as Negative Log-Likelihood, to measure the difference between the model\u0026rsquo;s predicted token distribution and the true token distribution. To balance the contributions of output sequences of different lengths, we usually normalize the loss function to the average loss per token.\nThe loss function formula is as follows:\n\\[ \\mathcal{L}_{SFT}(\\theta) = - \\mathbb{E}_{(q, o) \\sim P_{sft}(Q, O)}\\left[\\frac{1}{|o|} \\sum_{t=1}^{|o|} \\log \\pi_\\theta\\left(o_t \\mid q, o_{\u0026lt;t} \\right)\\right] \\]Parameter Description:\n\\( \\mathcal{L}_{SFT}(\\theta) \\): SFT loss function, minimized by adjusting model parameters \\( \\theta \\). \\( \\mathbb{E}_{(q, o) \\sim P_{sft}(Q, O)}[\\cdot] \\): Expectation over the SFT dataset distribution \\( P_{sft}(Q, O) \\). \\( P_{sft}(Q, O) \\): SFT dataset distribution, \\( q \\) represents the question (Query), and \\( o \\) represents the corresponding standard answer output (Output). \\( (q, o) \\): Question-answer pair sampled from the SFT dataset. \\( |o| \\): Token length of the standard answer output. \\( o_t \\): The \\( t \\)-th token of the standard answer output. \\( o_{\u0026lt;t} \\): The first \\( t-1 \\) tokens of the standard answer output. \\( \\pi_\\theta\\left(o_t \\mid q, o_{\u0026lt;t} \\right) \\): Given the question \\( q \\) and the preceding text \\( o_{\u0026lt;t} \\), the probability of the model predicting token \\( o_t \\). \\( \\frac{1}{|o|} \\): Length normalization factor, dividing the total loss by the output sequence length to get the average loss per token. The SFT loss function aims to penalize deviations between model predictions and standard answers. For a given question \\( q \\) and standard answer \\( o \\), the loss function calculates the probability \\( \\pi_\\theta(o_t | q, o_{\u0026lt;t} ) \\) of the model predicting each token \\( o_t \\) in the answer \\( o \\). By dividing by the output length \\( |o| \\), the loss function is normalized to the average negative log-likelihood per token.\nWhen the model accurately predicts the standard answer token, \\( \\pi_\\theta(o_t \\mid q, o_{\u0026lt;t} ) \\approx 1 \\), \\( \\log \\pi_\\theta(o_t \\mid q, o_{\u0026lt;t} ) \\approx 0 \\), and the loss value is close to the minimum. When the model prediction deviates from the standard answer, \\( \\pi_\\theta(o_t \\mid q, o_{\u0026lt;t} ) \\) is smaller, \\( \\log \\pi_\\theta(o_t \\mid q, o_{\u0026lt;t} ) \\) is negative and has a larger absolute value, and the loss value increases. The process of minimizing the SFT loss function is the process of making the model learn to generate text as similar as possible to the standard answers in the training dataset. From the perspective of negative log-likelihood, the goal is to find the optimal model parameters \\( \\theta \\) to maximize the probability of the model generating the answer \\( o \\) in the training data, which is equivalent to minimizing the negative log-likelihood of generating the answer \\( o \\). High-quality CoT data contains human preferences for reasoning and results, so SFT can also be regarded as a process of making the model learn and fit human reasoning preferences.\nGradient The gradient of the SFT loss function is used to guide model parameter updates to reduce the loss value. The gradient of the loss function with respect to the model parameters \\( \\theta \\) is:\n\\[ \\nabla_{\\theta} \\mathcal{L}_{SFT} = - \\mathbb{E}_{(q, o) \\sim P_{sft}(Q, O)}\\left[\\frac{1}{|o|} \\sum_{t=1}^{|o|} \\nabla_{\\theta} \\log \\pi_{\\theta}\\left(o_t \\mid q, o_{\u0026lt;t} \\right)\\right] \\]Parameter Description:\n\\( \\nabla_{\\theta} \\mathcal{L}_{SFT} \\): Gradient of the SFT loss function with respect to parameter \\( \\theta \\), indicating the direction in which the loss function value decreases fastest. \\( \\nabla_{\\theta} \\log \\pi_{\\theta}\\left(o_t \\mid q, o_{\u0026lt;t} \\right) \\): Gradient of the token probability logarithm \\( \\log \\pi_{\\theta}\\left(o_t \\mid q, o_{\u0026lt;t} \\right) \\) with respect to parameter \\( \\theta \\). \\( \\frac{1}{|o|} \\): Length normalization factor, consistent with the loss function, the gradient is also the gradient of the average loss per token. When actually calculating the gradient, stochastic gradient descent algorithm is usually used to update the model parameters along the gradient descent direction, gradually minimizing the loss function and improving the accuracy of the model in generating standard answers.\nGradient Coefficient\nIn the SFT stage, the gradient coefficient is usually set to 1, which means that all training samples contribute equally to the update of model parameters. The model learns each example equally, striving to minimize the average loss over the entire dataset.\nData Source and Human Preference Data Source: The SFT dataset mainly consists of high-quality long Chain-of-Thought (CoT) examples, representing the \u0026ldquo;standard answers\u0026rdquo; that the model is expected to learn, used to guide the minimization of the loss function. Data may come from manual annotation or generation by more powerful models. Refer to the SFT dataset OpenO1-SFT of the Open-o1 project, which contains long CoT replies. Human Preference: In the SFT stage, human selection can be regarded as an implicit reward function. High-quality CoT data reflects human expectations for model reasoning and output. By learning these data, the model minimizes the deviation from human expected output, thereby fitting human preferences. Reasoning-Oriented Reinforcement Learning After cold-start fine-tuning, the DeepSeek team further improved the model\u0026rsquo;s ability in reasoning-intensive tasks (such as coding, mathematics, science, and logical reasoning) through reinforcement learning (RL). The core of this stage is to maximize the reward function, guiding the model to learn more effective reasoning strategies.\nReward Function To solve the problem of CoT language mixing during reasoning, the DeepSeek team introduced language consistency reward and combined it with task reward to form the total reward function:\n\\[ r(o) = r_{\\text{task}}(o) + \\alpha \\cdot r_{\\text{lang_consistency}}(o) \\]Parameter Description:\n\\( r(o) \\): Total reward function, the goal of RL training is to maximize this function. \\( r_{\\text{task}}(o) \\): Task reward based on task completion, measuring the accuracy of model reasoning. \\( r_{\\text{lang_consistency}}(o) \\): Language consistency reward, measuring the language purity of CoT output. \\( \\alpha \\): Hyperparameter, balancing the weights of task reward and language consistency reward. The total reward function is the weighted sum of task reward and language consistency reward. Maximizing \\( r(o) \\) drives the model to improve reasoning accuracy while maintaining the language consistency of CoT output. The role of \\( \\alpha \\) is to adjust the model\u0026rsquo;s emphasis on language consistency.\nTraining Objective By maximizing the above reward function, the DeepSeek team conducted RL training on the model after cold-start fine-tuning, optimizing model parameters to obtain higher reward values in reasoning tasks, and ultimately improving reasoning ability.\nRFT Rejection Sampling Fine-tuning (RFT) aims to improve the general ability of the model by refining training data. Its core idea is to minimize the selective loss function, guiding the model to learn the generation patterns of high-quality outputs.\nLoss Function RFT adopts a rejection sampling strategy to distinguish the generation and selection processes of reasoning data and non-reasoning data, and constructs a high-quality SFT dataset. The training objective is to minimize the following loss function:\n\\[ \\mathcal{L}_{RFT}(\\theta) = - \\mathbb{E}_{(q, o) \\sim P_{sft}(Q) \\times \\pi_{sft}(O \\mid q)}\\left[\\frac{1}{|o|} \\sum_{t=1}^{|o|} \\mathbb{I}(o) \\log \\pi_{\\theta}\\left(o_t \\mid q, o_{\u0026lt;t} \\right)\\right] \\]Where, the indicator function \\( \\mathbb{I}(o) \\) is defined as:\n\\[ \\mathbb{I}(o) = \\begin{cases} 1, \u0026 \\text{if output } o \\text{ is judged to be high quality} \\\\ 0, \u0026 \\text{otherwise} \\end{cases} \\]Parameter Description:\n\\( \\mathcal{L}_{RFT}(\\theta) \\): RFT loss function. \\( P_{sft}(Q) \\): Distribution of question \\( q \\). \\( \\pi_{sft}(O \\mid q) \\): Conditional probability distribution of the SFT model generating output \\( O \\) given question \\( q \\). \\( \\mathbb{I}(o) \\): Indicator function, used to select high-quality answers. It is 1 when output \\( o \\) is judged to be high quality, and 0 otherwise. The RFT loss function is based on cross-entropy loss, and selectively learns high-quality outputs through the indicator function \\( \\mathbb{I}(o) \\):\nHigh-quality output (\\( \\mathbb{I}(o) = 1 \\)): The loss function degenerates into standard cross-entropy loss, and the model updates parameters based on the negative log-likelihood of high-quality answers, minimizing the difference between model predictions and high-quality answers. Low-quality output (\\( \\mathbb{I}(o) = 0 \\)): The loss function is zero, and low-quality answers do not participate in parameter updates. RFT guides the model to focus on learning the generation patterns of high-quality answers by minimizing the loss function, achieving selective learning.\nData Generation High-quality data (reasoning data): Generate candidate answers through the RL model, use a reward model (or DeepSeek-V3 model) to score, and reject sample to retain high-score answers. SFT data (non-reasoning data): Reuse the SFT dataset of DeepSeek-V3 and its generation process. Training Process Use the high-quality dataset obtained by rejection sampling to perform SFT on the DeepSeek-V3-Base model, minimize the RFT loss function, and improve the model\u0026rsquo;s reasoning and general abilities.\nRFT iteratively refines data and retrains the model, expecting the model to learn higher quality data patterns in each iteration, and finally converge to a high-quality output model. In the iterative process, the training data distribution \\( P_{sft}(Q, O) \\) gradually focuses on high-quality data, enabling the model to continuously improve its ability to generate high-quality outputs in the process of loss minimization.\nOnRFT Online Rejection Sampling Fine-tuning (OnRFT) has a similar objective to RFT, both aiming to learn high-quality output patterns by minimizing the selective loss function. The main difference between OnRFT and RFT is the data sampling method, and the loss function form is consistent with RFT. The gradient of the OnRFT loss function is:\n\\[ \\nabla_{\\theta} \\mathcal{L}_{OnRFT}(\\theta) = - \\mathbb{E}_{(q, o) \\sim P_{sft}(Q) \\times \\pi_{\\theta}(O \\mid q)}\\left[\\frac{1}{|o|} \\sum_{t=1}^{|o|} \\mathbb{I}(o) \\nabla_{\\theta} \\log \\pi_{\\theta}\\left(o_t \\mid q, o_{\u0026lt;t} \\right)\\right] \\]Parameter Description:\n\\( \\nabla_{\\theta} \\mathcal{L}_{OnRFT} \\): Gradient of the OnRFT loss function with respect to model parameter \\( \\theta \\), indicating the direction of loss function decrease. \\( \\pi_{\\theta}(O \\mid q) \\): Conditional probability distribution of the current training model generating output \\( O \\) given question \\( q \\). Comparison of RFT and OnRFT The table below briefly compares the main differences between RFT and OnRFT.\nFeature RFT OnRFT Data Generation Method Offline Online Data Generation Model SFT model \\( \\pi_{sft} \\) Current training model \\( \\pi_{\\theta} \\) Rejection Sampling Data Source Pre-generated SFT dataset Real-time data generation during training Data Loop Separated Online loop Loss Function Mechanism Selective cross-entropy loss, selects high-quality output for learning Selective cross-entropy loss, selects high-quality output for learning Training Data Distribution Change Gradually focuses on high-quality data Dynamic change, fits current model capability All-Scenario Reinforcement Learning To further align with human preferences, the DeepSeek team conducted the second stage of RL, aiming to improve the model\u0026rsquo;s Helpfulness and Harmlessness while maximizing the reward function, and also taking into account reasoning ability. This stage still uses maximizing the reward function to guide model training, but the design of the reward function is more complex to reflect multi-dimensional optimization goals.\nThe RL training in this stage combines:\nDiverse Prompt Distribution: Covers a wider range of scenarios, including reasoning and general tasks. Multi-objective Reward Signals: Reasoning Data: Follows the rule-based task reward, focusing on reasoning accuracy. Maximize task reward to guide the model to minimize reasoning errors. General Data: Uses a reward model to capture human preferences for helpfulness and harmlessness. The goal of the reward model is to learn human preferences and output reward signals consistent with human preferences. The goal of RL training is to maximize the reward value given by the reward model, thereby indirectly minimizing the deviation between model output and human preferences. Distillation To transfer the powerful reasoning ability of DeepSeek-R1 to more efficient small models, the DeepSeek team adopted Distillation (Hinton et al., 2015) technology. The distillation process mainly includes the following steps:\nData Generation: Use the trained DeepSeek-R1 model to generate about 800,000 high-quality reasoning data. These data not only include reasoning-intensive tasks (such as math problems, programming problems), but also cover general tasks (such as question answering, dialogue) to ensure the diversity and coverage of distillation data.\nModel Fine-tuning: Use the generated 800,000 high-quality reasoning data to fine-tune small dense models. Distillation experiments selected Qwen and Llama series models as Student models, covering multiple model scales from 1.5B to 70B parameters to explore the effect of distillation technology under different model scales. The selected Student models include Qwen2.5-Math-1.5B, Qwen2.5-Math-7B, Qwen2.5-14B, Qwen2.5-32B, Llama-3.1-8B, and Llama-3.3-70B-Instruct.\nPerformance Evaluation: Conduct a comprehensive performance evaluation of the distilled models in multiple reasoning-related benchmarks. The evaluation results are intended to verify whether distillation technology can effectively transfer the reasoning ability of large models to small models, and to investigate whether the reasoning ability of distilled small models can reach or even exceed the level of large models.\nKL Divergence Distillation In addition to directly using the text output generated by the Teacher model as pseudo-labels for SFT distillation, a more rigorous method is to also consider the token probability distribution \\( \\pi_{\\text{teacher}} \\) generated by the Teacher model. KL divergence distillation is a commonly used method, which not only allows the Student model to learn the text output of the Teacher model, but also learns the token probability distribution of the Teacher model. By minimizing the KL divergence between the output probability distributions of the Student model and the Teacher model, the knowledge of the Teacher model can be more fully transferred to the Student model. However, in actual engineering, directly using the text output of the Teacher model as pseudo-labels for SFT distillation can usually achieve sufficiently good results and is simpler to implement.\nExperimental Results The experimental results are shown in Figure 6:\nFig. 6. Comparison of DeepSeek-R1 distilled models and other comparable models on reasoning-related benchmarks. (Image source: DeepSeek-AI, 2025)\nThe experimental results indicate that this direct SFT distillation method can substantially enhance the inference capabilities of smaller models. Notably, on various benchmark tests excluding CodeForces, the distilled Llama-3.3-70B-Instruct model outperforms OpenAI-o1-mini. Achieving such remarkable improvements solely through SFT distillation from a larger base model demonstrates the strong potential of this approach for future research and applications.\nDiscussion DeepSeek-R1, based on a multi-stage training framework, explores a simplified path for Reasoning Model training technology, mainly including the following points:\nLinearized Thinking Process: CoT Replaces MCTS\nTraditional reinforcement learning AI, such as Go and chess, once relied on Monte Carlo Tree Search (MCTS). DeepSeek-R1 and other models explore the use of autoregressive chain-of-thought methods to simplify the reasoning process, gradually abandoning computationally complex MCTS. CoT decomposes complex reasoning into linear steps, and the model reasons step by step like solving a problem, rather than the exhaustive search of MCTS. This linearized thinking reduces computational complexity, is more in line with human thinking habits, and makes it easier for models to learn complex reasoning strategies. Eliminating Independent Value Networks: Simplifying RL Architecture\nTraditional reinforcement learning (such as PPO) usually requires independent policy networks and value networks. DeepSeek-R1 and other studies have found that strengthened policy networks or simplified value evaluation methods (such as GRPO\u0026rsquo;s in-group relative scoring) can replace independent value networks. This simplifies the RL training architecture, reduces resource requirements, and improves efficiency. It shows that the policy network of LLMs already has strong value evaluation capabilities, and no additional value network is needed. Focusing on Outcome Rewards: Minimizing Reward Signals\nDeepSeek-R1 adopts a simpler ORM reward strategy, mainly focusing on the accuracy reward of the final result, weakening the reward for intermediate reasoning steps. This strategy is inspired by AlphaZero (Silver et al., 2017), which only focuses on winning or losing. For Reasoning Models, outcome rewards may be more effective than PRM, which can help models learn \u0026ldquo;ways of thinking\u0026rdquo; more naturally and reduce cumbersome step-by-step supervision. Increasing Thinking Time: Model Spontaneously Emerges Deep Thinking\nDeepSeek-R1-Zero training shows the ability to spontaneously increase thinking time. As training deepens, the model adaptively allocates more \u0026ldquo;thinking time\u0026rdquo; according to the complexity of the question, generating longer reasoning sequences. This increase in \u0026ldquo;thinking time\u0026rdquo; is an emergent behavior of the model in RL training. Increasing thinking time reflects the model\u0026rsquo;s deeper exploration and optimization of the thinking process. Complex problems require more reasoning steps to find answers. The self-evolution ability of DeepSeek-R1-Zero confirms the potential of reinforcement learning in improving model reasoning ability. Summary The success of DeepSeek-R1 demonstrates the great potential of RL in improving the reasoning ability of LLMs. The GRPO algorithm adopted by DeepSeek-R1 is superior to PPO and DPO in terms of computational efficiency, optimization stability, and reward robustness, and reduces training resource consumption by simplifying the model architecture. DeepSeek-R1 provides a path worth referencing for open-source Reasoning Model replication of o1.\nReferences [1] OpenAI O1 [Website]. OpenAI, 2024. (OpenAI O1 official introduction page)\n[2] Jaech A, et al. Openai o1 system card [J]. arXiv preprint arXiv:2412.16720, 2024.\n[3] Open-r1 [Website]. GitHub, 2024. (Open-r1 open source project GitHub repository)\n[4] Sutton R. The bitter lesson [J]. Incomplete Ideas (blog), 2019, 13(1): 38.\n[5] Liu A, et al. Deepseek-v3 technical report [J]. arXiv preprint arXiv:2412.19437, 2024.\n[6] Schulman J, et al. Proximal policy optimization algorithms [J]. arXiv preprint arXiv:1707.06347, 2017.\n[7] Ouyang L, et al. Training language models to follow instructions with human feedback [J]. Advances in Neural Information Processing Systems, 2022, 35: 27730-27744. https://arxiv.org/abs/2203.02155\n[8] Shao Z, et al. Deepseekmath: Pushing the limits of mathematical reasoning in open language models [J]. arXiv preprint arXiv:2402.03300, 2024.\n[9] J. Schulman. Approximating kl divergence, 2020.\n[10] Gao L, Schulman J, Hilton J. Scaling laws for reward model overoptimization [C]// International Conference on Machine Learning. PMLR, 2023.\n[11] Chen M, et al. Evaluating large language models trained on code [J]. arXiv preprint arXiv:2107.03374, 2021.\n[12] Learning to Reason with LLMs [Website]. OpenAI, 2024. (OpenAI blog post about LLM reasoning ability)\n[13] AMC [Website]. Mathematical Association of America (MAA), 2024. (American Mathematics Competitions AMC official website)\n[14] Open-O1 [Website]. GitHub, 2024. (Open-O1 open source project GitHub repository)\n[15] Zeng Z, et al. Scaling of Search and Learning: A Roadmap to Reproduce o1 from Reinforcement Learning Perspective [J]. arXiv preprint arXiv:2412.14135, 2024.\n[16] Hinton G. Distilling the Knowledge in a Neural Network [J]. arXiv preprint arXiv:1503.02531, 2015.\n[17] Silver D, et al. Mastering chess and shogi by self-play with a general reinforcement learning algorithm [J]. arXiv preprint arXiv:1712.01815, 2017.\nCitation Citation: Please indicate the original author and source when reprinting or citing the content of this article.\nCited as:\nYue Shui. (Jan 2025). o1 Replication Progress: DeepSeek-R1. https://syhya.github.io/posts/2025-01-27-deepseek-r1\nOr\n@article{syhya2025deepseekr1, title = \u0026#34;o1 Replication Progress: DeepSeek-R1\u0026#34;, author = \u0026#34;Yue Shui\u0026#34;, journal = \u0026#34;syhya.github.io\u0026#34;, year = \u0026#34;2025\u0026#34;, month = \u0026#34;Jan\u0026#34;, url = \u0026#34;https://syhya.github.io/posts/2025-01-27-deepseek-r1\u0026#34; } ","permalink":"https://syhya.github.io/posts/2025-01-27-deepseek-r1/","summary":"\u003cp\u003eDeepSeek AI recently released \u003cstrong\u003eDeepSeek-R1\u003c/strong\u003e (\u003ca href=\"https://arxiv.org/abs/2501.12948\"\u003eDeepSeek-AI, 2025\u003c/a\u003e), whose reasoning performance on multiple benchmarks approaches the level of OpenAI\u0026rsquo;s o1 (\u003ca href=\"https://openai.com/o1/\"\u003eOpenAI, 2024\u003c/a\u003e), marking a significant step for the open-source community in successfully replicating o1. Relevant code for R1 can be found in the huggingface\u0026rsquo;s attempt to open-source replication project \u003ca href=\"https://github.com/huggingface/open-r1\"\u003eopen-r1\u003c/a\u003e. While previous research has often relied on massive amounts of supervised data to enhance the performance of Large Language Models (LLMs), the success of DeepSeek-R1 and its earlier experiment, DeepSeek-R1-Zero, powerfully demonstrates the potential of purely large-scale reinforcement learning in improving the reasoning capabilities of LLMs. This success reinforces the profound insight proposed by Richard Sutton in \u0026ldquo;The Bitter Lesson\u0026rdquo;:\u003c/p\u003e","title":"o1 Replication Progress: DeepSeek-R1"},{"content":"Background The Transformer (Vaswani et al., 2017) is a model based on the encoder-decoder architecture. This model has demonstrated outstanding performance in the field of natural language processing (NLP), leading to a series of optimized models based on it, such as BERT (Devlin et al., 2018) which uses only the encoder, GPT (Radford et al., 2018) series which uses only the decoder, and subsequent large language models (LLMs) like LLaMA (Touvron et al., 2023) and GPT-4 (OpenAI et al., 2024), most of which adopt a decoder-only architecture.\nNotations Symbol Meaning \\(B\\) Batch Size \\(S\\) Sequence Length \\(d\\) Hidden Dimension / Model Size \\(H\\) Number of Heads in Multi-Head Attention \\(G\\) Number of Groups, used for Grouped-Query Attention (GQA) \\(d_{\\text{head}} = \\frac{d}{H}\\) Dimension of each attention head \\(\\mathbf{X} \\in \\mathbb{R}^{B \\times S \\times d}\\) Input sequence, with batch size \\(B\\), sequence length \\(S\\), and hidden dimension \\(d\\) \\(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V} \\in \\mathbb{R}^{B \\times S \\times d}\\) Query, Key, and Value matrices after linear transformation \\(W_Q, W_K, W_V \\in \\mathbb{R}^{d \\times d}\\) Trainable linear projection matrices for generating \\(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}\\) respectively \\(W_O \\in \\mathbb{R}^{d \\times d}\\) Trainable linear projection matrix for mapping multi-head/grouped attention outputs back to dimension \\(d\\) \\(\\mathbf{Q}_h, \\mathbf{K}_h, \\mathbf{V}_h \\in \\mathbb{R}^{B \\times S \\times d_{\\text{head}}}\\) Query, Key, and Value sub-matrices for the \\(h\\)-th attention head \\(\\mathbf{K}^*, \\mathbf{V}^*\\) Shared \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\) obtained by averaging or merging all heads\u0026rsquo; \\(\\mathbf{K}_h, \\mathbf{V}_h\\) in Multi-Query Attention (MQA) \\(\\mathbf{q}, \\mathbf{k}\\in \\mathbb{R}^{d_{\\text{head}}}\\) Single query and key vectors used in mathematical derivations (Central Limit Theorem) in Scaled Dot-Product Attention Attention Mechanism in Transformers The core of the Transformer model is the Self-Attention Mechanism, which allows the model to dynamically focus on different parts of the sequence when processing sequential data. Specifically, given an input sequence \\(\\mathbf{X} \\in \\mathbb{R}^{B \\times S \\times d}\\) (batch size \\(B\\), sequence length \\(S\\), hidden dimension \\(d\\)), the Transformer projects it into queries (\\(\\mathbf{Q}\\)), keys (\\(\\mathbf{K}\\)), and values (\\(\\mathbf{V}\\)) through three linear layers:\n\\[ \\mathbf{Q} = \\mathbf{X} W_Q, \\quad \\mathbf{K} = \\mathbf{X} W_K, \\quad \\mathbf{V} = \\mathbf{X} W_V \\]where \\(W_Q, W_K, W_V \\in \\mathbb{R}^{d \\times d}\\) are trainable weight matrices. MHA enhances the model\u0026rsquo;s representational capacity by splitting these projections into multiple heads, each responsible for different subspace representations.\nThere are various forms of attention mechanisms, and the Transformer relies on Scaled Dot-Product Attention: given query matrix \\(\\mathbf{Q}\\), key matrix \\(\\mathbf{K}\\), and value matrix \\(\\mathbf{V}\\), the output is a weighted sum of the value vectors, where each weight is determined by the dot product of the query with the corresponding key:\n\\[ \\text{Attention}(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}) = \\text{softmax}\\!\\Bigl(\\frac{\\mathbf{Q} \\mathbf{K}^\\top}{\\sqrt{d_{\\text{head}}}}\\Bigr)\\,\\mathbf{V} \\] Fig. 1. Scaled Dot-Product Attention. (Image source: Vaswani et al., 2017)\nMulti-Head Attention (MHA) Multi-Head Attention (MHA) splits \\(\\mathbf{Q}\\), \\(\\mathbf{K}\\), and \\(\\mathbf{V}\\) into multiple heads, each with independent \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\), thereby increasing the model\u0026rsquo;s capacity and flexibility:\n\\[ \\text{MHA}(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}) = \\text{Concat}(\\text{head}_1, \\dots, \\text{head}_H)\\, W_O \\]where each head is computed as:\n\\[ \\text{head}_h = \\text{Attention}(\\mathbf{Q}_h, \\mathbf{K}_h, \\mathbf{V}_h) = \\text{softmax}\\!\\Bigl(\\frac{\\mathbf{Q}_h \\mathbf{K}_h^\\top}{\\sqrt{d_{\\text{head}}}}\\Bigr)\\,\\mathbf{V}_h \\] Fig. 2. Multi-Head Attention. (Image source: Vaswani et al., 2017)\nBenefits of Using Multi-Head Attention Capturing Diverse Features: A single-head attention mechanism can only focus on one type of feature or pattern in the input sequence, whereas MHA can simultaneously focus on different features or patterns across multiple attention heads, enabling the model to understand the input data more comprehensively. Enhanced Expressive Power: Each attention head can learn different representations, enhancing the model\u0026rsquo;s expressive power. Different heads can focus on different parts or relationships within the input sequence, helping the model capture complex dependencies more effectively. Improved Stability and Performance: MHA reduces noise and instability from individual attention heads by averaging or combining multiple heads, thereby improving the model\u0026rsquo;s stability and performance. Parallel Computation: MHA allows for parallel computation since each attention head\u0026rsquo;s calculations are independent. This boosts computational efficiency, especially when using hardware accelerators like GPUs or TPUs. Softmax in Scaled Dot-Product Attention The softmax function transforms a vector \\(\\mathbf{z} = [z_1, z_2, \\dots, z_n]\\) into a probability distribution \\(\\mathbf{y} = [y_1, y_2, \\dots, y_n]\\) defined as:\n\\[ y_i = \\frac{\\exp(z_i)}{\\sum_{j=1}^{n} \\exp(z_j)} \\quad \\text{for} \\quad i = 1, 2, \\dots, n \\]In the attention mechanism, the softmax function is used to convert the scaled dot product \\(\\tfrac{\\mathbf{Q} \\mathbf{K}^\\top}{\\sqrt{d_{\\text{head}}}}\\) into attention weights:\n\\[ \\text{softmax}\\!\\Bigl(\\frac{\\mathbf{Q} \\mathbf{K}^\\top}{\\sqrt{d_{\\text{head}}}}\\Bigr) = \\Bigl[ \\frac{\\exp\\Bigl(\\frac{Q_1 \\cdot K_1}{\\sqrt{d_{\\text{head}}}}\\Bigr)}{\\sum_{j=1}^{S} \\exp\\Bigl(\\frac{Q_1 \\cdot K_j}{\\sqrt{d_{\\text{head}}}}\\Bigr)}, \\dots, \\frac{\\exp\\Bigl(\\frac{Q_S \\cdot K_S}{\\sqrt{d_{\\text{head}}}}\\Bigr)}{\\sum_{j=1}^{S} \\exp\\Bigl(\\frac{Q_S \\cdot K_j}{\\sqrt{d_{\\text{head}}}}\\Bigr)} \\Bigr] \\]In the Transformer\u0026rsquo;s attention mechanism, the scaling factor \\(\\sqrt{d_{\\text{head}}}\\) in the scaled dot-product attention formula ensures that the dot product results do not become excessively large as the vector dimension increases before applying softmax. This is primarily for the following reasons:\nPreventing Gradient Vanishing: Scaling the attention scores avoids overly large inputs to the softmax function, preventing gradients from vanishing during backpropagation.\nNumerical Stability: Scaling ensures that the input range to the softmax function remains reasonable, avoiding extreme values that could lead to numerical instability and overflow issues, especially when the vector dimensions are large. Without scaling, the dot product results could cause the softmax\u0026rsquo;s exponential function to produce excessively large values.\nMathematical Explanation: Suppose vectors \\(\\mathbf{q}\\) and \\(\\mathbf{k}\\) have independent and identically distributed components with mean 0 and variance 1. Their dot product \\(\\mathbf{q} \\cdot \\mathbf{k}\\) has a mean of 0 and a variance of \\(d_{\\text{head}}\\). To prevent the dot product\u0026rsquo;s variance from increasing with the dimension \\(d_{\\text{head}}\\), it is scaled by \\(\\frac{1}{\\sqrt{d_{\\text{head}}}}\\). This scaling ensures that the variance of the scaled dot product remains 1, independent of \\(d_{\\text{head}}\\).\nAccording to statistical principles, dividing a random variable by a constant scales its variance by the inverse square of that constant. Therefore, the scaling factor \\(\\tfrac{1}{\\sqrt{d_{\\text{head}}}}\\) effectively controls the magnitude of the attention scores, enhancing numerical stability. The detailed derivation is as follows:\nAssume \\(\\mathbf{q}, \\mathbf{k} \\in \\mathbb{R}^{d_{\\text{head}}}\\) with independent and identically distributed components, mean 0, and variance 1. Their dot product is:\n\\[ \\mathbf{q} \\cdot \\mathbf{k} = \\sum_{i=1}^{d_{\\text{head}}} q_i k_i \\]By the Central Limit Theorem, for large \\(d_{\\text{head}}\\), the dot product \\(\\mathbf{q} \\cdot \\mathbf{k}\\) approximately follows a normal distribution with mean 0 and variance \\(d_{\\text{head}}\\):\n\\[ \\mathbf{q} \\cdot \\mathbf{k} \\sim \\mathcal{N}(0, d_{\\text{head}}) \\]To achieve unit variance in the scaled dot product, we divide by \\(\\sqrt{d_{\\text{head}}}\\):\n\\[ \\frac{\\mathbf{q} \\cdot \\mathbf{k}}{\\sqrt{d_{\\text{head}}}} \\;\\sim\\; \\mathcal{N}\\!\\Bigl(0, \\frac{d_{\\text{head}}}{d_{\\text{head}}}\\Bigr) = \\mathcal{N}(0, 1) \\]Thus, the scaled dot product \\(\\tfrac{\\mathbf{q} \\cdot \\mathbf{k}}{\\sqrt{d_{\\text{head}}}}\\) maintains a variance of 1, independent of \\(d_{\\text{head}}\\). This scaling operation keeps the dot product within a stable range, preventing the softmax function from encountering numerical instability due to excessively large or small input values.\nMulti-Query Attention (MQA) Multi-Query Attention (MQA) (Shazeer, 2019) significantly reduces memory bandwidth requirements by allowing all query heads to share the same set of keys (\\(\\mathbf{K}\\)) and values (\\(\\mathbf{V}\\)). Specifically, if we average all \\(\\mathbf{K}_h\\) and \\(\\mathbf{V}_h\\) from traditional MHA as follows:\n\\[ \\mathbf{K}^* = \\frac{1}{H} \\sum_{h=1}^{H} \\mathbf{K}_h, \\quad \\mathbf{V}^* = \\frac{1}{H} \\sum_{h=1}^{H} \\mathbf{V}_h, \\]where \\(H\\) is the number of query heads, and \\(\\mathbf{K}_h\\) and \\(\\mathbf{V}_h\\) are the keys and values for the \\(h\\)-th head, respectively. During inference, each head only needs to use the same \\(\\mathbf{K}^*\\) and \\(\\mathbf{V}^*\\), significantly reducing memory bandwidth usage. Finally, all head outputs are concatenated and projected back to the output space:\n\\[ \\text{MQA}(\\mathbf{Q}, \\mathbf{K}^*, \\mathbf{V}^*) = \\text{Concat}(\\text{head}_1, \\dots, \\text{head}_H)\\, W_O \\]Since keys and values are consolidated into a single set, MQA inference is faster but may limit the model\u0026rsquo;s expressive capacity and performance in certain scenarios.\nGrouped-Query Attention (GQA) Grouped-Query Attention (GQA) (Ainslie, 2023) serves as a compromise between MHA and MQA. It divides query heads into multiple groups, allowing each group to share a set of \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\) heads, thereby balancing inference speed and model performance. Each group contains \\(\\frac{H}{G}\\) query heads and shares one set of \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\) heads. The specific process is as follows:\nProjection: Project the input \\(\\mathbf{X}\\) into \\(\\mathbf{Q}\\), \\(\\mathbf{K}\\), and \\(\\mathbf{V}\\) via linear transformations. Grouped Query: After splitting \\(\\mathbf{Q}\\) into \\(H\\) heads, further divide these heads into \\(G\\) groups. Grouped Key/Value: Split \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\) into \\(G\\) groups, with each group sharing a set of \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\). Within-Group Attention: Perform attention calculations for each group\u0026rsquo;s \\(\\mathbf{Q}\\) with the shared \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\). Concatenate Outputs: Concatenate the attention results from all groups along the channel dimension and project them through a linear layer to obtain the final output. Relationship Between the Three Attention Methods Fig. 3. Overview of grouped-query method. (Image source: Ainslie et al., 2023)\nFigure 3 intuitively illustrates the relationship between the three attention mechanisms: MHA maintains independent \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\) for each query head; MQA allows all query heads to share the same set of \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\); GQA strikes a balance by sharing \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\) within groups.\nWhen \\(G=1\\): All query heads share the same set of \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\). In this case, GQA degenerates into MQA.\nNumber of \\(\\mathbf{K}/\\mathbf{V}\\) Heads: 1 Model Behavior: All heads use the same \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\) for attention calculations, significantly reducing memory bandwidth requirements. When \\(G=H\\): Each query head has its own independent set of \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\). In this case, GQA degenerates into MHA.\nNumber of \\(\\mathbf{K}/\\mathbf{V}\\) Heads: \\(H\\) Model Behavior: Each head uses completely independent \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\), maintaining the high model capacity and performance of MHA. By adjusting the number of groups \\(G\\), GQA allows flexible switching between MHA and MQA, achieving a balance between maintaining high model performance and improving inference speed.\nImplementation Code Snippet Below is a simple PyTorch implementation of MHA 、MQA和 GQA. For GQA, two approaches are demonstrated: broadcasting and repeating.\nAdditionally, note that in the actual implementation of LLaMA3, GQA incorporates KV Cache for optimization. To keep the example concise, this part is omitted in the code below. For more comprehensive details, you can refer to the official source code in model.py.\nMHA Code Snippet multi_head_attention.py\nimport math import torch import torch.nn as nn class MultiHeadAttention(nn.Module): def __init__(self, hidden_dim, nums_head, dropout_rate=0.1): super().__init__() self.hidden_dim = hidden_dim self.nums_head = nums_head # (nums_head * head_dim = hidden_dim) assert hidden_dim % nums_head == 0 self.head_dim = hidden_dim // nums_head self.dropout = nn.Dropout(dropout_rate) # Define linear projection layers self.q_proj = nn.Linear(hidden_dim, hidden_dim) self.k_proj = nn.Linear(hidden_dim, hidden_dim) self.v_proj = nn.Linear(hidden_dim, hidden_dim) self.output_proj = nn.Linear(hidden_dim, hidden_dim) def forward(self, x, attention_mask=None): # x has shape: (batch_size, seq_len, hidden_dim) batch_size, seq_len, _ = x.size() # Q, K, V each has shape: (batch_size, seq_len, hidden_dim) Q = self.q_proj(x) K = self.k_proj(x) V = self.v_proj(x) # Reshaping from (batch_size, seq_len, hidden_dim) to (batch_size, seq_len, nums_head, head_dim) # Then transpose to (batch_size, nums_head, seq_len, head_dim) # q_state = Q.view(batch_size, seq_len, self.head_num, self.head_dim).permute(0, 2, 1, 3) # [Another approach to do it] q = Q.view(batch_size, seq_len, self.nums_head, self.head_dim).transpose(1, 2) k = K.view(batch_size, seq_len, self.nums_head, self.head_dim).transpose(1, 2) v = V.view(batch_size, seq_len, self.nums_head, self.head_dim).transpose(1, 2) # Matrix multiplication: (batch_size, nums_head, seq_len, head_dim) * (batch_size, nums_head, head_dim, seq_len) # Resulting shape: (batch_size, nums_head, seq_len, seq_len) # Note that the scaling factor uses head_dim, not hidden_dim. attention_val = torch.matmul(q, k.transpose(-1, -2)) / math.sqrt(self.head_dim) print(f\u0026#34;attention_val shape is {attention_val.size()}\u0026#34;) print(f\u0026#34;attention_mask shape is {attention_mask.size()}\u0026#34;) if attention_mask is not None: # If attention_mask is provided, it should have shape (batch_size, nums_head, seq_len, seq_len). assert attention_val.size() == attention_mask.size() attention_val = torch.masked_fill(attention_val, attention_mask == 0, float(\u0026#34;-inf\u0026#34;)) # Apply softmax along the last dimension to get attention weights. attention_weight = torch.softmax(attention_val, dim=-1) # Dropout on attention weights attention_weight = self.dropout(attention_weight) # Multiply attention weights with V: # (batch_size, nums_head, seq_len, seq_len) * (batch_size, nums_head, seq_len, head_dim) # -\u0026gt; (batch_size, nums_head, seq_len, head_dim) output_tmp = attention_weight @ v # Transpose back: (batch_size, nums_head, seq_len, head_dim) # -\u0026gt; (batch_size, seq_len, nums_head, head_dim) # -\u0026gt; (batch_size, seq_len, hidden_dim) # # Note: The transpose operation changes the dimension ordering but does not change the memory layout, # resulting in a non-contiguous tensor. The contiguous() method makes the tensor contiguous in memory, # allowing subsequent view or reshape operations without error. output_tmp = output_tmp.transpose(1, 2).contiguous().view(batch_size, seq_len, self.hidden_dim) # output = output_mid.permute(0, 2, 1, 3).reshpae(batch_size, seq_len, self.hidden_dim) # # [Another approach to do it] output = self.output_proj(output_tmp) return output if __name__ == \u0026#34;__main__\u0026#34;: x = torch.randn(2, 3, 4) batch_size, seq_len, hidden_dim = x.size() nums_head = 2 # attention_mask has shape: (batch_size, nums_head, seq_len, seq_len). # Here we use a lower-triangular mask to simulate causal masking. attention_mask = torch.tril(torch.ones(batch_size, nums_head, seq_len, seq_len)) print(attention_mask) multi_head_attention = MultiHeadAttention(hidden_dim=hidden_dim, nums_head=nums_head) x_forward = multi_head_attention.forward(x, attention_mask=attention_mask) print(x_forward) print(x_forward.size()) MQA Code Snippet multi_query_attention.py\nimport torch import torch.nn as nn import math class MultiQueryAttention(nn.Module): def __init__(self, hidden_dim, nums_head, dropout=0.1): super().__init__() self.hidden_dim = hidden_dim self.nums_head = nums_head assert hidden_dim % nums_head == 0 self.head_dim = hidden_dim // nums_head self.dropout = nn.Dropout(p=dropout) self.q_proj = nn.Linear(hidden_dim, hidden_dim) # For kv, project: hidden_dim -\u0026gt; head_dim self.k_proj = nn.Linear(hidden_dim, self.head_dim * 1) self.v_proj = nn.Linear(hidden_dim, self.head_dim * 1) self.output_proj = nn.Linear(hidden_dim, hidden_dim) def forward(self, x, attention_mask=None): batch_size, seq_len, _ = x.size() Q, K, V = self.q_proj(x), self.k_proj(x), self.v_proj(x) q = Q.view(batch_size, seq_len, self.nums_head, self.head_dim).transpose(1, 2) # Broadcast k and v to match q\u0026#39;s dimensions for attention computation # k -\u0026gt; (batch_size, 1, seq_len, head_dim) # v -\u0026gt; (batch_size, 1, seq_len, head_dim) k = K.unsqueeze(1) v = V.unsqueeze(1) # (batch_size, head_num, seq_len, head_dim) * (batch_size, 1, head_dim, seq_len) # -\u0026gt; (batch_size, head_num, seq_len, seq_len) attention_val = (q @ k.transpose(-1, -2)) / math.sqrt(self.head_dim) print(f\u0026#34;attention_val shape is {attention_val.size()}\u0026#34;) if attention_mask is not None: attention_val = torch.masked_fill(attention_val, attention_mask == 0, float(\u0026#34;-inf\u0026#34;)) attention_weight = torch.softmax(attention_val, dim=-1) print(f\u0026#34;attention_weight is {attention_weight}\u0026#34;) attention_weight = self.dropout(attention_weight) # (batch_size, head_num, seq_len, seq_len) * (batch_size, 1, seq_len, head_dim) # -\u0026gt; (batch_size, head_num, seq_len, head_dim) output_tmp = attention_weight @ v # -\u0026gt; (batch_size, seq_len, head_num, head_dim) # -\u0026gt; (batch_size, seq_len, hidden_dim) output_tmp = output_tmp.transpose(1, 2).contiguous().view(batch_size, seq_len, self.hidden_dim) output = self.output_proj(output_tmp) return output if __name__ == \u0026#34;__main__\u0026#34;: x = torch.randn(2, 3, 4) batch_size, seq_len, hidden_dim = x.size() nums_head = 2 attention_mask = torch.tril(torch.ones(batch_size, nums_head, seq_len, seq_len)) print(attention_mask) multi_query_attention = MultiQueryAttention(hidden_dim=hidden_dim, nums_head=nums_head, dropout=0.2) x_forward = multi_query_attention.forward(x, attention_mask=attention_mask) print(x_forward) print(x_forward.size()) GQA Code Snippet group_query_attention.py\nimport math import torch import torch.nn as nn class GQABroadcast(nn.Module): \u0026#34;\u0026#34;\u0026#34; Group Query Attention (GQA) implementation: By configuring `nums_kv_head` (G, the number of groups), this module supports: - When nums_kv_head == nums_head: Multi-Head Attention (MHA) - When nums_kv_head == 1: Multi-Query Attention (MQA) - When 1 \u0026lt; nums_kv_head \u0026lt; nums_head: Generic Grouped Query Attention (GQA) \u0026#34;\u0026#34;\u0026#34; def __init__(self, hidden_dim, nums_head, nums_kv_head, dropout_rate=0.1): super().__init__() self.hidden_dim = hidden_dim self.nums_head = nums_head # Total number of Q heads (H) self.nums_kv_head = nums_kv_head # Number of K, V heads (G, groups) assert hidden_dim % nums_head == 0 assert nums_head % nums_kv_head == 0 self.head_dim = hidden_dim // nums_head # Number of Q heads per group self.q_heads_per_group = nums_head // nums_kv_head self.dropout = nn.Dropout(dropout_rate) self.q_proj = nn.Linear(hidden_dim, hidden_dim) # Projection output dimensions for K, V = nums_kv_head * head_dim self.k_proj = nn.Linear(hidden_dim, nums_kv_head * self.head_dim) self.v_proj = nn.Linear(hidden_dim, nums_kv_head * self.head_dim) self.output_proj = nn.Linear(hidden_dim, hidden_dim) def forward(self, x, attention_mask= None): batch_size, seq_len, _ = x.size() Q = self.q_proj(x) # (batch_size, seq_len, hidden_dim) K = self.k_proj(x) # (batch_size, seq_len, nums_kv_head * head_dim) V = self.v_proj(x) # (batch_size, seq_len, nums_kv_head * head_dim) # Q: (batch_size, seq_len, hidden_dim) # -\u0026gt; (batch_size, seq_len, nums_head, head_dim) # -\u0026gt; (batch_size, nums_head, seq_len, head_dim) # -\u0026gt; (batch_size, nums_kv_head, q_heads_per_group, seq_len, head_dim) q = Q.view(batch_size, seq_len, self.nums_head, self.head_dim).transpose(1, 2).contiguous() q = q.view(batch_size, self.nums_kv_head, self.q_heads_per_group, seq_len, self.head_dim) # K, V: (batch_size, seq_len, nums_kv_head * head_dim) # -\u0026gt; (batch_size, seq_len, nums_kv_head, head_dim) # -\u0026gt; (batch_size, nums_kv_head, seq_len, head_dim # -\u0026gt; (batch_size, nums_kv_head, 1, seq_len, head_dim) k = K.view(batch_size, seq_len, self.nums_kv_head, self.head_dim).transpose(1, 2).unsqueeze(2) v = V.view(batch_size, seq_len, self.nums_kv_head, self.head_dim).transpose(1, 2).unsqueeze(2) # q: (batch_size, nums_kv_head, q_heads_per_group, seq_len, head_dim) * (batch_size, nums_kv_head, 1, head_dim, seq_len) # -\u0026gt; (batch_size, nums_kv_head, q_heads_per_group, seq_len, seq_len) attention_val = q @ k.transpose(-1, -2) / math.sqrt(self.head_dim) # mask if attention_mask is not None: attention_val = torch.masked_fill(attention_val, attention_mask == 0, float(\u0026#34;-inf\u0026#34;)) # softmax attention_weight = torch.softmax(attention_val, dim=-1) # dropout attention_weight = self.dropout(attention_weight) # (batch_size, nums_kv_head, q_heads_per_group, seq_len, seq_len) * (batch_size, nums_kv_head, 1, seq_len, head_dim) # -\u0026gt; (batch_size, nums_kv_head, q_heads_per_group, seq_len, head_dim) output_tmp = attention_weight @ v # (batch_size, nums_kv_head, q_heads_per_group, seq_len, head_dim) # -\u0026gt; (batch_size, nums_head, seq_len, head_dim) output_tmp = output_tmp.view(batch_size, self.nums_head, seq_len, self.head_dim) # (batch_size, nums_head, seq_len, head_dim) # -\u0026gt; (batch_size, seq_len, nums_head, head_dim) -\u0026gt; (batch_size, seq_len, hidden_dim) output_concat = output_tmp.transpose(1, 2).contiguous().view(batch_size, seq_len, self.hidden_dim) output = self.output_proj(output_concat) return output class GQARepeat(nn.Module): \u0026#34;\u0026#34;\u0026#34; Group Query Attention (GQA) implementation: By configuring `nums_kv_head` (G, the number of groups), this module supports: - When nums_kv_head == nums_head: Multi-Head Attention (MHA) - When nums_kv_head == 1: Multi-Query Attention (MQA) - When 1 \u0026lt; nums_kv_head \u0026lt; nums_head: Generic Grouped Query Attention (GQA) \u0026#34;\u0026#34;\u0026#34; def __init__(self, hidden_dim, nums_head, nums_kv_head, dropout_rate=0.1): super().__init__() self.hidden_dim = hidden_dim self.nums_head = nums_head self.nums_kv_head = nums_kv_head assert hidden_dim % nums_head == 0 assert nums_head % nums_kv_head == 0 self.head_dim = hidden_dim // nums_head self.q_head_per_group = nums_head // nums_kv_head self.q_proj = nn.Linear(hidden_dim, nums_head * self.head_dim) self.k_proj = nn.Linear(hidden_dim, nums_kv_head * self.head_dim) self.v_proj = nn.Linear(hidden_dim, nums_kv_head * self.head_dim) self.output_proj = nn.Linear(hidden_dim, hidden_dim) self.dropout = nn.Dropout(dropout_rate) def forward(self, x, attention_mask=None): batch_size, seq_len, _ = x.size() # (batch_size, seq_len, hidden_dim) Q = self.q_proj(x) # (batch_size, seq_len, nums_kv_head * self.head_dim) K = self.k_proj(x) V = self.v_proj(x) # -\u0026gt; (batch_size, seq_len, nums_head, head_dim) # -\u0026gt; (batch_size, nums_head, seq_len, head_dim) q = Q.view(batch_size, seq_len, self.nums_head, self.head_dim).transpose(1, 2) # -\u0026gt; (batch_size, seq_len, nums_kv_head, head_dim) # -\u0026gt; (batch_size, nums_kv_head, seq_len, head_dim) k = K.view(batch_size, seq_len, self.nums_kv_head, self.head_dim).transpose(1, 2) v = V.view(batch_size, seq_len, self.nums_kv_head, self.head_dim).transpose(1, 2) # (batch_size, nums_head, seq_len, head_dim) k_repeat = k.repeat_interleave(self.q_head_per_group, dim=1) v_repeat = v.repeat_interleave(self.q_head_per_group, dim=1) # (batch_size, nums_head, seq_len, seq_len) attention_val = q @ k_repeat.transpose(-1, -2) / math.sqrt(self.head_dim) # mask if attention_mask is not None: attention_val = torch.masked_fill(attention_val, attention_mask == 0, float(\u0026#39;-inf\u0026#39;)) # softmax attention_weight = torch.softmax(attention_val, dim=-1) # dropout attention_weight = self.dropout(attention_weight) # (batch_size, nums_head, seq_len, head_dim) output_tmp = attention_weight @ v_repeat # (batch_size, seq_len, hidden_dim) output_concat = output_tmp.transpose(1, 2).contiguous().view(batch_size, seq_len, self.hidden_dim) output = self.output_proj(output_concat) return output if __name__ == \u0026#34;__main__\u0026#34;: x = torch.randn(2, 3, 16) batch_size, seq_len, hidden_dim = x.size() nums_head = 8 head_dim = hidden_dim // nums_head nums_kv_head = 4 q_heads_per_group = nums_head // nums_kv_head # v1: Boardcast # attention_mask_v1 has shape: (batch_size, nums_kv_head, q_heads_per_group, seq_len, seq_len) attention_mask_v1 = torch.tril(torch.ones(batch_size, nums_kv_head, q_heads_per_group, seq_len, seq_len)) gqa_boradcast = GQABroadcast(hidden_dim=hidden_dim, nums_head=nums_head, nums_kv_head=nums_kv_head, dropout_rate=0.1) x_forward_v1 = gqa_boradcast.forward(x, attention_mask=attention_mask_v1) # print(x_forward_v1) print(x_forward_v1.size()) # v2: Repeat # attention_mask_v2 has shape: (batch_size, nums_head, seq_len, seq_len) attention_mask_v2 = torch.tril(torch.ones(batch_size, nums_head, seq_len, seq_len)) gqa_repeat = GQARepeat(hidden_dim=hidden_dim, nums_head=nums_head, nums_kv_head=nums_kv_head, dropout_rate=0.1) x_forward_v2 = gqa_repeat.forward(x, attention_mask=attention_mask_v2) # print(x_forward_v2) print(x_forward_v2.size()) Time and Space Complexity Analysis Note: The following discussion focuses on the computational complexity of a single forward pass. In training, one must also account for backward pass and parameter updates, which rely on the intermediate activations stored during the forward pass. The additional computation to calculate gradients and maintain partial derivatives usually makes the total training cost (both computation and memory usage) significantly higher—often multiple times the forward-pass cost.\nWhen analyzing different attention mechanisms (MHA, MQA, GQA), our main focus is on their time complexity and space complexity during the forward pass of either self-attention or cross-attention. Even though their implementation details (e.g., whether \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\) are shared) can differ, the overall computational cost and memory usage are roughly on the same order of magnitude.\nAssume that each position in the sequence produces its own representations of query \\(\\mathbf{Q}\\), key \\(\\mathbf{K}\\), and value \\(\\mathbf{V}\\). After splitting by batch size and number of heads, their shapes can be written as:\n\\[ \\mathbf{Q}, \\mathbf{K}, \\mathbf{V} \\;\\in\\; \\mathbb{R}^{B \\times H \\times S \\times d_{\\text{head}}} \\]Time Complexity Analysis General Time Complexity of Matrix Multiplication For two matrices \\(\\mathbf{A}\\) of shape \\(m \\times n\\) and \\(\\mathbf{B}\\) of shape \\(n \\times p\\), the complexity of computing the product \\(\\mathbf{A}\\mathbf{B}\\) is typically expressed as:\n\\[ \\mathcal{O}(m \\times n \\times p) \\]In attention-related computations, this formula is frequently used to analyze \\(\\mathbf{Q}\\mathbf{K}^\\top\\) and the multiplication of attention scores by \\(\\mathbf{V}\\).\nMain Steps and Complexity in Self-Attention Dot Product (\\(\\mathbf{Q}\\mathbf{K}^\\top\\))\nShape of \\(\\mathbf{Q}\\): \\(B \\times H \\times S \\times d_{\\text{head}}\\)\nShape of \\(\\mathbf{K}\\): \\(B \\times H \\times S \\times d_{\\text{head}}\\)\nConsequently, the result of \\(\\mathbf{Q}\\mathbf{K}^\\top\\) has shape \\(B \\times H \\times S \\times S\\)\nThe calculation can be viewed as \\(S \\times S\\) dot products for each head in each batch. Each dot product involves \\(d_{\\text{head}}\\) multiply-add operations.\nHence, its time complexity is:\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S \\times S \\times d_{\\text{head}}\\bigr) \\;=\\; \\mathcal{O}\\bigl(B \\times H \\times S^2 \\times d_{\\text{head}}\\bigr) \\] Softmax Operation\nApplied element-wise to the attention score matrix of shape \\(B \\times H \\times S \\times S\\)\nSoftmax entails computing exponentials and performing normalization on each element. The complexity is approximately:\n\\[ \\mathcal{O}(\\text{number of elements}) = \\mathcal{O}\\bigl(B \\times H \\times S^2\\bigr) \\] Compared with the matrix multiplication above, this step’s dependency on \\(d_{\\text{head}}\\) is negligible and is thus often considered a smaller overhead.\nWeighted Averaging (Multiplying Attention Scores with \\(\\mathbf{V}\\))\nShape of \\(\\mathbf{V}\\): \\(B \\times H \\times S \\times d_{\\text{head}}\\)\nShape of the attention score matrix: \\(B \\times H \\times S \\times S\\)\nMultiplying each position’s attention scores by the corresponding \\(\\mathbf{V}\\) vector yields an output of shape \\(B \\times H \\times S \\times d_{\\text{head}}\\)\nIts time complexity is analogous to that of \\(\\mathbf{Q}\\mathbf{K}^\\top\\):\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S^2 \\times d_{\\text{head}}\\bigr) \\] Combining these three steps, the dominant costs come from the two matrix multiplications, each of complexity \\(\\mathcal{O}(B \\times H \\times S^2 \\times d_{\\text{head}})\\). Therefore, for a single full forward pass, the total complexity can be denoted as:\n\\[ \\mathcal{O}(B \\times H \\times S^2 \\times d_{\\text{head}}) = \\mathcal{O}(B \\times S^2 \\times d) \\]Here, we use \\(d_{\\text{head}} = \\frac{d}{H}\\).\nTime Complexity in Incremental Decoding/Inference with KV Cache Fig. 4. KV cache example. (Image source: Efficient NLP YouTube Channel)\nAs depicted in Figure 4, incremental decoding (especially in autoregressive generation) often employs a KV Cache to store previously computed \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\). Thus, one does not have to recalculate keys and values at each new time step. With every new token generated (i.e., a new time step), the following operations are performed:\nCompute \\(\\mathbf{Q}\\) for the New Token (and corresponding \\(\\mathbf{K}, \\mathbf{V}\\))\nIf only the projection weights are retained, then generating the new \\(\\mathbf{Q}\\) vector and the local \\(\\mathbf{K}, \\mathbf{V}\\) involves \\(\\mathcal{O}(d^2)\\) parameters, but this overhead is small as it is only for a single token. Perform Attention with the Existing KV Cache\nThe KV Cache stores all previous \\(\\mathbf{K}, \\mathbf{V}\\) vectors, with shape:\n\\[ B \\times H \\times S_{\\text{past}} \\times d_{\\text{head}} \\]Here, \\(S_{\\text{past}}\\) is the length of the already-generated sequence.\nThe new \\(\\mathbf{Q}\\) has shape \\(B \\times H \\times 1 \\times d_{\\text{head}}\\). Hence, computing the attention scores for the new token:\n\\[ \\mathbf{Q}\\mathbf{K}^\\top : \\; \\mathcal{O}\\bigl(B \\times H \\times 1 \\times S_{\\text{past}} \\times d_{\\text{head}}\\bigr) = \\mathcal{O}\\bigl(B \\times H \\times S_{\\text{past}} \\times d_{\\text{head}}\\bigr) \\] Similarly, multiplying these scores by \\(\\mathbf{V}\\) has the same order:\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S_{\\text{past}} \\times d_{\\text{head}}\\bigr) \\] Update the KV Cache\nAppend the newly generated \\(\\mathbf{K}, \\mathbf{V}\\) to the cache, so they can be used at the subsequent time step. This merely requires a concatenation or append operation, which primarily grows the memory usage rather than incurring high compute. Thus, for incremental decoding, each new token involves:\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S_{\\text{past}} \\times d_{\\text{head}}\\bigr) \\] in computation, instead of the \\(S \\times S\\) scale for each forward pass. If one aims to generate \\(S\\) tokens in total, the cumulative complexity (under ideal conditions) becomes:\n\\[ \\sum_{k=1}^{S} \\mathcal{O}\\bigl(B \\times H \\times k \\times d_{\\text{head}}\\bigr) = \\mathcal{O}\\bigl(B \\times H \\times S^2 \\times d_{\\text{head}}\\bigr) \\] which is the same order as the one-shot computation. The difference is that incremental decoding computes one token at a time, thus requiring lower temporary memory usage per step and avoiding a full \\(S \\times S\\) attention score matrix at once.\nSummary of Time Complexity MHA (Multi-Head Attention): Multiple heads, each computing its own \\(\\mathbf{K}, \\mathbf{V}\\). MQA (Multi-Query Attention): Multiple heads share \\(\\mathbf{K}, \\mathbf{V}\\). GQA (Grouped Query Attention): The \\(H\\) heads are divided into \\(G\\) groups, each group sharing a single \\(\\mathbf{K}, \\mathbf{V}\\). Regardless of whether we use MHA, MQA, or GQA, in a full forward pass (or the forward portion during training), the main matrix multiplications have roughly the same complexity:\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S^2 \\times d_{\\text{head}}\\bigr) = \\mathcal{O}\\bigl(B \\times S^2 \\times d\\bigr) \\]On the other hand, in incremental inference with KV Cache, the per-token complexity decreases to\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S_{\\text{past}} \\times d_{\\text{head}}\\bigr) \\] but one must maintain and update the KV Cache over multiple decoding steps.\nSpace Complexity Analysis Space complexity encompasses both model parameters (weights) and intermediate activations needed during the forward pass—particularly the attention score matrices, weighted outputs, and potential KV Cache.\nModel Parameter Scale Parameters for the Linear Projection Layers\nProjecting the input vector of dimension \\(d\\) into \\(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}\\):\n\\[ \\underbrace{d \\times d}_{\\text{Q projection}} + \\underbrace{d \\times d}_{\\text{K projection}} + \\underbrace{d \\times d}_{\\text{V projection}} = 3d^2 \\] These parameters may be split among heads, but the total remains \\(\\mathcal{O}(d^2)\\), independent of the number of heads \\(H\\).\nOutput Merging Layer\nAfter concatenating multiple heads, there is typically another \\(d \\times d\\) linear layer to project the concatenated outputs back into dimension \\(d\\). This is also \\(\\mathcal{O}(d^2)\\).\nTherefore, combining these yields:\n\\[ 3d^2 + d^2 = 4d^2 \\] which remains \\(\\mathcal{O}(d^2)\\).\nIntermediate Activations for the Forward Pass During training or a full forward pass, the following key tensors often need to be stored:\nAttention Score Matrix\nShape: \\(B \\times H \\times S \\times S\\). Regardless of MHA, MQA, or GQA, each head (or group) computes \\(\\mathbf{Q}\\mathbf{K}^\\top\\) for the attention scores, yielding:\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S^2\\bigr) \\] Weighted Output\nShape: \\(B \\times H \\times S \\times d_{\\text{head}}\\), corresponding to the contextual vectors after weighting \\(\\mathbf{V}\\). Its size is:\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S \\times d_{\\text{head}}\\bigr) = \\mathcal{O}\\bigl(B \\times S \\times d\\bigr) \\] Storage of \\(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}\\) for Backprop\nIn backward propagation, we need the forward outputs (or intermediate gradients). If explicitly stored, their shapes and scales are usually:\nMHA (Multi-Head Attention) \\(\\mathbf{Q}\\): \\(B \\times H \\times S \\times d_{\\text{head}}\\) \\(\\mathbf{K}, \\mathbf{V}\\): \\(B \\times H \\times S \\times d_{\\text{head}}\\) MQA (Multi-Query Attention) \\(\\mathbf{Q}\\): \\(B \\times H \\times S \\times d_{\\text{head}}\\) \\(\\mathbf{K}, \\mathbf{V}\\) (shared): \\(B \\times S \\times d\\) GQA (Grouped Query Attention) \\(\\mathbf{Q}\\): \\(B \\times H \\times S \\times d_{\\text{head}}\\) \\(\\mathbf{K}, \\mathbf{V}\\) (shared by group): \\(B \\times G \\times S \\times d_{\\text{head}}\\), where \\(G \\times d_{\\text{head}} = d\\). Space Usage in Incremental Decoding (KV Cache) In inference with incremental decoding, a KV Cache is typically used to store all previously computed keys and values, thus avoiding repeated computation for past tokens. The structure is generally as follows:\nKV Cache Dimensions (MHA example):\n\\[ \\mathbf{K}, \\mathbf{V} : B \\times H \\times S_{\\text{past}} \\times d_{\\text{head}} \\] As the generated sequence length \\(S_{\\text{past}}\\) grows, the cache usage increases linearly.\nPer-Step Attention Score Matrix:\nEach new token only requires a score matrix of shape:\n\\[ B \\times H \\times 1 \\times S_{\\text{past}} \\]which is much smaller than the \\(B \\times H \\times S \\times S\\) matrix used during training.\nTherefore, in incremental decoding, large temporary activations—such as the \\(S \\times S\\) score matrix—are not needed; however, the KV Cache itself (size \\(\\mathcal{O}(B \\times H \\times S_{\\text{past}} \\times d_{\\text{head}})\\)) must be maintained and grows along with the sequence length.\nCombined Space Complexity Training / Full Forward\nThe main activations (attention scores + weighted outputs + explicit storage of Q,K,V) add up to:\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S^2 + B \\times S \\times d\\bigr) \\]For large \\(S\\), the \\(\\mathcal{O}(B \\times H \\times S^2)\\) term tends to dominate.\nInference / Incremental Decoding (KV Cache)\nThere is no need for the full \\(S^2\\) attention matrix, but a KV Cache of size\n\\[ \\mathcal{O}(B \\times H \\times S_{\\text{past}} \\times d_{\\text{head}}) \\] must be stored. This grows linearly with the decoding steps \\(S_{\\text{past}}\\).\nMeanwhile, the per-step attention matrix is only \\(B \\times H \\times 1 \\times S_{\\text{past}}\\), significantly smaller than the \\(\\mathcal{O}(S^2)\\) scenario in training.\nConclusions and Comparisons Time Complexity\nFor self-attention—whether using MHA, MQA, or GQA—in a full forward pass (which also applies to the forward portion during training), the principal matrix multiplications remain:\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S^2 \\times d_{\\text{head}}\\bigr) = \\mathcal{O}\\bigl(B \\times S^2 \\times d\\bigr) \\] In incremental inference (KV Cache), each new token only requires\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S_{\\text{past}} \\times d_{\\text{head}}\\bigr) \\]but the KV Cache must be updated and maintained throughout the decoding sequence.\nSpace Complexity\nModel Parameters: All three attention mechanisms (MHA, MQA, GQA) reside in \\(\\mathcal{O}(d^2)\\) parameter space.\nIntermediate Activations (Training / Full Forward): Dominated by the attention score matrix and weighted outputs:\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S^2 + B \\times S \\times d\\bigr) \\] Incremental Decoding (KV Cache): Saves on the \\(\\mathcal{O}(S^2)\\) score matrix cost but requires\n\\[ \\mathcal{O}\\bigl(B \\times H \\times S_{\\text{past}} \\times d_{\\text{head}}\\bigr) \\] of storage for the KV Cache, which increases linearly with \\(S_{\\text{past}}\\).\nBenefits of MQA / GQA\nAlthough from a high-level perspective, MHA, MQA, and GQA share similar asymptotic complexities when \\(S\\) is large, MQA and GQA can achieve improved efficiency in practice due to key/value sharing (or partial sharing) which can reduce memory bandwidth demands and improve cache locality. Consequently, in real-world systems, they often deliver better speed and memory performance. The table below summarizes the main differences among MHA, MQA, and GQA attention mechanisms:\nFeature MHA MQA GQA Number of K/V Heads Same as number of heads (\\(H\\)) Single K/V head Number of groups (\\(G\\)), one K/V head per group Inference Time Slower Fastest Faster, but slightly slower than MQA Memory Bandwidth Requirement Highest, \\(H\\) times K/V loading Lowest, only one K/V head Between MHA and MQA, \\(G\\) times K/V loading Model Capacity Highest Lowest Moderate, depending on the number of groups \\(G\\) Performance Best Slightly lower than MHA Close to MHA, significantly better than MQA Uptraining Requirement None High, requires more stability and tuning Lower, GQA models stabilize after minimal uptraining Applicable Scenarios Applications with high performance requirements but insensitive to inference speed Scenarios requiring extremely fast inference with lower model performance demands Applications needing a balance between inference speed and model performance In summary, from a theoretical standpoint, all three attention mechanisms (MHA, MQA, GQA) share \\(\\mathcal{O}(B \\times S^2 \\times d)\\) complexity in a full pass and \\(\\mathcal{O}(B \\times S_{\\text{past}} \\times d)\\) per-step complexity in incremental decoding.\nExperimental Results Performance Testing This experiment was conducted on an environment equipped with dual NVIDIA RTX 4090 GPUs using data parallelism (DP), evenly splitting the batch size across both GPUs. The experiment only tested the performance of the forward pass, including average latency time (Time_mean, unit: ms) and peak memory usage (Peak_Mem_mean, unit: MB), to evaluate the resource requirements and efficiency of different attention mechanisms (MHA, MQA, and GQA) during the inference phase. You can get the source code in benchmark_attention.py.\nThe tests were based on Llama3 8B hyperparameters. Fig. 5. Overview of the key hyperparameters of Llama 3. (Image source: Grattafiori et al., 2024)\nThe main configuration parameters are as follows:\nTotal Layers: 32 layers. Hidden Layer Dimension: 4096. Total Number of Multi-Head Attention Heads: 32. Different Group Configurations (nums_kv_head): 32 (MHA), 1 (MQA), 8 (GQA-8). Experimental Results This section primarily introduces the experimental performance of MHA, MQA, and GQA-8 under different sequence lengths (512, 1024, and 1536), including data on latency and memory usage. For ease of comparison, the table below presents the specific test results for the three attention mechanisms.\nModel Size Method nums_kv_head Seq Length Time_mean (ms) Peak_Mem_mean (MB) Llama3 8B GQA-8 8 512 40.8777 2322.328 Llama3 8B MHA 32 512 53.0167 2706.375 Llama3 8B MQA 1 512 37.3592 2210.314 Llama3 8B GQA-8 8 1024 85.5850 6738.328 Llama3 8B MQA 1 1024 80.8002 6570.314 Llama3 8B MHA 32 1024 102.0514 7314.375 Llama3 8B GQA-8 8 1536 147.5949 13586.328 Llama3 8B MHA 32 1536 168.8142 14354.375 Llama3 8B MQA 1 1536 141.5059 13362.314 Fig. 6. Average Time Benchmark.\nFig. 7. Average Peak Memory Benchmark.\nIn scenarios sensitive to memory and time overheads, MQA and GQA-8 are more efficient choices, with MQA performing the best but potentially lacking in model performance capabilities; GQA-8 achieves a good balance between efficiency and performance.\nGQA Paper Experimental Results Inference Performance Fig. 8. Inference time and performance comparison. (Image source: Ainslie et al., 2023)\nFig. 9. Additional Experimental Results. (Image source: Ainslie et al., 2023)\nThe experimental results show that:\nInference Speed:\nMHA-XXL\u0026rsquo;s inference time is significantly higher than MHA-Large, primarily due to its larger number of heads and model size. Compared to MHA-XXL, MQA-XXL and GQA-8-XXL reduce inference time to approximately 1/6 and 1/5, respectively. Performance:\nMHA-XXL performs best across all tasks but has longer inference times. MQA-XXL has an advantage in inference speed, with average scores only slightly lower than MHA-XXL. GQA-8-XXL has inference speed close to MQA-XXL but nearly matches MHA-XXL in performance, demonstrating the efficiency and superiority of GQA. Checkpoint Conversion Fig. 10. Ablation Study on Checkpoint Conversion Methods. (Image source: Ainslie et al., 2023)\nFigure 10 compares the performance of different methods for checkpoint conversion. The mean pooling method performs best in retaining model information, followed by selecting the first head, while random initialization performs the worst. Mean pooling effectively integrates information from multiple \\(\\mathbf{K}\\) and \\(\\mathbf{V}\\) heads, maintaining model performance.\nUptraining Ratio Fig. 11. Ablation Study on Uptraining Ratios. (Image source: Ainslie et al., 2023)\nFigure 11 shows how performance varies with uptraining proportion for T5 XXL with MQA and GQA.\nGQA: Even with only conversion (no uptraining), GQA already has certain performance. As the uptraining ratio increases, performance continues to improve. MQA: Requires at least a 5% uptraining ratio to achieve practical performance, and as the ratio increases, performance gains tend to plateau. Effect of Number of GQA Groups on Inference Speed Fig. 12. Effect of the Number of GQA Groups on Inference Speed. (Image source: Ainslie et al., 2023)\nFigure 12 demonstrates that as the number of groups increases, inference time slightly rises, but it still maintains a significant speed advantage over MHA. Choosing an appropriate number of groups, such as 8, can achieve a good balance between speed and performance. Figure 3 also shows that models ranging from 7B to 405B parameters in Llama3 adopt 8 as the number of groups (key/value heads = 8).\nOther Optimization Methods In addition to optimizing the attention mechanism, researchers have proposed various methods to enhance the inference and training efficiency of Transformer models:\nLoRA (Hu et al., 2021): Achieves efficient parameter fine-tuning by adding low-rank matrices to the pretrained model\u0026rsquo;s weight matrices. Flash Attention (Dao et al., 2022): Reduces memory and computational overhead by optimizing attention calculations. Quantization Techniques: LLM.int8 (Dettmers et al., 2022) and GPTQ (Frantar et al., 2022) reduce memory usage and computational costs by lowering the precision of model weights and activations. Model Distillation (Hinton et al., 2015): Reduces model size by training smaller models to mimic the behavior of larger models. Speculative Sampling (Chen et al., 2023): Enhances generation efficiency through parallel generation and filtering. Key Takeaways Uptraining methods can effectively utilize existing MHA model checkpoints. By performing a small amount of additional training, they can transform these into more efficient MQA or GQA models, significantly reducing training costs. Grouped-Query Attention (GQA) strikes a good balance between inference efficiency and model performance, making it especially suitable for applications requiring both high-efficiency inference and high performance. Experimental results demonstrate that GQA can significantly improve inference speed while maintaining performance comparable to MHA models, making it suitable for large-scale model deployment and real-time applications. References [1] Vaswani A. Attention is all you need [J]. Advances in Neural Information Processing Systems, 2017.\n[2] Devlin J. BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding [J]. arXiv preprint arXiv:1810.04805, 2018.\n[3] Radford A. Improving Language Understanding by Generative Pre-Training [J]. 2018.\n[4] Touvron H, Lavril T, Izacard G, et al. LLaMA: Open and Efficient Foundation Language Models [J]. arXiv preprint arXiv:2302.13971, 2023.\n[5] Achiam J, Adler S, Agarwal S, et al. GPT-4 Technical Report [J]. arXiv preprint arXiv:2303.08774, 2023.\n[6] Shazeer N. Fast Transformer Decoding: One Write-Head is All You Need [J]. arXiv preprint arXiv:1911.02150, 2019.\n[7] Ainslie J, Lee-Thorp J, de Jong M, et al. GQA: Training Generalized Multi-Query Transformer Models from Multi-Head Checkpoints [J]. arXiv preprint arXiv:2305.13245, 2023.\n[8] Hu E J, Shen Y, Wallis P, et al. LoRA: Low-Rank Adaptation of Large Language Models [J]. arXiv preprint arXiv:2106.09685, 2021.\n[9] Dettmers T, Lewis M, Belkada Y, et al. GPT3.int8(): 8-bit Matrix Multiplication for Transformers at Scale [J]. Advances in Neural Information Processing Systems, 2022, 35: 30318-30332.\n[10] Frantar E, Ashkboos S, Hoefler T, et al. GPTQ: Accurate Post-Training Quantization for Generative Pre-Trained Transformers [J]. arXiv preprint arXiv:2210.17323, 2022.\n[11] Hinton G. Distilling the Knowledge in a Neural Network [J]. arXiv preprint arXiv:1503.02531, 2015.\n[12] Chen C, Borgeaud S, Irving G, et al. Accelerating Large Language Model Decoding with Speculative Sampling [J]. arXiv preprint arXiv:2302.01318, 2023.\nCitation Citation: To reproduce or cite the content of this article, please acknowledge the original author and source.\nCited as:\nYue Shui. (Jan 2025). Attention Mechanisms in Transformers: Comparing MHA, MQA, and GQA.\nhttps://syhya.github.io/posts/2025-01-16-group-query-attention/\nOr\n@article{syhya2025gqa, title = \u0026#34;Attention Mechanisms in Transformers: Comparing MHA, MQA, and GQA\u0026#34;, author = \u0026#34;Yue Shui\u0026#34;, journal = \u0026#34;syhya.github.io\u0026#34;, year = \u0026#34;2025\u0026#34;, month = \u0026#34;Jan\u0026#34;, url = \u0026#34;https://syhya.github.io/posts/2025-01-16-group-query-attention/\u0026#34; } ","permalink":"https://syhya.github.io/posts/2025-01-16-group-query-attention/","summary":"\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eThe Transformer (\u003ca href=\"https://arxiv.org/abs/1706.03762\"\u003eVaswani et al., 2017\u003c/a\u003e) is a model based on the encoder-decoder architecture. This model has demonstrated outstanding performance in the field of natural language processing (NLP), leading to a series of optimized models based on it, such as BERT (\u003ca href=\"https://arxiv.org/abs/1810.04805\"\u003eDevlin et al., 2018\u003c/a\u003e) which uses only the encoder, GPT (\u003ca href=\"https://cdn.openai.com/research-covers/language-unsupervised/language_understanding_paper.pdf\"\u003eRadford et al., 2018\u003c/a\u003e) series which uses only the decoder, and subsequent large language models (LLMs) like LLaMA (\u003ca href=\"https://arxiv.org/abs/2302.13971\"\u003eTouvron et al., 2023\u003c/a\u003e) and GPT-4 (\u003ca href=\"https://arxiv.org/abs/2303.08774\"\u003eOpenAI et al., 2024\u003c/a\u003e), most of which adopt a decoder-only architecture.\u003c/p\u003e","title":"Attention Mechanisms in Transformers: Comparing MHA, MQA, and GQA"},{"content":"Background With the widespread application of Large Language Models (LLMs) across various industries, enterprises and research teams face an urgent need to adapt general-purpose models to specific domains. Foundational LLMs often fail to meet deep domain-specific requirements when handling specialized tasks. For example, in the application of closed-source programming languages, existing open-source models lack sufficient understanding of their syntax and semantics, leading to poor performance in tasks such as code generation and error correction. Therefore, injecting domain knowledge and training dedicated LLMs has become a key step in enhancing development efficiency and code quality.\nBased on my work experience, this article summarizes how to build LLMs equipped with specific domain knowledge by leveraging data preparation, model training, deployment, evaluation, and continuous iteration on top of existing general models.\nWhy Inject Domain Knowledge into the Foundational LLMs? Challenge 1: Limited Domain Knowledge Existing pre-trained models (such as GPT-4 and Llama 3) are primarily trained on general-purpose corpora, lacking in-depth understanding of niche languages or proprietary domains. This deficiency leads to subpar performance when the models handle programming code.\nChallenge 2: Data Security and Compliance When enterprises handle sensitive data, they must adhere to strict data sovereignty and compliance requirements. Uploading proprietary business data to third-party cloud services poses security risks, necessitating data processing and model training within local environments.\nChallenge 3: Limitations of OpenAI Fine-Tuning Mainstream commercial APIs for fine-tuning are typically basic and struggle to achieve deep alignment and optimization. For highly customized domain models, such approaches often fail to meet the required specifications.\nTwo Approaches of Injecting Knowledge In practical projects, the common methods for injecting domain knowledge into base models include Fine-Tuning and Retrieval-Augmented Generation (RAG). The following sections provide a detailed comparison of these methods to aid in selecting the most suitable strategy.\nMethod Comparison Fine-Tuning Core Concept\nThrough continued pre-training, supervised fine-tuning, and preference alignment, directly update the model parameters to enable it to master domain-specific knowledge and task patterns.\nTechnical Details\nContinued Pre-Training (CPT): Continue pre-training the base model on a large volume of domain-specific unsupervised data. Supervised Fine-Tuning (SFT): Perform supervised fine-tuning using high-quality labeled data. Preference Alignment (DPO): Optimize model outputs based on user feedback. Parameter Tuning Methods: Utilize full-parameter fine-tuning or combine with PEFT methods like LoRA to freeze some parameters and add adapters. Advantages\nDeep Customization: Updating the internal weights of the model enables a profound understanding of domain knowledge. No External Retrieval Dependency: Inference does not require additional knowledge bases, reducing latency and total token consumption. Enhanced Overall Performance: Significantly outperforms general models in domain-specific tasks. Disadvantages\nHigh Computational Cost: Requires substantial computational resources for training, especially during the CPT phase. Long Training Cycles: From data preparation to model training and optimization, the process is time-consuming. Catastrophic Forgetting: The model may forget its original general capabilities while learning new knowledge. Retrieval-Augmented Generation (RAG) Core Concept\nBuild a domain-specific knowledge base and retrieve relevant documents during inference to assist the model in generating more accurate responses without directly altering model parameters.\nTechnical Details\nData Processing: Preprocess domain documents by chunking them based on size and overlap. Vectorization: Embedding text chunks as vectors using embedding models and storing them in a Vector Store for retrieval. Retrieval: During inference, retrieve relevant documents through similarity search to provide contextual information or few-shot examples to the base model. Advantages\nPreserves General Capabilities: Model parameters remain unchanged, retaining general language abilities. Quick Updates: The knowledge base can be dynamically updated without retraining the model. Computational Efficiency: Avoids large-scale training, saving computational resources. Disadvantages\nDependence on Knowledge Base Quality: The quality of retrieved documents directly impacts response quality. Inference Speed: The retrieval process may increase inference latency and require more tokens. Limited Knowledge Coverage: The model’s internal knowledge is still restricted by the base model’s pre-training data. Models and Training Resources Base Models Taking the Llama 3 series as an example, it features the following characteristics:\nParameter Scale\nThe Llama 3 series includes models ranging from 1B to 405B parameters, widely supporting multilingual processing, code generation, reasoning, as well as visual and textual tasks. Smaller models (1B and 3B) are specially optimized for edge and mobile devices, supporting up to 128K context windows, efficiently handling local tasks such as summary generation, instruction execution, and text rewriting.\nMultimodal Capabilities\nLlama 3\u0026rsquo;s visual models (11B and 90B parameters) outperform many closed models in image understanding tasks and support multimodal processing of images, videos, and audio. All models support fine-tuning, facilitating customized development for specific domains.\nOpen Source and Community Support\nLlama 3 series models and their weights are released in open-source form and can be accessed via llama.com and the Hugging Face platform, providing convenient access and application support for developers.\nDataset Restrictions\nAlthough the Llama 3 models are released as open-source, the datasets used for their training are not open-sourced. Therefore, strictly speaking, Llama 3 is not entirely open-source. This limitation may pose challenges in addressing catastrophic forgetting, as obtaining data sets identical to the original training data is difficult.\nTraining Resources Training large language models requires robust computational resources and efficient distributed training frameworks.\nHardware Resources\nGPU Clusters: NVIDIA A100 or H100 GPUs are recommended, with configurations of 4 or 8 GPUs connected via NVLink or InfiniBand to enhance communication bandwidth. Storage Resources: High-performance SSDs (e.g., NVMe) to support fast data read and write operations. Software Frameworks\nDistributed Training Frameworks: DeepSpeed, Megatron-LM, among others, support large-scale model training. Inference Frameworks: vLLM, ollama, etc., optimize inference speed and resource utilization. Parallel Strategies\nData Parallelism (DP): Suitable when the model fits on a single GPU, implemented via DeepSpeed\u0026rsquo;s ZeRO Stage 0. Model Parallelism (MP), Pipeline Parallelism (PP), and Tensor Parallelism (TP): When the model cannot fit on a single GPU, optimize using ZeRO Stage 1, 2, or 3, or employ ZeRO-Infinity to offload parts of parameters and optimizer states to CPU or NVMe. DeepSpeed ZeRO Sharding Strategies Comparison ZeRO Stage Sharding Strategies ZeRO Stage Description GPU Memory Usage Training Speed ZeRO-0 Pure data parallelism without any sharding. All optimizer states, gradients, and parameters are fully replicated on each GPU. Highest Fastest ZeRO-1 Shards optimizer states (e.g., momentum and second moments), reducing GPU memory usage, but gradients and parameters remain data parallel. High Slightly slower than ZeRO-0 ZeRO-2 Shards optimizer states and gradients, further reducing GPU memory usage based on ZeRO-1. Medium Slower than ZeRO-1 ZeRO-3 Shards optimizer states, gradients, and model parameters, achieving the lowest GPU memory usage, suitable for extremely large models. Requires parameter broadcasting (All-Gather/All-Reduce) during forward/backward passes, significantly increasing communication overhead. Low Significantly slower than ZeRO-2, depends on model size and network bandwidth Offload Strategies Offload Type Description GPU Memory Usage Training Speed ZeRO-1 + CPU Offload Extends ZeRO-1 by offloading optimizer states to CPU memory, further reducing GPU memory usage but necessitating CPU-GPU data transfer, relying on PCIe bandwidth, and occupying CPU memory. Medium-low Slower than ZeRO-1, affected by CPU performance and PCIe bandwidth ZeRO-2 + CPU Offload Extends ZeRO-2 by offloading optimizer states to CPU memory, further reducing GPU memory usage for larger models but increasing CPU-GPU data transfer overhead. Lower Slower than ZeRO-2, affected by CPU performance and PCIe bandwidth ZeRO-3 + CPU Offload Extends ZeRO-3 by offloading optimizer states and model parameters to CPU, achieving minimal GPU memory usage but with extremely high CPU-GPU communication volume and CPU bandwidth significantly lower than GPU-GPU communication. Extremely Low Very Slow ZeRO-Infinity (NVMe Offload) Based on ZeRO-3, offloads optimizer states, gradients, and parameters to NVMe, breaking CPU memory limits and suitable for ultra-large-scale models; performance highly depends on NVMe parallel read/write speeds. Extremely LowRequires NVMe support Slower than ZeRO-3 but generally faster than ZeRO-3 + CPU Offload, can achieve better throughput if NVMe bandwidth is sufficient Communication Volume and Performance Impact ZeRO-0/1/2:\nCommunication is primarily gradient synchronization using All-Reduce operations, resulting in relatively low communication volume.\nZeRO-3:\nRequires All-Gather/All-Reduce operations for model parameters, significantly increasing communication volume. Network bandwidth becomes a critical bottleneck, and parameter broadcasting during forward/backward passes further exacerbates communication load.\nCPU Offload (ZeRO-1/2/3 + CPU):\nOffloads optimizer states or parameters to CPU, reducing GPU memory usage. Communication volume mainly arises from CPU \u0026lt;-\u0026gt; GPU data transfers, which have much lower bandwidth compared to GPU-GPU communication, easily causing performance bottlenecks, especially in ZeRO-3 scenarios. NVMe Offload (ZeRO-Infinity):\nFurther offloads to NVMe based on ZeRO-3, overcoming CPU memory limitations to support ultra-large-scale models. Performance heavily relies on NVMe I/O bandwidth and parallelism. If NVMe speed is sufficiently high, it typically outperforms CPU Offload; however, performance may suffer in scenarios with weak I/O performance or high latency. Hardware and Configuration Impact Hardware Constraints:\nPCIe Bandwidth, Network Bandwidth, NVMe I/O, etc., significantly impact Offload performance. Optimal strategies should be selected based on the hardware environment. Additional Notes:\nCPU Offload utilizes CPU memory and transfers data via PCIe; NVMe Offload saves states on NVMe devices. NVMe Offload generally outperforms CPU Offload when NVMe I/O performance is adequate, but care must be taken to avoid performance bottlenecks caused by insufficient I/O performance. Reference to Official Documentation:\nIt is recommended to consult the DeepSpeed official documentation for the latest and most accurate configuration parameters and performance tuning advice. Data Preparation: The Core of Training Success Data quality directly determines model performance. Data preparation includes data collection, cleaning, deduplication, categorization and balancing, anonymization, and other steps.\nPre-Training Data Data Sources Public Datasets: Such as the-stack-v2, Common Crawl, etc. Enterprise Proprietary Data: Internal documents, code repositories, business logs, etc. Web Crawlers: Collect domain-relevant web content using crawling technologies. Data Scale It is recommended to use at least hundreds of millions to billions of tokens to ensure the model can thoroughly learn domain knowledge. When data volume is insufficient, model performance may be limited. Data augmentation methods are suggested to supplement the data. Data Processing Data Preprocessing\nUniform Formatting: Process large volumes of unlabeled corpora from multiple data sources to ensure consistent formatting. It is recommended to use efficient storage formats like Parquet to improve data reading and processing efficiency. Data Deduplication\nDetection Methods: Use algorithms such as MinHash, SimHash, or cosine similarity for approximate duplicate detection. Granularity of Processing: Choose to deduplicate at the sentence, paragraph, or document level, adjusting flexibly based on task requirements. Similarity Threshold: Set a reasonable similarity threshold (e.g., 0.9) to remove texts with duplication above the threshold, ensuring data diversity. Data Cleaning\nText Filtering: Remove garbled text, spelling errors, and low-quality text by combining rule-based methods and model scorers (e.g., BERT/RoBERTa). Formatting Processing: Prefer using JSON format to handle data, ensuring the accuracy of special formats like code, Markdown, and LaTeX. Data Anonymization\nPrivacy Protection: Anonymize or remove sensitive information such as names, phone numbers, emails, passwords, etc., to ensure data compliance. Filtering Non-Compliant Content: Remove data blocks containing illegal, pornographic, or racially discriminatory content. Data Mixing and Balancing\nProportion Control: For example, combine 70% domain-specific data with 30% general data to prevent the model from forgetting general capabilities. Task Types: Ensure the data includes various task types such as code generation, Q\u0026amp;A dialogue, document summarization, multi-turn conversations, and mathematical reasoning. Data Sequencing\nProgressive Guidance: Use Curriculum Learning to start training with simple, clean data and gradually introduce more complex or noisy data, optimizing the model\u0026rsquo;s learning efficiency and convergence path. Semantic Coherence: Utilize In-Context Pretraining techniques to concatenate semantically similar documents, enhancing contextual consistency and improving the model\u0026rsquo;s depth of semantic understanding and generalization ability. Supervised Fine-Tuning Data Data Format Adopt Alpaca or Vicuna styles, such as single-turn and multi-turn dialogues structured as [instruction, input, output].\nScale: From thousands to hundreds of thousands, depending on project requirements and computational resources. Quality: Ensure high-quality and diverse data to prevent the model from learning errors or biases. Data Construction During the data construction process, we first collect daily business data and collaboratively build foundational questions with business experts. Subsequently, we use large language models for data augmentation to enhance data diversity and robustness. The specific data augmentation strategies are as follows:\nData Augmentation Strategies Diverse Expressions\nRewrite existing data using large language models through synonym replacement and syntactic transformations to increase data diversity.\nRobustness Enhancement\nCreate prompts containing spelling errors, mixed languages, and other input variations to simulate real-world scenarios while ensuring high-quality generated answers.\nKnowledge Distillation\nUtilize large language models like GPT-4 and Claude for knowledge distillation to generate Q\u0026amp;A pairs that meet requirements.\nComplex Task Design\nManually design high-quality data for complex scenarios (e.g., multi-turn dialogues, logical reasoning) to cover the model\u0026rsquo;s capability boundaries.\nData Generation Pipeline\nBuild an automated data generation pipeline that integrates data generation, filtering, formatting, and validation to improve overall efficiency.\nKey Points Task Type Annotation: Clearly annotate each data entry with its task type to facilitate subsequent fine-grained analysis and tuning. Multi-Turn Dialogues and Topic Switching: Construct data that captures contextual coherence and topic transitions in multi-turn dialogues to ensure the model learns the ability to handle topic switching and maintain contextual relevance. Chain of Thought (CoT) Strategy: For classification and reasoning tasks, generate procedural answers using CoT to improve accuracy. Data Flywheel: Continuously collect real user queries after deployment, iterating data based on real needs; regularly clean the data to ensure quality and diversity. Preference Data Data Format Triple Structure: [prompt, chosen answer, rejected answer] Annotation Details: Multi-Model Sampling: Generate answers using multiple models at different training stages or with different data ratios to increase data diversity. Editing and Optimization: Annotators can make slight modifications to the chosen answers to ensure answer quality. Sampling Strategies Multi-Model Sampling: Deploy multiple versions of the model to generate diverse answers for the same prompt. Comparative Annotation: Use manual or automated systems to compare generated answers and select superior answer pairs. Key Points Data Diversity and Coverage: Ensure preference data covers various scenarios and tasks to prevent the model from underperforming in specific contexts. High-Quality Annotation: The quality of preference data directly affects the model\u0026rsquo;s alignment, requiring accurate and consistent annotations. Training Process A complete training process for a domain-specific large language model typically includes Continued Pre-Training (CPT) → Supervised Fine-Tuning (SFT) → Direct Preference Optimization (DPO) as the three main steps, ultimately achieving model deployment and continuous optimization.\nComparison of Three Methods Training Method Overview Training Method Main Objective Data Requirements Typical Application Scenarios Continued Pre-Training (CPT) Continue pre-training on large-scale unsupervised corpora to inject new domain knowledge Large amounts of unlabeled text (at least hundreds of millions to billions of tokens) Supplementing domain knowledge, such as specialized texts in law, medicine, finance, etc. Supervised Fine-Tuning (SFT) Fine-tune on supervised labeled data to strengthen specific tasks and instruction execution capabilities Customized labeled data (instruction/dialog pairs), ranging from thousands to hundreds of thousands Various specific tasks, such as code generation, Q\u0026amp;A, text rewriting, complex instruction execution, etc. Direct Preference Optimization (DPO) Optimize model outputs to align with human preferences using preference data (chosen vs. rejected) Preference data: [prompt, chosen, rejected](relatively smaller scale) Aligning with human feedback, such as response style, compliance, safety, etc. Advantages and Challenges Continued Pre-Training (CPT) Advantages:\nBetter domain coverage, comprehensively enhancing the model\u0026rsquo;s understanding and generation capabilities in specific domains. No need for additional manual annotation. Challenges/Limitations:\nRequires a large volume of high-quality domain data. High training costs, necessitating massive computational power and time. May introduce domain biases, necessitating careful handling of data quality and distribution. Supervised Fine-Tuning (SFT) Advantages:\nQuickly acquires task execution capabilities. Significantly improves accuracy in specific scenarios. Challenges/Limitations:\nHigh data annotation costs. Requires careful selection of labeled data to avoid overfitting. Fine-tuning may weaken the model\u0026rsquo;s generality. Direct Preference Optimization (DPO) Advantages:\nNo need to train a separate Reward Model. Requires less data and computational resources to achieve similar or better results compared to PPO. Challenges/Limitations:\nRequires reliable preference annotations. Continues to need more preference data for complex and diverse scenarios. Easily constrained by the distribution of preference data. General Training Tips and Technical Details When performing CPT, SFT, and DPO, there are numerous general training tips and technical details. The following sections uniformly describe these general aspects for better understanding and application.\nData Processing and Preparation Data Quality: Regardless of CPT, SFT, or DPO, data quality is crucial. Ensure data accuracy, unambiguity, and diversity. Data Formatting: Consistent data formats simplify the training process. For example, using JSON or other structured formats to store training data. Data Augmentation: Increase data diversity and improve the model\u0026rsquo;s generalization ability through methods like LLM rewriting and optimization. Learning Rate and Optimization Learning Rate Settings: Typically use a smaller learning rate than during pre-training, such as reducing from 3e-4 to 3e-5, depending on the task and data volume. Learning Rate Scheduling: Use warm-up strategies (e.g., linearly increasing for the first 10% of steps), followed by linear decay or cosine annealing to ensure a smooth training process. Optimizer Selection: Choose suitable optimizers based on model size and hardware resources, such as AdamW. Training Strategies Full-Parameter Fine-Tuning: When resources permit, prioritize full-parameter fine-tuning to ensure the model fully captures new knowledge. Parameter-Efficient Fine-Tuning (PEFT): Methods like LoRA are suitable for scenarios with limited computational resources by freezing some parameters and adding adapters for efficient fine-tuning. Mixed Precision Training: Use bf16 or fp16 on supported GPUs to reduce memory usage and increase training speed. Training Stability: Employ techniques such as gradient clipping, regularization, dropout, and weight decay to prevent gradient explosion and model overfitting. Flash Attention: Utilize Flash Attention to optimize the computation efficiency of the attention mechanism, enhancing training speed and reducing memory usage. Monitoring and Tuning Convergence Monitoring: Continuously monitor loss curves on training and validation sets to ensure the model is converging properly. Adjust learning rates and other hyperparameters as needed. Checkpoint: Regularly save checkpoints to prevent loss of all training progress due to unexpected interruptions. Early Stopping: Prevent model overfitting by stopping training at an appropriate time and saving the best model state. Model Evaluation: Conduct periodic evaluations during training to ensure model performance meets expectations. Continued Pre-Training (CPT) Objective Inject new domain knowledge into the base model by continuing pre-training on a large volume of domain-specific unsupervised data, enhancing the model\u0026rsquo;s understanding and generation capabilities in the specific domain.\nTraining Tips Streaming Data Loading\nImplement streaming data loading to dynamically read data during training, preventing memory overflows and training interruptions. Full-Parameter Fine-Tuning\nTypically, update all model parameters during training to ensure comprehensive knowledge acquisition. Compared to parameter-efficient fine-tuning methods (e.g., LoRA), full-parameter fine-tuning offers better domain knowledge injection, especially when computational resources are abundant. It is recommended to prioritize full-parameter fine-tuning under such conditions. Supervised Fine-Tuning (SFT) Objective Enhance the model\u0026rsquo;s practicality and accuracy by training it on high-quality labeled data to perform specific tasks such as code generation, code repair, and complex instruction execution.\nTraining Tips Number of Epochs\nTypically, 1 to 4 epochs are sufficient to observe significant effects when data volume is adequate. If data volume is insufficient, consider increasing the number of epochs while being mindful of overfitting risks. Data augmentation is recommended in such cases. Data Augmentation and Diversity\nEnsure training data covers a variety of task types and instruction expressions to improve the model\u0026rsquo;s generalization ability. Include multi-turn dialogues and robustness data to enhance the model\u0026rsquo;s capability to handle real user scenarios. Direct Preference Optimization (DPO) Objective Optimize model outputs to better align with human expectations and needs, including response style, safety, and readability, by leveraging user feedback and preference data.\nCharacteristics of DPO Direct Optimization\nDoes not require training a separate Reward Model. Instead, directly performs contrastive learning on (chosen, rejected) data pairs.\nEfficiency\nCompared to PPO, DPO requires less data and computational resources to achieve similar or better results.\nDynamic Adaptation\nThe model can immediately adapt whenever new data is available without the need to retrain a Reward Model.\nTraining Tips Collecting Preference Data\nDeploy multiple models at different training stages or with different data ratios to generate diverse responses. Annotate chosen and rejected answer pairs through manual or automated means to ensure data diversity and quality. Contrastive Learning\nOptimize model parameters by maximizing the probability of chosen answers and minimizing the probability of rejected answers. Iterative Optimization\nContinuously collect user feedback, generate new preference data, and perform iterative training to gradually enhance model performance. Implement a data flywheel mechanism to achieve ongoing model evolution and optimization. Common Issues and Solutions Repetitive Outputs\nIssue: The model generates repetitive content, continuously printing without stopping.\nSolutions:\nData Deduplication and Cleaning: Ensure training data does not contain a large amount of repetitive content. Check EOT (End-of-Token) Settings: Prevent the model from continuously generating without stopping. Align via SFT/DPO: Optimize model output quality. Adjust Decoding Strategies: Increase parameters like top_k, repetition penalty, and temperature. Catastrophic Forgetting\nIssue: The model forgets its original general capabilities during fine-tuning, effectively overfitting to the new dataset and causing excessive changes to the original model parameter space.\nSolutions:\nMix in Some General Data: Maintain the model’s general capabilities. Lower the Learning Rate: Reduce the impact on existing knowledge. Increase Dropout Rate and Weight Decay: Prevent overfitting. Use Parameter-Efficient Fine-Tuning Methods like LoRA: Avoid large-scale parameter updates. Utilize RAG Assistance: Combine with external knowledge bases to enhance model performance. Chat Vector: Quickly inject conversational and general capabilities into the model through simple arithmetic operations on model weights. Insufficient Understanding of Entity Relationships and Reasoning Paths\nIssue: The model struggles to correctly understand complex entity relationships and reasoning paths.\nSolutions:\nIntroduce Chain-of-Thought (CoT) Data and Enhanced Reasoning Training: Improve the model\u0026rsquo;s capabilities through step-by-step reasoning training, combined with Reinforcement Fine-Tuning and o1/o3 training methods. Expand Training Data Coverage: Incorporate more diverse scenarios containing complex entity relationships and reasoning paths. Combine with Knowledge Graph Modeling: Use GraphRAG to strengthen the model\u0026rsquo;s understanding and reasoning abilities regarding entity relationships. Model Deployment and Evaluation Deployment Inference Frameworks\nollama: Local inference deployment based on llama.cpp, enabling quick startups. vLLM: Optimized for high concurrency and inference throughput in multi-user scenarios. Quantization: Quantize the model to 8-bit or 4-bit to further reduce inference costs and improve deployment efficiency. Integrate RAG \u0026amp; Agents\nRAG: Combine with a vector knowledge base to retrieve relevant documents or code snippets in real-time, assisting the model in generating more accurate responses. Agents: Utilize Function Calls or multi-turn dialogue mechanisms to enable the model to invoke external tools or perform complex reasoning, enhancing interactivity and practicality. Langgraph: Encapsulate RAG and multi-agent workflows to build customized dialogue systems or automated code generation platforms. Evaluation Evaluation Metrics\nCPT Phase: Use domain-specific test sets to evaluate perplexity (PPL) or cross-entropy, measuring the model\u0026rsquo;s mastery of new knowledge. SFT/DPO Phase: Human or Model Evaluation: Assess the accuracy, coherence, readability, and safety of responses through human ratings or automated tools. Code Generation: Build a large-scale unit test set to evaluate the pass@k metric, measuring the correctness rate of code generation. General Capabilities: Test the model on common benchmarks (e.g., MMLU, CMMLU) to ensure minimal performance degradation on general tasks. Decoding Hyperparameters\nConsistency: Maintain consistent decoding parameters such as top_k, top_p, temperature, and max_new_tokens during evaluation to ensure comparability of results. Grid Search: When computational resources permit, evaluate different combinations of decoding parameters to select the optimal configuration. Data Flywheel and Continuous Iteration Data Flywheel Mechanism\nReal-Time Collection of User Logs\nCollect real user prompts and generated responses online, covering diverse usage scenarios and task types. Automated or Manual Annotation\nAnnotate collected user prompts and responses with preferences, generating new (chosen, rejected) data pairs. Iterative Training\nIncorporate newly generated preference data into the next round of SFT/DPO training to continuously optimize response quality and user experience. Robustness Data\nInclude data with spelling errors, mixed languages, vague instructions, etc., to enhance the model’s robustness and ability to handle real-world scenarios. Continuous Optimization\nFeedback Loop: Utilize user feedback to continuously improve training data and model performance, achieving self-optimization and evolution of the model. Multi-Model Collaboration: Deploy multiple versions of the model to generate diverse responses, enhancing the model\u0026rsquo;s comprehensive capabilities through contrastive learning. Integrating Intent Recognition and Multi-Agent Reasoning Use an intent classification model to allow the large model to determine the category of user input intent. Based on the mapping between intent categories and context types, supervise the reasoning path, and then perform multi-way retrieval based on the reasoning path. Provide this information to the trained model to generate the final result.\nConclusion Through the combination of Continued Pre-Training (CPT) → Supervised Fine-Tuning (SFT) → Direct Preference Optimization (DPO), it is possible to effectively inject domain-specific knowledge into base large models, constructing closed-source LLMs capable of efficiently solving business problems. The key steps are as follows:\nData Preparation\nHigh-quality data collection, cleaning, deduplication, and categorization to ensure data diversity and accuracy. Implement data anonymization strategies to protect privacy and ensure compliance. Model Training\nUse CPT to inject domain knowledge, SFT to learn specific task patterns, and DPO to optimize model outputs to align with human preferences and safety. Leverage efficient parallel training frameworks and hyperparameter tuning techniques to enhance training efficiency and resource utilization. Deployment and Evaluation\nEmploy efficient inference frameworks, integrating RAG and Agents for knowledge enhancement and functional extension. Conduct multi-dimensional evaluations to ensure the model performs as expected at each stage. Continuous Iteration\nBuild a data flywheel to continuously collect user feedback and optimize training data and model performance. Integrate RAG and Agents to achieve ongoing improvement and expansion of model capabilities. Ultimately, through a systematic process and technical measures, it is possible to construct an AI system with not only profound domain knowledge but also the flexibility to handle complex business requirements over its lifecycle.\nReferences DeepSpeed Megatron-LM ollama vLLM GraphRAG The Llama 3 Herd of Models ZeRO-Infinity: Breaking the GPU Memory Wall for Extreme Scale Deep Learning Chat Vector: A Simple Approach to Equip LLMs with Instruction Following and Model Alignment in New Languages Evaluating Large Language Models Trained on Code Direct Preference Optimization: Your Language Model is Secretly a Reward Model Citation Citation: To reproduce or cite the content of this article, please acknowledge the original author and source.\nCited as:\nYue Shui. (Jan 2025). Building Domain-Specific LLMs.\nhttps://syhya.github.io/posts/2025-01-05-build-domain-llm\nOr\n@article{syhya2024domainllm, title = \u0026#34;Building Domain-Specific LLMs\u0026#34;, author = \u0026#34;Yue Shui\u0026#34;, journal = \u0026#34;syhya.github.io\u0026#34;, year = \u0026#34;2025\u0026#34;, month = \u0026#34;Jan\u0026#34;, url = \u0026#34;https://syhya.github.io/posts/2025-01-05-build-domain-llm/\u0026#34; } ","permalink":"https://syhya.github.io/posts/2025-01-05-domain-llm-training/","summary":"\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eWith the widespread application of Large Language Models (LLMs) across various industries, enterprises and research teams face an urgent need to adapt general-purpose models to specific domains. Foundational LLMs often fail to meet deep domain-specific requirements when handling specialized tasks. For example, in the application of closed-source programming languages, existing open-source models lack sufficient understanding of their syntax and semantics, leading to poor performance in tasks such as code generation and error correction. Therefore, injecting domain knowledge and training dedicated LLMs has become a key step in enhancing development efficiency and code quality.\u003c/p\u003e","title":"Building Domain-Specific LLMs"},{"content":"Rent a GPU or Buy Your Own? Before setting up a deep learning environment, consider usage duration, budget, data privacy, and maintenance overhead. If you have long-term needs (e.g., over a year) and require strict data security, building your own GPU server often provides lower overall costs and a more controllable environment. On the other hand, for short-term projects or when data privacy is not critical, renting cloud GPUs (e.g., Azure, AWS, GCP) or using free platforms (Colab, Kaggle) offers greater flexibility.\nAdvantages of Renting GPUs:\nNo high upfront hardware costs Elastic scalability according to project needs Cloud vendors typically provide data compliance and security assurances, reducing hardware maintenance concerns Advantages of Buying GPUs:\nLower total cost if used extensively over the long term Higher privacy and control for in-house data and models Hardware can be upgraded or adjusted at any time, offering more flexible deployment Personal Suggestions\nIf you have a limited budget or are just starting out, use Colab, Kaggle, or cloud-based GPU solutions first. Once computing needs and privacy requirements increase, consider building your own multi-GPU server or renting a multi-node, multi-GPU cluster. Background In September 2023, to continue my exploration and research on Large Language Models (LLMs) outside of work, I assembled a dual RTX 4090 personal AI server. It has been running for nearly a year, and here are some observations:\nNoise: Placed under my desk, the fans can get quite loud under full load. However, noise levels are acceptable during inference or moderate loads. Inference Performance: With a total of 48GB of VRAM, and by using 4-bit quantization, it can handle 70B-level models (e.g., Llama 70B, Qwen 72B). Training Performance: By using DeepSpeed with distributed and offload techniques (ZeRO-3 + CPU offload), I can finetune around 34B parameter models (e.g., CodeLlama 34B). Cost-Effectiveness: For personal or small-team experiments and small-to-medium scale model training, this configuration is quite practical. However, full-scale training of very large models (hundreds of billions of parameters) still requires more professional GPUs (e.g., multi-GPU A100 or H100 clusters). Below is an illustration of VRAM requirements for various model sizes and training approaches :\nFig. 1. Hardware Requirement. (Image source: LLaMA-Factory)\nAssembly Strategy \u0026amp; Configuration Details The total budget is around 40,000 RMB (~6,000 USD). The final build list is as follows (for reference only):\nComponent Model Price (RMB) GPU RTX 4090 * 2 25098 Motherboard + CPU AMD R9 7900X + MSI MPG X670E CARBON 5157.55 Memory Corsair 48GB * 2 (DDR5 5600) 2399 SSD SOLIDIGM 944 PRO 2TB *2 + Samsung 990PRO 4TB 4587 PSU Corsair AX1600i 2699 Fans Phanteks T30 120mm P * 6 1066.76 CPU Cooler Thermalright FC140 BLACK 419 Chassis Phanteks 620PC Full Tower 897.99 GPU Riser Cable Phanteks FL60 PCI-E4.0 *16 399 Total: ~ 42,723.3 RMB\nGPU Selection For large-scale model research, floating-point performance (TFLOPS) and VRAM capacity are the most critical metrics. Professional GPUs (A100, H100, etc.) boast higher VRAM and NVLink support but can easily cost hundreds of thousands of RMB, which is prohibitive for most individual users. According to Tim Dettmers, the RTX 4090 offers excellent performance-per-dollar and supports features like BF16 and Flash Attention, making it a high-value option.\nCooling Options: Blower vs. Air-Cooling vs. Liquid-Cooling Cooling Method Advantages Disadvantages Best For Blower Fan Compact form factor; good for multi-GPU setups Loud noise, generally weaker cooling Server racks, dense multi-GPU deployments Air-Cooling Good balance of performance and noise; easy upkeep Cards are often large, require space Home or personal research (with enough space) Liquid-Cooling Excellent cooling, quieter under full load Risk of leaks, higher cost Extreme quiet needs or heavy overclocking Home Setup Recommendation: Air-cooled GPUs are typically the best balance of cooling efficiency, noise, and maintenance. They are generally more user-friendly compared to blower or liquid-cooled alternatives.\nCPU \u0026amp; Motherboard In deep learning scenarios, the CPU handles data preprocessing, pipeline scheduling, and multi-process/thread management, ensuring high-throughput, low-latency data delivery to the GPUs. Thus, the CPU’s main requirements include sufficient PCIe lanes and robust multi-threaded performance.\nIntel: 13th/14th Generation i9 (e.g., 13900K) offers 20 primary PCIe lanes, enough for dual GPUs at x8 + x8. AMD: The Ryzen 7000/9000 series (e.g., 7950X) provides 28 (24 usable) PCIe lanes and also supports dual GPUs at x8 + x8, with enough bandwidth for multiple M.2 SSDs. MSI MPG X670E CARBON Motherboard Expandability: Supports PCIe 5.0 and DDR5 memory, offering ample future-proofing. Stability: High-quality power delivery, ensuring stable operation for both CPU and multiple GPUs. Rich I/O: Supports multiple M.2 SSDs and USB4 for various usage scenarios. AMD Ryzen 9 7900X Highlights Cores \u0026amp; Threads: 12 cores, 24 threads, excellent for data preprocessing and multitasking in deep learning workloads. PCIe Bandwidth: Provides 28 (24 usable) PCIe 5.0 lanes to support dual GPUs at x8 + x8 while also powering high-speed M.2 SSDs. Power Efficiency: Built on the Zen 4 architecture, delivering outstanding performance-to-power ratio for high-performance computing tasks. Key Motherboard Considerations Physical Layout RTX 4090 cards are huge, often occupying multiple slots. Confirm the board can hold two such cards simultaneously. If space or thermal conflicts arise, use a riser cable for vertical placement of the second GPU. PCIe Lane Splitting Ensure the motherboard can run two PCIe 4.0 x8 + x8 slots. Avoid a setup ending up as x16 + x2, which severely limits the second GPU’s bandwidth and can lead to a significant performance bottleneck, especially critical in large model training. Expandability With two GPUs installed, you still need enough M.2 slots and external ports for additional storage or peripherals. After evaluating expandability, performance, and cost-effectiveness, I chose the AMD Ryzen 9 7900X paired with the MSI MPG X670E CARBON. A GPU riser cable resolved the slot conflicts caused by the thickness of dual RTX 4090s.\nBIOS Setup Recommendations Memory Optimization Enable XMP/EXPO (Intel/AMD) to boost memory clock speeds and bandwidth. Overclocking If additional performance is needed, enable PBO (Precision Boost Overdrive) or Intel Performance Tuning and monitor system stability. Thermals \u0026amp; Stability Avoid extreme overclocking and keep temperatures under control to maintain system stability. Memory During deep learning training, large amounts of system memory are used for data loading and optimizer states (especially in multi-GPU scenarios with Zero-stage parallelism). Aim for at least 2× the total GPU VRAM capacity. This build uses 48GB * 2 (96GB in total), sufficient for everyday multitasking and distributed training without frequent swapping.\nStorage Prefer M.2 NVMe SSDs: They offer superior read/write performance, critical for loading large model weights, caching intermediate files, and storing training logs. Capacity ≥ 2TB: Model files continue to grow in size. 2TB can fill up quickly; consider 4TB or more depending on your needs. SSD Brands: Samsung, SK Hynix, and Western Digital have reliable high-end product lines. Power Supply Dual RTX 4090s can draw 900W–1000W under full load, and you also need overhead for the CPU, motherboard, and storage. Generally, 1,500W+ Platinum or Titanium PSUs are recommended to ensure stable power delivery and mitigate voltage fluctuations.\nI opted for a Corsair AX1600i (digital PSU), which provides real-time power monitoring and sufficient headroom.\nCooling \u0026amp; Fans I chose an air-cooling setup:\nCPU Cooler: Thermalright FC140, a dual-tower air cooler offering solid thermal performance with relatively low noise. Case Fans: Phanteks T30 120mm * 6, maintaining slightly positive internal pressure to ensure proper airflow across the GPUs and power delivery modules. For prolonged high-load training (such as distributed training of large models), chassis airflow management and adequate fans are crucial. Monitor CPU, GPU, and VRM temperatures regularly and adjust fan curves as needed.\nAdvanced Cooling\nFor even quieter operation, consider a Hybrid or partial liquid-cooling solution, along with finely tuned fan curves. Regularly cleaning dust filters, using dust guards, and refreshing thermal compound can also help improve thermals and stability. Chassis Because the RTX 4090 is massive, and two of them stacked requires ample internal space and airflow, a full-tower chassis is recommended for better cable routing and thermal design. I went with the Phanteks 620PC, which offers ample space and built-in cable management.\nBelow is a picture of the built computer:\nFig. 2. Computer\nSystem \u0026amp; Software Environment Operating System: Linux (e.g., Ubuntu 22.04 LTS) is highly recommended due to better compatibility and support for CUDA, NVIDIA drivers, and popular deep learning frameworks. The general setup flow:\nOS Installation: Ubuntu or another Linux distribution. NVIDIA Driver Installation: Make sure nvidia-smi detects both 4090 GPUs correctly:\nFig. 3. nvidia-smi Output\nCUDA Toolkit: Verify via nvcc -V:\nFig. 4. nvcc -V Output\ncuDNN: Ensure your deep learning frameworks can leverage GPU-accelerated kernels for convolution, RNN, etc. Framework Testing: Use PyTorch, TensorFlow, or JAX to confirm basic inference and training functionality. Docker Containerization: With nvidia-container-toolkit, containers can directly access GPU resources, eliminating host-environment conflicts. For multi-node, multi-GPU setups, consider Kubernetes, Ray, or Slurm for cluster scheduling and resource management. Recommended Tools \u0026amp; Frameworks Training Frameworks\nLLaMA-Factory: Offers user-friendly packaging for large language model training and inference. Great for beginners. DeepSpeed: Provides distributed training for large models, with multiple parallelization strategies and optimizations. Megatron-LM: NVIDIA’s official large-scale language model training framework, ideal for multi-node, multi-GPU scenarios. Monitoring \u0026amp; Visualization\nWeights \u0026amp; Biases or TensorBoard: Real-time monitoring of loss, learning rate, etc., with remote-friendly UI. Inference Tools\nollama: Based on llama.cpp, easy local inference setup. vLLM: Optimized for high-concurrency, multi-user scenarios, delivering superior throughput. Framework ollama vLLM Function Simple local LLM deployment High-concurrency / high-throughput LLM Concurrent Performance drops as concurrency increases Handles higher concurrency with better TPS 16 Threads ~17s/req ~9s/req Throughput Slower token generation speeds ~2× faster token generation Max Concur. Performance deteriorates over 32 threads Remains stable under large concurrency Use Cases Personal or low-traffic apps Enterprise or multi-user high concurrency WebUI\nOpen-WebUI: A user-friendly, web-based solution that integrates multiple AI backends (ollama, OpenAI API, etc.), handy for rapid prototyping and visualization. Advanced Suggestions Development \u0026amp; Debugging Efficiency\nUse SSH for remote development, and create custom Docker images to reduce setup overhead. Quantization \u0026amp; Pruning\nTechniques like 4-bit or 8-bit quantization and pruning can reduce model size and VRAM usage, thereby improving inference performance. Mixed-Precision Training\nSwitch to BF16 or FP16 training to accelerate training speed, combined with gradient scaling (GradScaler) to maintain numerical stability. CPU Coordination\nEnhance data loading using multi-threading, multi-processing, or RAM disks for streaming large pretraining datasets. Multi-Node Cluster Deployment\nConnect nodes via InfiniBand or high-speed Ethernet and use Kubernetes for efficient resource scheduling. Summary With the above configuration and methodology, I successfully built a dual RTX 4090 deep learning workstation. It excels at inference and small to medium scale fine-tuning scenarios—ideal for individuals or small teams focusing on LLM research or application development. This setup strikes a balance between cost-effectiveness and flexibility. However, if you plan to train massive models (hundreds of billions of parameters) in a full-parameter regime, you will still need more GPUs (e.g., multi-GPU A100 or H100 clusters).\nFrom personal experience, dual 4090 GPUs provide sufficient performance within a reasonable budget, meeting the majority of small-to-medium-scale R\u0026amp;D needs—a solid option for qualified individuals or teams to consider.\nReferences Tim Dettmers: Which GPU for Deep Learning? (2023) Intel 14900K PCIe lane specs AMD R5 7600X PCIe lane specs MSI MPG X670E CARBON Specifications nvidia-container-toolkit LLaMA-Factory DeepSpeed Megatron-LM ollama vLLM Ollama vs VLLM: Which Tool Handles AI Models Better? Open-WebUI Copyright \u0026amp; Citation Disclaimer: The configurations, prices, and recommendations in this article are for technical discussion and research purposes only. Actual purchases and deployments should be carefully evaluated based on individual budgets and requirements. The author assumes no liability for any direct or indirect consequences resulting from following or adapting the information provided herein.\nCitation: When reposting or referencing this content, please credit the original author and source.\nCited as:\nYue Shui. (Dec 2024). Building a Home Deep Learning Rig with Dual RTX 4090 GPUs. https://syhya.github.io/posts/2024-12-21-build-gpu-server\nOr\n@article{syhya2024build, title = \u0026#34;Building a Home Deep Learning Rig with Dual RTX 4090 GPUs\u0026#34;, author = \u0026#34;Yue Shui\u0026#34;, journal = \u0026#34;syhya.github.io\u0026#34;, year = \u0026#34;2024\u0026#34;, month = \u0026#34;Dec\u0026#34;, url = \u0026#34;https://syhya.github.io/posts/2024-12-21-build-gpu-server/\u0026#34; ","permalink":"https://syhya.github.io/posts/2024-12-21-build-gpu-server/","summary":"\u003ch2 id=\"rent-a-gpu-or-buy-your-own\"\u003eRent a GPU or Buy Your Own?\u003c/h2\u003e\n\u003cp\u003eBefore setting up a deep learning environment, consider \u003cstrong\u003eusage duration\u003c/strong\u003e, \u003cstrong\u003ebudget\u003c/strong\u003e, \u003cstrong\u003edata privacy\u003c/strong\u003e, and \u003cstrong\u003emaintenance overhead\u003c/strong\u003e. If you have long-term needs (e.g., over a year) and require strict data security, building your own GPU server often provides lower overall costs and a more controllable environment. On the other hand, for short-term projects or when data privacy is not critical, renting cloud GPUs (e.g., Azure, AWS, GCP) or using free platforms (Colab, Kaggle) offers greater flexibility.\u003c/p\u003e","title":"Building a Home Deep Learning Rig with Dual RTX 4090 GPUs"},{"content":"Abstract The stock market is a crucial component of the financial market. In recent years, with its vigorous development, research on stock price prediction and quantitative investment strategies has attracted scholars from various fields. With the advancement of Artificial Intelligence (AI) and Machine Learning (ML) in recent years, researchers have shifted from traditional statistical models to AI algorithms. Particularly after the deep learning boom, neural networks have achieved remarkable results in stock price prediction and quantitative investment strategy research. The objective of deep learning is to learn multi-level features, constructing abstract high-level features by combining low-level ones, thereby mining the distributed feature representations of data. This approach enables complex nonlinear modeling to accomplish prediction tasks. Recurrent Neural Networks (RNNs) have been widely applied to sequential data, such as natural language and speech. Daily stock prices and trading information are sequential data, leading many researchers to use RNNs for stock price prediction. However, basic RNNs suffer from gradient vanishing issues when the number of layers is excessive. The advent of Long Short-Term Memory (LSTM) networks addressed this problem, followed by variants such as Gated Recurrent Units (GRUs), Peephole LSTMs, and Bidirectional LSTMs (BiLSTMs). Traditional stock prediction models often overlook temporal factors or only consider unidirectional temporal relationships. Therefore, this paper employs the BiLSTM model for stock price prediction. From a model principle perspective, the BiLSTM model fully leverages the contextual relationships in both forward and backward temporal directions of time series data. It also avoids gradient vanishing and explosion problems in long sequences, enabling better learning of information with long-term dependencies.\nThe first part of this paper\u0026rsquo;s experiments utilizes stock data from China\u0026rsquo;s Shanghai Pudong Development Bank and the US\u0026rsquo;s IBM to establish stock prediction models using LSTM, GRU, and BiLSTM. By comparing the prediction results of these three deep learning models, it is found that the BiLSTM model outperforms the others for both datasets, demonstrating better prediction accuracy. The second part uses A-share market-wide stock data and first employs a LightGBM model to screen 50 factors, selecting the top 10 most important factors. Subsequently, a BiLSTM model is used to select and combine these factors to establish a quantitative investment strategy. Empirical analysis and backtesting of this strategy reveal that it outperforms the market benchmark index, indicating the practical application value of the BiLSTM model in stock price prediction and quantitative investment.\nKeywords: Quantitative Investment; Deep Learning; Neural Network Model; Multi-Factor Stock Selection; BiLSTM\nChapter 1 Introduction 1.1 Research Background and Significance 1.1.1 Research Background Emerging in the 1970s, quantitative investment gradually entered the vision of investors, initiating a new revolution that changed the landscape of portfolio management previously dominated by passive management and the efficient market hypothesis. The efficient market hypothesis posits that under market efficiency, stock prices reflect all market information, and no excess returns exist. Passive investment management, based on the belief that markets are efficient, focuses more on asset classes, with the most common approach being purchasing index funds and tracking published index performance. In contrast, active investment management relies primarily on investors\u0026rsquo; subjective judgments of the market and individual stocks. By applying mathematical models to the financial domain and using available public data to evaluate stocks, active managers construct portfolios to achieve returns. Quantitative investment, through statistical processing of vast historical data to uncover investment opportunities and avoid subjective factors, has gained increasing popularity among investors. Since the rise of quantitative investment, people have gradually utilized various technologies for stock price prediction to better establish quantitative investment strategies. Early domestic and international scholars adopted statistical methods for modeling and predicting stock prices, such as exponential smoothing, multiple regression, and Autoregressive Moving Average (ARMA) models. However, due to the multitude of factors influencing the stock market and the large volume of data, stock prediction is highly challenging, and the prediction effectiveness of various statistical models has been unsatisfactory.\nIn recent years, the continuous development of machine learning, deep learning, and neural network technologies has provided technical support for stock price prediction and the construction of quantitative strategies. Many scholars have achieved new breakthroughs using methods like Random Forest, Neural Networks, Support Vector Machines, and Convolutional Neural Networks. The ample historical data in the stock market, coupled with diverse technological support, provides favorable conditions for stock price prediction and the construction of quantitative strategies.\n1.1.2 Research Significance From the perspective of the long-term development of the national economic system and financial markets, research on stock price prediction models and quantitative investment strategies is indispensable. China started relatively late, with a less mature financial market, fewer financial instruments, and lower market efficiency. However, in recent years, the country has gradually relaxed policies and vigorously developed the financial market, providing a \u0026ldquo;breeding ground\u0026rdquo; for the development of quantitative investment. Developing quantitative investment and emerging financial technologies can offer China\u0026rsquo;s financial market an opportunity for a \u0026ldquo;curve overtaking\u0026rdquo;. Furthermore, the stock price index, as a crucial economic indicator, serves as a barometer for China\u0026rsquo;s economic development.\nFrom the perspective of individual and institutional investors, constructing stock price prediction models and quantitative investment strategy models enhances market efficiency. Individual investors often lack comprehensive professional knowledge, and their investment behaviors can be somewhat blind. Developing relevant models to provide references can reduce the probability of judgment errors and change the relatively disadvantaged position of individual investors in the capital market. For institutional investors, rational and objective models, combined with personal experience, improve the accuracy of decision-making and provide new directions for investment behaviors.\nIn summary, considering China\u0026rsquo;s current development status, this paper\u0026rsquo;s selection of individual stocks for stock price prediction models and A-share market-wide stocks for quantitative strategy research holds significant practical research value.\n1.2 Literature Review White (1988)$^{[1]}$ used a Backpropagation (BP) neural network to predict the daily returns of IBM stock. However, due to the BP neural network model\u0026rsquo;s susceptibility to gradient explosion, the model could not converge to a global minimum, thus failing to achieve accurate predictions.\nKimoto (1990)$^{[2]}$ developed a system for predicting the Tokyo Stock Exchange Prices Index (TOPIX) using modular neural network technology. This system not only successfully predicted TOPIX but also achieved a certain level of profitability through stock trading simulations based on the prediction results.\nG. Peter Zhang (2003)$^{[3]}$ conducted a comparative study on the performance of Autoregressive Integrated Moving Average (ARIMA) models and Artificial Neural Network (ANN) models in time series forecasting. The results showed that ANN models significantly outperformed ARIMA models in terms of time series prediction accuracy.\nRyo Akita (2016)$^{[4]}$ selected the Consumer Price Index (CPI), Price-to-Earnings ratio (P/E ratio), and various events reported in newspapers as features, and constructed a financial time series prediction model using paragraph vectors and LSTM networks. Using actual data from fifty listed companies on the Tokyo Stock Exchange, the effectiveness of this model in predicting stock opening prices was verified.\nKunihiro Miyazaki (2017)$^{[5]}$ constructed a model for predicting the rise and fall of the Topix Core 30 index and its constituent stocks by extracting daily stock chart images and 30-minute stock price data. The study compared multiple models, including Logistic Regression (LR), Random Forest (RF), Multilayer Perceptron (MLP), LSTM, CNN, PCA-CNN, and CNN-LSTM. The results indicated that LSTM had the best prediction performance, CNN performed generally, but hybrid models combining CNN and LSTM could improve prediction accuracy.\nTaewook Kim (2019)$^{[6]}$ proposed an LSTM-CNN hybrid model to combine features from both stock price time series and stock price image data representations to predict the stock price of the S\u0026amp;P 500 index. The study showed that the LSTM-CNN model outperformed single models in stock price prediction, and this prediction had practical significance for constructing quantitative investment strategies.\n1.3 Innovations of the Paper This paper has the following innovations in stock price prediction:\nData from both the domestic A-share market (Shanghai Pudong Development Bank) and the international US stock market (IBM) are used for research, avoiding the limitations of single-market studies. Traditional BP models have never considered temporal factors, or like LSTM models, only consider unidirectional temporal relationships. Therefore, this paper uses the BiLSTM model for stock price prediction. From a model principle perspective, the BiLSTM model fully utilizes the contextual relationships in both forward and backward temporal directions of time series data and avoids gradient vanishing and explosion problems in long sequences, enabling better learning of information with long-term dependencies. Empirical evidence, compared with LSTM and GRU models, demonstrates its ability to improve prediction accuracy. The stock price prediction model is trained using multiple stock features, including opening price, closing price, highest price, and trading volume. Compared to single-feature prediction of stock closing prices, this approach is theoretically more accurate and can better compare the prediction effectiveness of LSTM, GRU, and BiLSTM for stocks. This paper has the following innovations in quantitative strategy research:\nInstead of using common market factors, this paper uses multiple price-volume factors obtained through Genetic Programming (GP) algorithms and artificial data mining. LightGBM model is used to screen 50 factors, selecting the top 10 most important factors. Traditional quantitative investment models generally use LSTM and CNN models to construct quantitative investment strategies. This paper uses A-share market-wide data and employs a BiLSTM model to select and combine factors to establish a quantitative investment strategy. Backtesting and empirical analysis of this strategy show that it outperforms the market benchmark index (CSI All Share), demonstrating the practical application value of the BiLSTM model in stock price prediction and quantitative investment. 1.4 Research Framework of the Paper This paper conducts research on stock price prediction and quantitative strategies based on deep learning algorithms. The specific research framework of this paper is shown in Fig. 1:\nFig. 1. Research Framework.\nThe specific research framework of this paper is as follows:\nChapter 1 is the introduction. This chapter first introduces the research significance and background of stock price prediction and quantitative strategy research. Then, it reviews the current research status, followed by an explanation of the innovations of this paper compared to existing research, and finally, a brief description of the research framework of this paper.\nChapter 2 is about related theoretical foundations. This chapter introduces the basic theories of deep learning models and quantitative stock selection involved in this research. The deep learning model section sequentially introduces four deep learning models: RNN, LSTM, GRU, and BiLSTM, with a focus on the internal structure of the LSTM model. The quantitative stock selection theory section sequentially introduces the Mean-Variance Model, Capital Asset Pricing Model, Arbitrage Pricing Theory, Multi-Factor Model, Fama-French Three-Factor Model, and Five-Factor Model. This section introduces the history of multi-factor quantitative stock selection from the development context of various financial theories and models.\nChapter 3 is a comparative study of LSTM, GRU, and BiLSTM in stock price prediction. This chapter first introduces the datasets of domestic and international stocks used in the experiment, and then performs data preprocessing steps of normalization and data partitioning. It then describes the network structures, model compilation, and hyperparameter settings of the LSTM, GRU, and BiLSTM models used in this chapter, and conducts experiments to obtain experimental results. Finally, the experimental results are analyzed, and a summary of this chapter is provided.\nChapter 4 is a study on a quantitative investment model based on LightGBM-BiLSTM. This chapter first outlines the experimental steps, and then introduces the stock data and factor data used in the experiment. Subsequently, factors are processed sequentially through missing value handling, outlier removal, factor standardization, and factor neutralization to obtain cleaned factors. Then, LightGBM and BiLSTM are used for factor selection and factor combination, respectively. Finally, a quantitative strategy is constructed based on the obtained model, and backtesting is performed on the quantitative strategy.\nChapter 5 is the conclusion and future directions. This chapter summarizes the main research content of this paper on stock price prediction and quantitative investment strategies. Based on the existing shortcomings of the current research, future research directions are proposed.\nChapter 2 Related Theoretical Foundations 2.1 Deep Learning Models 2.1.1 RNN Recurrent Neural Networks (RNNs) are widely used for sequential data, such as natural language and speech. Daily stock prices and trading information are sequential data, hence many previous studies have used RNNs to predict stock prices. RNNs employ a very simple chain structure of repeating modules, such as a single tanh layer. However, basic RNNs suffer from gradient vanishing issues when the number of layers is excessive. The emergence of LSTM solved this problem. Fig. 2 is an RNN structure diagram.\nFig. 2. RNN Structure Diagram. (Image source: Understanding LSTM Networks)\n2.1.2 LSTM Long Short-Term Memory (LSTM) networks are a special kind of RNN, capable of learning long-term dependencies. They were introduced by Hochreiter \u0026amp; Schmidhuber (1997)$^{[7]}$ and have been refined and popularized by many in subsequent work. Due to their unique design structure, LSTMs are relatively insensitive to gap lengths and solve the gradient vanishing and explosion problems of traditional RNNs. Compared to traditional RNNs and other time series models like Hidden Markov Models (HMMs), LSTMs can better handle and predict important events in time series with very long intervals and delays. Therefore, LSTMs are widely used in machine translation and speech recognition.\nLSTMs are explicitly designed to avoid long-term dependency problems. All recurrent neural networks have the form of a chain of repeating modules of neural networks, but LSTM improves the structure of RNN. Instead of a single neural network layer, LSTM uses a four-layer structure that interacts in a special way.\nFig. 3. LSTM Structure Diagram 1. (Image source: Understanding LSTM Networks)\nFig. 4. LSTM Structure Diagram 2. (Image source: Understanding LSTM Networks)\nAs shown in Fig. 3, black lines are used to represent the transmission of an output vector from one node to the input vector of another node. A neural network layer is a processing module with a $\\sigma$ activation function or a tanh activation function; pointwise operation represents element-wise multiplication between vectors; vector transfer indicates the direction of information flow; concatenate and copy are represented by two black lines merging together and two black lines separating, respectively, to indicate information merging and information copying.\nBelow, we take LSTM as an example to explain its structure in detail.\nForget Gate Fig. 5. Forget Gate Calculation (Image source: Understanding LSTM Networks)\n$$ f_{t} = \\sigma\\left(W_{f} \\cdot \\left[h_{t-1}, x_{t}\\right] + b_{f}\\right) $$Parameter Description:\n$h_{t-1}$: Output from the previous time step $x_{t}$: Input at the current time step $\\sigma$: Sigmoid activation function $W_{f}$: Weight matrix for the forget gate $b_{f}$: Bias vector parameter for the forget gate The first step, as shown in Fig. 5, is to decide what information to discard from the cell state. This process is calculated by the sigmoid function to obtain the value of $f_{t}$ (the range of $f_{t}$ is between 0 and 1, where 0 means completely block, and 1 means completely pass through) to determine whether the cell state $C_{t-1}$ is passed through or partially passed through.\nInput Gate Fig. 6. Input Gate Calculation (Image source: Understanding LSTM Networks)\n$$ \\begin{aligned} i_{t} \u0026= \\sigma\\left(W_{i} \\cdot \\left[h_{t-1}, x_{t}\\right] + b_{i}\\right) \\\\ \\tilde{C}_{t} \u0026= \\tanh\\left(W_{C} \\cdot \\left[h_{t-1}, x_{t}\\right] + b_{C}\\right) \\end{aligned} $$Parameter Description:\n$h_{t-1}$: Output from the previous time step $x_{t}$: Input at the current time step $\\sigma$: Sigmoid activation function $W_{i}$: Weight matrix for the input gate $b_{i}$: Bias vector parameter for the input gate $W_{C}$: Weight matrix for the cell state $b_{C}$: Bias vector parameter for the cell state $\\tanh$: tanh activation function The second step, as shown in Fig. 6, uses a sigmoid function to calculate what information we want to store in the cell state. Next, a $\\tanh$ layer creates a candidate vector $\\tilde{C}_{t}$, which will be added to the cell state.\nFig. 7. Current Cell State Calculation (Image source: Understanding LSTM Networks)\n$$ C_{t} = f_{t} * C_{t-1} + i_{t} * \\tilde{C}_{t} $$Parameter Description:\n$C_{t-1}$: Cell state from the previous time step $\\tilde{C}_{t}$: Temporary cell state $i_{t}$: Value of the input gate $f_{t}$: Value of the forget gate The third step, as shown in Fig. 7, calculates the current cell state $C_t$ by combining the effects of the forget gate and the input gate.\nThe forget gate $f_t$ weights the previous cell state $C_{t-1}$ to discard unnecessary information. The input gate $i_t$ weights the candidate cell state $\\tilde{C}_t$ to decide how much new information to introduce. Finally, the two parts are added together to update and derive the current cell state $C_t$. Output Gate Fig. 8. Output Gate Calculation (Image source: Understanding LSTM Networks)\n$$ \\begin{aligned} o_{t} \u0026= \\sigma\\left(W_{o} \\cdot \\left[h_{t-1}, x_{t}\\right] + b_{o}\\right) \\\\ h_{t} \u0026= o_{t} * \\tanh\\left(C_{t}\\right) \\end{aligned} $$Parameter Description:\n$o_{t}$: Value of the output gate $\\sigma$: Sigmoid activation function $W_{o}$: Weight matrix for the output gate $h_{t-1}$: Output from the previous time step $x_{t}$: Input at the current time step $b_{o}$: Bias vector parameter for the output gate $h_{t}$: Output at the current time step $\\tanh$: tanh activation function $C_{t}$: Cell state at the current time step The fourth step, as shown in Fig. 8, uses a sigmoid function to calculate the value of the output gate. Finally, the cell state $C_{t}$ at this time step is processed by a tanh activation function and multiplied by the value of the output gate $o_{t}$ to obtain the output $h_{t}$ at the current time step.\n2.1.3 GRU K. Cho (2014)$^{[8]}$ proposed the Gated Recurrent Unit (GRU). GRU is mainly simplified and adjusted based on LSTM, merging the original forget gate, input gate, and output gate of LSTM into an update gate and a reset gate. In addition, GRU also merges the cell state and hidden state, thereby reducing the complexity of the model while still achieving performance comparable to LSTM in some tasks.\nThis model can save a lot of time when the training dataset is relatively large and shows better performance on some smaller and less frequent datasets$^{[9][10]}$.\nFig. 9. GRU Structure Diagram (Image source: Understanding LSTM Networks)\n$$ \\begin{aligned} z_{t} \u0026= \\sigma\\left(W_{z} \\cdot \\left[h_{t-1}, x_{t}\\right]\\right) \\\\ r_{t} \u0026= \\sigma\\left(W_{r} \\cdot \\left[h_{t-1}, x_{t}\\right]\\right) \\\\ \\tilde{h}_{t} \u0026= \\tanh\\left(W \\cdot \\left[r_{t} * h_{t-1}, x_{t}\\right]\\right) \\\\ h_{t} \u0026= \\left(1 - z_{t}\\right) * h_{t-1} + z_{t} * \\tilde{h}_{t} \\end{aligned} $$Parameter Description:\n$z_{t}$: Value of the update gate $r_{t}$: Value of the reset gate $W_{z}$: Weight matrix for the update gate $W_{r}$: Weight matrix for the reset gate $\\tilde{h}_{t}$: Temporary output 2.1.4 BiLSTM Bidirectional Long Short-Term Memory (BiLSTM) networks are formed by combining a forward LSTM and a backward LSTM. The BiLSTM model fully utilizes the contextual relationships in both forward and backward temporal directions of time series data, enabling it to learn information with long-term dependencies. Compared to unidirectional LSTM, it can better consider the reverse impact of future data. Fig. 10 is a BiLSTM structure diagram.\nFig. 10. BiLSTM Structure Diagram. (Image source: Baeldung)\n2.2 Quantitative Stock Selection Theory 2.2.1 Mean-Variance Model Quantitative stock selection strategies originated in the 1950s. Markowitz (1952)$^{[11]}$ proposed the Mean-Variance Model. This model not only laid the foundation for modern portfolio theory, quantifying investment risk, but also established a specific model describing risk and expected return. It broke away from the previous situation of qualitative analysis of investment portfolios without quantitative analysis, successfully introducing mathematical models into the field of financial investment.\n$$ \\begin{aligned} \\mathrm{E}\\left(R_{p}\\right) \u0026= \\sum_{i=1}^{n} w_{i} \\mathrm{E}\\left(R_{i}\\right) \\\\ \\sigma_{p}^{2} \u0026= \\sum_{i=1}^{n} \\sum_{j=1}^{n} w_{i} w_{j} \\operatorname{Cov}\\left(R_{i}, R_{j}\\right) = \\sum_{i=1}^{n} \\sum_{j=1}^{n} w_{i} w_{j} \\sigma_{i} \\sigma_{j} \\rho_{ij} \\\\ \\sigma_{i} \u0026= \\sqrt{\\operatorname{Var}\\left(R_{i}\\right)}, \\quad \\rho_{ij} = \\operatorname{Corr}\\left(R_{i}, R_{j}\\right) \\end{aligned} $$$$ \\min \\sigma_{p}^{2} \\quad \\text{subject to} \\quad \\sum_{i=1}^{n} \\mathrm{E}\\left(R_{i}\\right) w_{i} = \\mu_{p}, \\quad \\sum_{i=1}^{n} w_{i} = 1 $$$$ \\begin{aligned} \\Omega \u0026= \\begin{pmatrix} \\sigma_{11} \u0026 \\cdots \u0026 \\sigma_{1n} \\\\ \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ \\sigma_{n1} \u0026 \\cdots \u0026 \\sigma_{nn} \\end{pmatrix} = \\begin{pmatrix} \\operatorname{Var}\\left(R_{1}\\right) \u0026 \\cdots \u0026 \\operatorname{Cov}\\left(R_{1}, R_{n}\\right) \\\\ \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ \\operatorname{Cov}\\left(R_{n}, R_{1}\\right) \u0026 \\cdots \u0026 \\operatorname{Var}\\left(R_{n}\\right) \\end{pmatrix} \\\\ \\Omega^{-1} \u0026= \\begin{pmatrix} v_{11} \u0026 \\cdots \u0026 v_{1n} \\\\ \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ v_{n1} \u0026 \\cdots \u0026 v_{nn} \\end{pmatrix} \\\\ w_{i} \u0026= \\frac{1}{D}\\left(\\mu_{p} \\sum_{j=1}^{n} v_{ij}\\left(C \\mathrm{E}\\left(R_{j}\\right) - A\\right) + \\sum_{j=1}^{n} v_{ij}\\left(B - A \\mathrm{E}\\left(R_{j}\\right)\\right)\\right), \\quad i = 1, \\ldots, n \\end{aligned} $$$$ \\begin{aligned} A \u0026= \\sum_{i=1}^{n} \\sum_{j=1}^{n} v_{ij} \\mathrm{E}\\left(R_{j}\\right), \\quad B = \\sum_{i=1}^{n} \\sum_{j=1}^{n} v_{ij} \\mathrm{E}\\left(R_{i}\\right) \\mathrm{E}\\left(R_{j}\\right), \\quad C = \\sum_{i=1}^{n} \\sum_{j=1}^{n} v_{ij}, \\quad D = BC - A^{2} \u003e 0 \\\\ \\sigma_{p}^{2} \u0026= \\frac{C \\mu_{p}^{2} - 2A \\mu_{p} + B}{D} \\end{aligned} $$Where:\n$\\mathrm{E}\\left(R_{p}\\right)$ and $\\mu_{p}$ are the expected return of portfolio $p$ $\\mathrm{E}\\left(R_{i}\\right)$ is the expected return of asset $i$ $\\sigma_{i}$ is the standard deviation of asset $i$ $\\sigma_{j}$ is the standard deviation of asset $j$ $w_{i}$ is the proportion of asset $i$ in the portfolio $\\sigma_{p}^{2}$ is the variance of portfolio $p$ $\\rho_{ij}$ is the correlation coefficient between asset $i$ and asset $j$ Using the above formulas$^{[12]}$, we can construct an investment portfolio that minimizes non-systematic risk under a certain expected rate of return.\n2.2.2 Capital Asset Pricing Model William Sharpe (1964)$^{[13]}$, John Lintner (1965)$^{[14]}$, and Jan Mossin (1966)$^{[15]}$ proposed the Capital Asset Pricing Model (CAPM). This model posits that the expected return of an asset is related to its risk measure, the $\\beta$ value. Through a simple linear relationship, this model links the expected return of an asset to market risk, making Markowitz (1952)$^{[11]}$\u0026rsquo;s portfolio selection theory more relevant to the real world, and laying a theoretical foundation for the establishment of multi-factor stock selection models.\nAccording to the Capital Asset Pricing Model, for a given asset $i$, the relationship between its expected return and the expected return of the market portfolio can be expressed as:\n$$ E\\left(r_{i}\\right) = r_{f} + \\beta_{im}\\left[E\\left(r_{m}\\right) - r_{f}\\right] $$Where:\n$E\\left(r_{i}\\right)$ is the expected return of asset $i$ $r_{f}$ is the risk-free rate $\\beta_{im}$ (Beta) is the systematic risk coefficient of asset $i$, $\\beta_{im} = \\frac{\\operatorname{Cov}\\left(r_{i}, r_{m}\\right)}{\\operatorname{Var}\\left(r_{m}\\right)}$ $E\\left(r_{m}\\right)$ is the expected return of the market portfolio $m$ $E\\left(r_{m}\\right) - r_{f}$ is the market risk premium 2.2.3 Arbitrage Pricing Theory and Multi-Factor Model Ross (1976)$^{[16]}$ proposed the Arbitrage Pricing Theory (APT). This theory argues that arbitrage behavior is the decisive factor in forming market equilibrium prices. By introducing a series of factors in the return formation process to construct linear correlations, it overcomes the limitations of the Capital Asset Pricing Model (CAPM) and provides important theoretical guidance for subsequent researchers.\nArbitrage Pricing Theory is considered the theoretical basis of the Multi-Factor Model (MFM), an important component of asset pricing models, and one of the cornerstones of asset pricing theory. The general form of the multi-factor model is:\n$$ r_{j} = a_{j} + \\lambda_{j1} f_{1} + \\lambda_{j2} f_{2} + \\cdots + \\lambda_{jn} f_{n} + \\delta_{j} $$Where:\n$r_{j}$ is the return of asset $j$ $a_{j}$ is a constant for asset $j$ $f_{n}$ is the systematic factor $\\lambda_{jn}$ is the factor loading $\\delta_{j}$ is the random error 2.2.4 Fama-French Three-Factor Model and Five-Factor Model Fama (1992) and French (1992)$^{[17]}$ used a combination of cross-sectional regression and time series methods and found that the $\\beta$ value of the stock market could not explain the differences in returns of different stocks, while market capitalization, book-to-market ratio, and price-to-earnings ratio of listed companies could significantly explain the differences in stock returns. They argued that excess returns are compensation for risk factors not reflected by $\\beta$ in CAPM, and thus proposed the Fama-French Three-Factor Model. The three factors are:\nMarket Risk Premium Factor (Market Risk Premium)\nRepresents the overall systematic risk of the market, i.e., the difference between the expected return of the market portfolio and the risk-free rate. Measures the excess return investors expect for bearing systematic risk (risk that cannot be eliminated through diversification). Calculated as: $$ \\text{Market Risk Premium} = E(R_m) - R_f $$ where $E(R_m)$ is the expected market return, and $R_f$ is the risk-free rate. Size Factor (SMB: Small Minus Big)\nRepresents the return difference between small-cap stocks and large-cap stocks. Small-cap stocks are generally riskier, but historical data shows that their expected returns tend to be higher than those of large-cap stocks. Calculated as: $$ SMB = R_{\\text{Small}} - R_{\\text{Big}} $$ reflecting the market\u0026rsquo;s compensation for the additional risk premium of small-cap stocks. Value Factor (HML: High Minus Low)\nReflects the return difference between high book-to-market ratio stocks (i.e., \u0026ldquo;value stocks\u0026rdquo;) and low book-to-market ratio stocks (i.e., \u0026ldquo;growth stocks\u0026rdquo;). Stocks with high book-to-market ratios are usually priced lower (undervalued by the market), but may achieve higher returns in the long run. Calculated as: $$ HML = R_{\\text{High}} - R_{\\text{Low}} $$ Stocks with low book-to-market ratios may be overvalued due to overly optimistic market expectations. This model concretizes the factors in the APT model and concludes that investing in small-cap, high-growth stocks has the characteristics of high risk and high return. The Fama-French Three-Factor Model is widely used in the analysis and practice of modern investment behavior.\nSubsequently, Fama (2015) and French (2015)$^{[18]}$ extended the three-factor model, adding the following two factors:\nProfitability Factor (RMW: Robust Minus Weak)\nReflects the return difference between highly profitable companies and less profitable companies. Companies with strong profitability (high ROE, net profit margin) are more likely to provide stable and higher returns. Calculated as: $$ RMW = R_{\\text{Robust}} - R_{\\text{Weak}} $$ Investment Factor (CMA: Conservative Minus Aggressive)\nReflects the return difference between conservative investment companies and aggressive investment companies. Aggressive companies (rapidly expanding, high capital expenditure) are usually accompanied by greater operational risks, while conservative companies (relatively stable capital expenditure) show higher stability and returns. Calculated as: $$ CMA = R_{\\text{Conservative}} - R_{\\text{Aggressive}} $$ The Fama-French Three-Factor Model formula is:\n$$ R_i - R_f = \\alpha_i + \\beta_{i,m} \\cdot (R_m - R_f) + \\beta_{i,SMB} \\cdot SMB + \\beta_{i,HML} \\cdot HML + \\epsilon_i $$The Fama-French Five-Factor Model formula is:\n$$ R_i - R_f = \\alpha_i + \\beta_{i,m} \\cdot (R_m - R_f) + \\beta_{i,SMB} \\cdot SMB + \\beta_{i,HML} \\cdot HML + \\beta_{i,RMW} \\cdot RMW + \\beta_{i,CMA} \\cdot CMA + \\epsilon_i $$Where:\n$R_i$: Expected return of stock $i$ $R_f$: Risk-free rate of return $R_m$: Expected return of the market portfolio $R_m - R_f$: Market risk premium factor $SMB$: Return of small-cap stocks minus large-cap stocks $HML$: Return of high book-to-market ratio stocks minus low book-to-market ratio stocks $RMW$: Return of high profitability stocks minus low profitability stocks $CMA$: Return of conservative investment stocks minus aggressive investment stocks $\\beta_{i,*}$: Sensitivity of stock $i$ to the corresponding factor $\\epsilon_i$: Regression residual 2.2.5 Model Comparison Table The following table summarizes the core content and factor sources of the Mean-Variance Model, Capital Asset Pricing Model (CAPM), Arbitrage Pricing Theory (APT), and Fama-French Models:\nModel Core Content Factor Source Mean-Variance Model Foundation of portfolio theory, optimizes portfolio through expected returns and covariance matrix. Expected returns and covariance matrix of assets in portfolio Capital Asset Pricing Model (CAPM) Explains asset returns through market risk factor ($\\beta$), laying the theoretical foundation for multi-factor models. Market factor $\\beta$ Arbitrage Pricing Theory (APT) Multi-factor framework, allows multiple economic variables to explain asset returns, e.g., inflation rate, interest rate. Multiple factors (macroeconomic variables, e.g., inflation rate, interest rate) Fama-French Three-Factor Model Adds size factor and book-to-market ratio factor, improving the explanatory power of asset returns. Market factor, SMB (size factor), HML (book-to-market ratio factor) Fama-French Five-Factor Model Adds profitability factor and investment factor on the basis of the three-factor model, further improving asset pricing model. Market factor, SMB, HML, RMW (profitability factor), CMA (investment factor) The following table summarizes the advantages and disadvantages of these models:\nModel Advantages Disadvantages Mean-Variance Model Provides a systematic portfolio optimization method, laying the foundation for modern investment theory. Only optimizes for return and variance, does not explicitly specify the source of risk compensation. Capital Asset Pricing Model (CAPM) Simple and easy to use, explains return differences through market risk, provides a theoretical basis for multi-factor models. Assumes a single factor (market risk) determines returns, ignores other systematic risk factors. Arbitrage Pricing Theory (APT) Allows multiple factors to explain asset returns, reduces reliance on single-factor assumptions, more flexible. Does not specify concrete factors, lower operability, only provides a framework. Fama-French Three-Factor Model Significantly improves the explanatory power of asset returns by adding size factor and book-to-market ratio factor. Ignores other factors such as profitability and investment behavior. Fama-French Five-Factor Model More comprehensively captures key variables affecting asset returns by adding profitability factor and investment factor on the basis of the three-factor model. Higher model complexity, high data requirements, may still miss some potential factors. Chapter 3 Comparative Study of LSTM, GRU, and BiLSTM in Stock Price Prediction 3.1 Introduction to Experimental Data Many scholars, both domestically and internationally, focus their research on their own country\u0026rsquo;s stock indices, with relatively less research on individual stocks in different markets. Furthermore, few studies compare LSTM, GRU, and BiLSTM models directly. Therefore, this paper selects Shanghai Pudong Development Bank (SPD Bank, code 600000) in the domestic A-share market and International Business Machines Corporation (IBM) in the US stock market for research. This approach allows for a more accurate comparison of the three models used. For SPD Bank, stock data from January 1, 2008, to December 31, 2020, is used, totaling 3114 valid data points, sourced from the Tushare financial big data platform. We select six features from this dataset for the experiment: date, open price, close price, high price, low price, and volume. For the SPD Bank dataset, all five features except date (used as a time series index) are used as independent variables. For IBM, stock data from January 2, 1990, to November 15, 2018, is used, totaling 7278 valid data points, sourced from Yahoo Finance. We select seven features from this dataset for the experiment: date, open price, high price, low price, close price, adjusted close price (Adj Close), and volume. For the IBM dataset, all six features except date (used as a time series index) are used as independent variables. In this experiment, the closing price (close) is chosen as the variable to be predicted. Tables 3.1.1 and 3.1.2 show partial data from the two datasets.\n3.1.1 Partial Display of SPD Bank Dataset date open close high low volume code 2008-01-02 9.007 9.101 9.356 8.805 131583.90 600000 2008-01-03 9.007 8.645 9.101 8.426 211346.56 600000 2008-01-04 8659 9.009 9.111 8.501 139249.67 600000 2008-01-07 8.970 9.515 9.593 8.953 228043.01 600000 2008-01-08 9.551 9.583 9.719 9.517 161255.31 600000 2008-01-09 9.583 9.663 9.772 9.432 102510.92 600000 2008-01-10 9.701 9.680 9.836 9.602 217966.25 600000 2008-01-11 9.670 10.467 10.532 9.670 231544.21 600000 2008-01-14 10.367 10.059 10.433 10.027 142918.39 600000 2008-01-15 10.142 10.051 10.389 10.006 161221.52 600000 Data Source: Tushare\n3.1.2 Partial Display of IBM Dataset Date Open High Low Close Adj Close Volume 1990-01-02 23.6875 24.5313 23.6250 24.5000 6.590755 7041600 1990-01-03 24.6875 24.8750 24.5938 24.7188 6.649599 9464000 1990-01-04 24.7500 25.0938 24.7188 25.0000 6.725261 9674800 1990-01-05 24.9688 25.4063 24.8750 24.9375 6.708448 7570000 1990-01-08 24.8125 25.2188 24.8125 25.0938 6.750481 4625200 1990-01-09 25.1250 25.3125 24.8438 24.8438 6.683229 7048000 1990-01-10 24.8750 25.0000 24.6563 24.7500 6.658009 5945600 1990-01-11 24.8750 25.0938 24.8438 24.9688 6.716855 5905600 1990-01-12 24.6563 24.8125 24.4063 24.4688 6.582347 5390800 1990-01-15 24.4063 24.5938 24.3125 24.5313 6.599163 4035600 Data Source: Yahoo Finance\n3.2 Experimental Data Preprocessing 3.2.1 Data Normalization In the experiment, there are differences in units and magnitudes among various features. For example, the magnitude difference between stock prices and trading volume is huge, which will affect the final prediction results of our experiment. Therefore, we use the MinMaxScaler method from the sklearn.preprocessing library to scale the features of the data to between 0 and 1. This can not only improve the model accuracy but also increase the model convergence speed. The normalization formula is:\n$$ x^{\\prime}=\\frac{x-\\min (x)}{\\max (x)-\\min (x)} $$where $x^{\\prime}$ is the normalized data, $x$ is the original data, $\\min (x)$ is the minimum value of the original dataset, and $\\max (x)$ is the maximum value of the original dataset. After obtaining the prediction results in our experimental process, we also need to denormalize the data before we can perform stock price prediction and model evaluation.\n3.2.2 Data Partitioning Here, the entire experimental datasets of SPD Bank and IBM are input respectively, and the timestep of the recurrent kernel is set to 60 for both, with the number of input features per timestep being 5 and 6, respectively. This allows inputting data from the previous 60 trading days to predict the closing price on the 61st day. This makes our dataset meet the input requirements of the three neural network models to be compared later, which are the number of samples, the number of recurrent kernel unfolding steps, and the number of input features per timestep. Then, we divide the normalized SPD Bank dataset into training, validation, and test sets in a ratio of 2488:311:255. The normalized IBM dataset is divided into training, validation, and test sets in a ratio of 6550:364:304. We partition out a validation set here to facilitate adjusting the hyperparameters of the models to optimize each model before comparison.\n3.3 Model Network Structure The network structures of each model set in this paper through a large number of repeated experiments are shown in the table below. The default tanh and linear activation functions of recurrent neural networks are used between layers, and Dropout is added to prevent overfitting. The dropout rate is set to 0.2. The number of neurons in each recurrent layer of LSTM and GRU is 50, and the number of neurons in the recurrent layer of BiLSTM is 100. Each model of LSTM, GRU, and BiLSTM adopts four layers of LSTM, GRU, BiLSTM, and one fully connected layer, with a Dropout set between each network layer.\n3.3.1 LSTM Network Structure for IBM Layer(type) Output Shape Param# lstm_1 (LSTM) (None, 60, 50) 11400 dropout_1 (Dropout) (None, 60, 50) 0 lstm_2 (LSTM) (None, 60, 50) 20200 dropout_2 (Dropout) (None, 60, 50) 0 lstm_3 (LSTM) (None, 60, 50) 20200 dropout_3 (Dropout) (None, 60, 50) 0 lstm_4 (LSTM) (None, 50) 20200 dropout_4 (Dropout) (None, 50) 0 dense_1 (Dense) (None, 1) 51 Total params: 72,051\nTrainable params: 72,051\nNon-trainable params: 0\n3.3.2 GRU Network Structure for IBM Layer(type) Output Shape Param# gru_1 (GRU) (None, 60, 50) 8550 dropout_1 (Dropout) (None, 60, 50) 0 gru_2 (GRU) (None, 60, 50) 15150 dropout_2 (Dropout) (None, 60, 50) 0 gru_3 (GRU) (None, 60, 50) 15150 dropout_3 (Dropout) (None, 60, 50) 0 gru_4 (GRU) (None, 50) 15150 dropout_4 (Dropout) (None, 50) 0 dense_1 (Dense) (None, 1) 51 Total params: 54,051\nTrainable params: 54,051\nNon-trainable params: 0\n3.3.3 BiLSTM Network Structure for IBM Layer(type) Output Shape Param# bidirectional_1 (Bidirection) (None, 60, 100) 22800 dropout_1 (Dropout) (None, 60, 100) 0 bidirectional_2 (Bidirection) (None, 60, 100) 60400 dropout_2 (Dropout) (None, 60, 100) 0 bidirectional_3 (Bidirection) (None, 60, 100) 60400 dropout_3 (Dropout) (None, 60, 100) 0 bidirectional_4 (Bidirection) (None, 100) 60400 dropout_4 (Dropout) (None, 100) 0 dense_1 (Dense) (None, 1) 101 Total params: 204,101\nTrainable params: 204,101\nNon-trainable params: 0\n3.4 Model Compilation and Hyperparameter Settings In this paper, after continuous hyperparameter tuning with the goal of minimizing the loss function on the validation set, the following hyperparameters are selected for the three models of SPD Bank: epochs=100, batch_size=32; and for the three models of IBM: epochs=50, batch_size=32. The optimizer used is Adaptive Moment Estimation (Adam)$^{[19]}$. The default values in its keras package are used, i.e., lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, and decay=0.0. The loss function is Mean Squared Error (MSE).\nParameter Explanation:\nlr: Learning rate beta_1: Exponential decay rate for the first moment estimate beta_2: Exponential decay rate for the second moment estimate epsilon: Fuzz factor decay: Learning rate decay value after each update 3.5 Experimental Results and Analysis First, let\u0026rsquo;s briefly introduce the evaluation metrics used for the models. The calculation formulas are as follows:\nMean Squared Error (MSE): $$ M S E=\\frac{1}{n} \\sum_{i=1}^{n}\\left(Y_{i}-\\hat{Y}_{i}\\right)^{2} $$ Root Mean Squared Error (RMSE): $$ R M S E=\\sqrt{\\frac{1}{n} \\sum_{i=1}^{n}\\left(Y_{i}-\\hat{Y}_{i}\\right)^{2}} $$ Mean Absolute Error (MAE): $$ M A E=\\frac{1}{n} \\sum_{i=1}^{n}\\left|Y_{i}-\\hat{Y}_{i}\\right| $$ \\( R^2 \\) (R Squared): $$ \\begin{gathered} \\bar{Y}=\\frac{1}{n} \\sum_{i=1}^{n} Y_{i} \\\\ R^{2}=1-\\frac{\\sum_{i=1}^{n}\\left(Y_{i}-\\hat{Y}_{i}\\right)^{2}}{\\sum_{i=1}^{n}\\left(Y_{i}-\\bar{Y}\\right)^{2}} \\end{gathered} $$Where: $n$ is the number of samples, $Y_{i}$ is the actual closing price of the stock, $\\hat{Y}_{i}$ is the predicted closing price of the stock, and $\\bar{Y}$ is the average closing price of the stock. The smaller the MSE, RMSE, and MAE, the more accurate the model. The larger the \\( R^2 \\), the better the goodness of fit of the model coefficients.\n3.5.1 Experimental Results for SPD Bank LSTM GRU BiLSTM MSE 0.059781 0.069323 0.056454 RMSE 0.244501 0.263292 0.237601 MAE 0.186541 0.202665 0.154289 R-squared 0.91788 0.896214 0.929643 Comparing the evaluation metrics of the three models, we can find that on the SPD Bank test set, the MSE, RMSE, and MAE of the BiLSTM model are smaller than those of the LSTM and GRU models, while the R-Squared is larger than those of the LSTM and GRU models. By comparing RMSE, we find that BiLSTM has a 2.90% performance improvement over LSTM and a 10.81% performance improvement over GRU on the validation set.\n3.5.2 Experimental Results for IBM LSTM GRU BiLSTM MSE 18.01311 12.938584 11.057501 RMSE 4.244186 3.597024 3.325282 MAE 3.793223 3.069033 2.732075 R-squared 0.789453 0.851939 0.883334 Comparing the evaluation metrics of the three models, we can find that on the IBM test set, the MSE, RMSE, and MAE of the BiLSTM model are smaller than those of the LSTM and GRU models, while the R-Squared is larger than those of the LSTM and GRU models. By comparing RMSE, we find that BiLSTM has a 27.63% performance improvement over LSTM and an 8.17% performance improvement over GRU on the validation set.\n3.6 Chapter Summary This chapter first introduced the SPD Bank and IBM datasets and the features used in the experiment. Then, it performed preprocessing steps of data normalization and data partitioning on the datasets. It also detailed the network structures and hyperparameters of the LSTM, GRU, and BiLSTM models used in the experiment. Finally, it obtained the loss function images and a series of fitting graphs for each model. By comparing multiple evaluation metrics and fitting images of the models, it is concluded that the BiLSTM model can better predict stock prices, laying a foundation for our next chapter\u0026rsquo;s research on the LightGBM-BiLSTM quantitative investment strategy.\nChapter 4 Research on Quantitative Investment Model Based on LightGBM-BiLSTM 4.1 Experimental Steps Fig. 11. LightGBM-BiLSTM Diagram.\nAs shown in Fig. 11, this experiment first selects 50 factors from the factor library. Then, it performs factor cleaning steps of outlier removal, standardization, and missing value imputation on the factors sequentially. Next, the LightGBM model is used for factor selection, and the top ten factors with the highest importance are selected as the factors for this cross-sectional selection. Subsequently, a BiLSTM model is used to establish a multi-factor model, and finally, backtesting analysis is performed.\n4.2 Experimental Data The market data used in this paper comes from Tushare. The specific features of the dataset are shown in the table below.\n4.2.1 Features Included in the Stock Dataset Name Type Description ts_code str Stock code trade_date str Trading date open float Open price high float High price low float Low price close float Close price pre_close float Previous close price change float Change amount pct_chg float Change percentage (unadjusted) vol float Volume (in hands) amount float Turnover (in thousands of CNY) The A-share market-wide daily dataset contains 5,872,309 rows of data, i.e., 5,872,309 samples. As shown in Table 4.2.1, the A-share market-wide daily dataset has the following 11 features, in order: stock code (ts_code), trading date (trade_date), open price (open), high price (high), low price (low), close price (close), previous close price (pre_close), change amount (change), turnover rate (turnover_rate), turnover amount (amount), total market value (total_mv), and adjustment factor (adj_factor).\n4.2.2 Partial Display of A-Share Market-Wide Daily Dataset ts_code trade_date open high low close pre_close change vol amount 600613.SH 20120104 8.20 8.20 7.84 7.86 8.16 -0.30 4762.98 3854.1000 600690.SH 20120104 9.00 9.17 8.78 8.78 8.93 -0.15 142288.41 127992.6050 300277.SZ 20120104 22.90 22.98 20.81 20.88 22.68 -1.80 12212.39 26797.1370 002403.SZ 20120104 8.87 8.90 8.40 8.40 8.84 -0.441 10331.97 9013.4317 300179.SZ 20120104 19.99 20.32 19.20 19.50 19.96 -0.46 1532.31 3008.0594 600000.SH 20120104 8.54 8.56 8.39 8.41 8.49 -0.08 342013.79 290229.5510 300282.SZ 20120104 22.90 23.33 21.02 21.02 23.35 -2.33 38408.60 86216.2356 002319.SZ 20120104 9.74 9.95 9.38 9.41 9.73 -0.32 4809.74 4671.4803 601991.SH 20120104 5.17 5.39 5.12 5.25 5.16 0.09 145268.38 76547.7490 000780.SZ 20120104 10.42 10.49 10.00 10.00 10.30 -0.30 20362.30 20830.1761 [5872309 rows x 11 columns]\nThe CSI All Share daily dataset contains 5,057 rows of data, i.e., 5,057 samples. As shown in Table 4.2.2, the CSI All Share daily dataset has the following 7 features, in order: trading date (trade_date), open price (open), high price (high), low price (low), close price (close), volume (volume), and previous close price (pre_close).\n4.2.3 Partial Display of CSI All Share Daily Dataset trade_date open high low close volume pre_close 2006-11-24 1564.3560 1579.3470 1549.9790 1576.1530 7.521819e+09 1567.0910 2006-11-27 1574.1130 1598.7440 1574.1130 1598.7440 7.212786e+09 1581.1530 2006-11-28 1597.7200 1604.7190 1585.3620 1596.8400 7.025637e+09 1598.7440 2006-11-29 1575.3030 1620.2870 1575.3030 1617.9880 7.250354e+09 1596.8400 2006-11-30 1621.4280 1657.3230 1621.4280 1657.3230 9.656888e+09 1617.9880 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 2020-11-11 5477.8870 5493.5867 5422.9110 5425.8017 5.604086e+10 5494.1042 2020-11-12 5439.2296 5454.3452 5413.9659 5435.1379 4.594251e+10 5425.8017 2020-11-13 5418.2953 5418.3523 5364.2031 5402.7702 4.688916e+10 5435.1379 2020-11-16 5422.3565 5456.7264 5391.9232 5456.7264 5.593672e+10 5402.7702 2020-11-17 5454.0696 5454.0696 5395.6052 5428.0765 5.857009e+10 5456.7264 [5057 rows x 7 columns]\nTable 4.2.4 below shows partial data of the original factors. After sequentially going through the four factor cleaning steps of missing value imputation, outlier removal, factor standardization, and factor neutralization mentioned above, partial data of the cleaned factors are obtained as shown in Table 4.2.5.\n4.2.4 Original Factor Data trade_date sec_code ret factor_0 factor_1 factor_2 factor_3 factor_4 factor_5 factor_6 \u0026hellip; 2005-01-04 600874.SH 0.001684 NaN 9.445412 9.445412 9.445408 -1.00 NaN 12651.124023 \u0026hellip; 2005-01-04 000411.SZ 0.021073 NaN 5.971262 5.971262 5.971313 0.38 NaN 392.124298 \u0026hellip; 2005-01-04 000979.SZ 0.021207 NaN 6.768918 6.768918 6.768815 -1.45 NaN 870.587585 \u0026hellip; 2005-01-04 000498.SZ 0.030220 NaN 8.852752 8.852752 8.852755 0.55 NaN 6994.011719 \u0026hellip; 2005-01-04 600631.SH 0.015699 NaN 9.589897 9.589897 9.589889 -1.70 NaN 14616.806641 \u0026hellip; 4.2.5 Cleaned Factor Data sec_code trade_date ret factor_0 factor_1 factor_2 factor_3 factor_4 factor_5 factor_6 \u0026hellip; 000001.SZ 2005-01-04 -1.58653 0.01545 1.38306 1.38306 1.38306 0.13392 0.01545 1.38564 \u0026hellip; 000002.SZ 2005-01-04 1.36761 -0.44814 1.69728 1.69728 1.69728 1.04567 -0.44814 1.69728 \u0026hellip; 000004.SZ 2005-01-04 0.32966 -1.41654 -0.13907 -0.13907 -0.13907 -0.34769 -1.41654 -0.13650 \u0026hellip; 000005.SZ 2005-01-04 0.61297 -1.13066 1.05339 1.05339 1.05339 -1.20020 -1.13066 1.05597 \u0026hellip; 000006.SZ 2005-01-04 -0.35542 1.67667 -0.07726 -0.07726 -0.07726 1.55820 1.67667 -0.07469 \u0026hellip; 4.2.6 Factor Data Construction of Price-Volume Factors This paper uses the following method to construct price-volume factors. There are two basic elements for constructing price-volume factors: first, basic fields, and second, operators. As shown in Table 4.2.1, basic fields include daily frequency high price, low price, open price, close price, previous day\u0026rsquo;s close price, volume, change percentage, turnover rate, turnover amount, total market value, and adjustment factor.\n4.2.7 Basic Field Table No. Field Name Meaning high High Price Highest price in intraday transactions low Low Price Lowest price in intraday transactions open Open Price Price at which the call auction concludes close Close Price Price of the last transaction of the day pre_close Previous Close Price Price of the last transaction of the previous day vol Volume Number of shares traded throughout the day pct_chg Change Percentage Percentage change of the security for the day turnover_rate Turnover Rate Turnover rate of the security for the day amount Turnover Amount Total value of transactions for the day total_mv Total Market Value Total value of the stock, calculated by total shares outstanding multiplied by the current stock price adj_factor Adjustment Factor Ratio for adjusting for dividends and splits This paper obtains the operator list shown in the table below through the basic operator set provided by gplearn and some self-defined special operators.\n4.2.8 Operator List Operator Name Definition add(x, y) Sum \\( x + y\\); element-wise operation \\(\\operatorname{div}(x, y)\\) Division \\( x / y\\); element-wise operation \\(\\operatorname{mul}(x, y)\\) Multiplication \\( x \\cdot y\\); element-wise operation \\(\\operatorname{sub}(x, y)\\) Subtraction \\( x - y\\); element-wise operation neg(x) Negative \\(-x\\); element-wise operation \\(\\log(x)\\) Logarithm \\(\\log(x)\\); element-wise operation max(x, y) Maximum Larger value between \\(x\\) and \\(y\\); element-wise operation \\(\\min(x, y)\\) Minimum Smaller value between \\(x\\) and \\(y\\); element-wise operation delta_d(x) d-day Difference Current day\u0026rsquo;s \\(x\\) value minus \\(x\\) value \\(d\\) days ago; time series operation delay_d(x) d-day Delay \\(x\\) value \\(d\\) days ago; time series operation Corr_d(x, y) d-day Correlation Correlation between \\(x\\) values and \\(y\\) values over \\(d\\) days; time series operation Max_d(x) d-day Maximum Maximum value of \\(x\\) over \\(d\\) days; time series operation Min_d(x) d-day Minimum Minimum value of \\(x\\) over \\(d\\) days; time series operation sort_d(x) d-day Rank Rank of \\(x\\) values over \\(d\\) days; time series operation Argsortmin_d(x) d-day Minimum Position Position of the minimum value of \\(x\\) over \\(d\\) days; time series operation Argsortmax_d(x) d-day Maximum Position Position of the maximum value of \\(x\\) over \\(d\\) days; time series operation \\(\\operatorname{inv}(x)\\) Inverse \\( 1 / x\\); element-wise operation Std_d(x) d-day Standard Deviation Standard deviation of \\(x\\) values over \\(d\\) days; time series operation abs(x) Absolute Value \\(\\lvert x\\rvert\\); element-wise operation 4.2.9 Genetic Programming The core idea of Genetic Programming (GP) is to use evolutionary algorithms to automatically \u0026ldquo;evolve\u0026rdquo; factor expressions with strong predictive power in the vast search space composed of operators and basic fields. For factor mining in this paper, the main goal of GP is to search and find those factors that can better predict future stock returns from all possible expressions that can be combined from the basic fields in Table 4.2.7 and the operators in Table 4.2.8. The core process of GP can be divided into the following steps:\nInitialization Define Operator Set and Basic Fields\nOperator set (operators) as shown in Table 4.2.8, including operations such as addition, subtraction, multiplication, division, logarithm, absolute value, delay, moving maximum/minimum, moving correlation coefficient, etc. Basic fields (terminals) as shown in Table 4.2.7, including open price, close price, high price, low price, volume, adjustment factor, etc. These operators and basic fields can be regarded as \u0026ldquo;nodes\u0026rdquo; in the factor expression tree, where basic fields are leaf nodes (terminal nodes), and operators are internal nodes. Randomly Generate Initial Population\nIn the initialization phase, based on the given operator set and field set, a series of factor expressions (which can be represented as several syntax trees or expression trees) are randomly \u0026ldquo;spliced\u0026rdquo; to form an initial population. For example, it may randomly generate \\[ \\text{Factor 1}: \\mathrm{Max\\_5}\\bigl(\\mathrm{add}(\\mathrm{vol}, \\mathrm{close})\\bigr), \\quad \\text{Factor 2}: \\mathrm{sub}\\bigl(\\mathrm{adj\\_factor}, \\mathrm{neg}(\\mathrm{turnover\\_rate})\\bigr), \\dots \\] Each factor expression will correspond to an individual. Fitness Function Measure Factor\u0026rsquo;s Predictive Ability\nFor each expression (individual), we need to evaluate its predictive ability for future returns or other objectives. Specifically, we can calculate the correlation coefficient (IC) or a more comprehensive indicator IR (Information Ratio) between the next period\u0026rsquo;s stock return \\( r^{T+1} \\) and the current period\u0026rsquo;s factor exposure \\( x_k^T \\) to measure it. Set Objective\nIf we want the factor to have a higher correlation (IC), we can set the fitness function to \\(\\lvert \\rho(x_k^T, r^{T+1})\\rvert\\); If we want the factor to have a higher IR, we can set the fitness function to the IR value. The higher the factor IC or IR, the higher the \u0026ldquo;fitness\u0026rdquo; of the expression. \\[ \\text{Fitness} \\bigl(F(x)\\bigr) \\;=\\; \\begin{cases} \\lvert \\rho(x_k^T, r^{T+1})\\rvert \\quad \u0026\\text{(Maximize IC)},\\\\[6pt] \\mathrm{IR}(x_k^T) \\quad \u0026\\text{(Maximize IR)}. \\end{cases} \\] where \\(\\rho(\\cdot)\\) represents the correlation coefficient, and \\(\\mathrm{IR}(\\cdot)\\) is the IR indicator.\nSelection, Crossover, and Mutation Selection\nBased on the results of the fitness function, expressions with high factor fitness are \u0026ldquo;retained\u0026rdquo; or \u0026ldquo;bred\u0026rdquo;, while expressions with lower fitness are eliminated. This is similar to \u0026ldquo;survival of the fittest\u0026rdquo; in biological evolution. Crossover\nRandomly select a part of the \u0026ldquo;nodes\u0026rdquo; of several expressions with higher fitness (parents) for exchange, so as to obtain new expressions (offspring). In the expression tree structure, subtree A and subtree B can be interchanged to generate new offspring expressions. For example, if a subtree of expression tree \\(\\mathrm{FactorA}\\) is exchanged with the corresponding subtree of expression tree \\(\\mathrm{FactorB}\\), two new expressions are generated. Mutation\nRandomly change some nodes of the expression with a certain probability, such as: Replacing the operator of the node (for example, changing \\(\\mathrm{add}\\) to \\(\\mathrm{sub}\\)), Replacing the basic field of the terminal node (for example, changing \\(\\mathrm{vol}\\) to \\(\\mathrm{close}\\)), Or randomly changing operation parameters (such as moving window length, smoothing factor, etc.). Mutation can increase the diversity of the population and avoid premature convergence or falling into local optima. Iterative Evolution Iterative Execution\nRepeatedly execute selection, crossover, and mutation operations for multiple generations. Each generation produces a new population of factor expressions and evaluates their fitness. Convergence and Termination\nWhen evolution reaches a predetermined stopping condition (such as the number of iterations, fitness threshold, etc.), the algorithm terminates. Usually, we will select several factor expressions with higher final fitness and regard them as the evolution results. Mathematical Representation: Searching for Optimal Factor Expressions Abstracting the above process into the following formula, the factor search objective can be simply expressed as:\n\\[ F(x) \\;=\\; \\mathrm{GP}\\bigl(\\{\\text{operators}\\}, \\{\\text{terminals}\\}\\bigr), \\] indicating that a function \\(F(x)\\) is searched through the GP algorithm on a given operator set (operators) and basic field set (terminals). From the perspective of optimization, we hope to find:\n\\[ \\max_{F} \\bigl\\lvert \\rho(F^T, r^{T+1}) \\bigr\\rvert \\quad \\text{or} \\quad \\max_{F} \\; \\mathrm{IR}\\bigl(F\\bigr), \\] where\n\\(\\rho(\\cdot)\\) represents the correlation coefficient (IC) between the factor and the next period\u0026rsquo;s return, \\(\\mathrm{IR}(\\cdot)\\) represents the IR indicator of the factor. In practical applications, we will give a backtesting period, score the candidate factors of each generation (IC/IR evaluation), and continuously \u0026ldquo;evolve\u0026rdquo; better factors through the iterative process of selection, crossover, and mutation.\nThrough the above steps, we can finally automatically mine a batch of factor expressions that have strong predictive power for future returns and good robustness (such as higher IR) in the vast search space of operator combinations and basic field combinations.\n4.2.10 Partially Mined Factors Factor Name Definition 0 Max＿25(add(turnover_rate, vol)) 1 Max＿30(vol) 2 Max＿25(turnover_rate) 3 Max＿35(add(vol, close)) 4 Max＿30(turnover_rate) 5 sub(Min＿20(neg(pre_close)), div(vol, adj_factor)) 6 Max＿60(max(vol, adj_factor)) 7 Max＿50(amount) 8 div(vol, neg(close)) 9 min(ArgSortMin＿25(pre_close), neg(vol)) 10 neg(max(vol, turnover_rate)) 11 mul(amount, neg(turnover_rate)) 12 inv(add(ArgSortMax＿40(change), inv(pct_chg))) 13 Std＿40(inv(abs(sub(mul(total_mv, change), min(adj_factor, high)))) 14 div(log(total_mv),amount) 15 div(neg(Max＿5(amount)), Min＿20(ArgSort＿60(high))) 16 Corr＿30(inv(abs(sub(mul(total_mv, change), min(adj_factor, high)))), add(log(Max＿10(pre_close)), high)) 17 ArgSort＿60(neg(turnover_rate)) \u0026hellip; \u0026hellip; These factors are all obtained by combining from the operator list (Table 4.2.8) and the basic field list (Table 4.2.7) through genetic programming and have different mathematical expressions.\nFactor Validity Test After we get the mined factors, we need to test the validity of the factors. Common test indicators are Information Coefficient (IC) and Information Ratio (IR).\nInformation Coefficient (IC) describes the linear correlation between the next period\u0026rsquo;s return rate of the selected stocks and the current period\u0026rsquo;s factor exposure, which can reflect the robustness of the factor in predicting returns. Information Ratio (IR) is the ratio of the mean of excess returns to the standard deviation of excess returns. The information ratio is similar to the Sharpe ratio. The main difference is that the Sharpe ratio uses the risk-free return as a benchmark, while the information ratio uses a risk index as a benchmark. The Sharpe ratio helps to determine the absolute return of a portfolio, and the information ratio helps to determine the relative return of a portfolio. After we calculate the IC, we can calculate the IR based on the IC value. When the IR is greater than 0.5, the factor has a strong ability to stably obtain excess returns. In actual calculation, the \\( \\mathrm{IC} \\) value of factor \\(k\\) generally refers to the correlation coefficient between the exposure \\( x_k^T \\) of factor \\(k\\) in period \\(T\\) of the selected stocks and the return rate \\( r^{T+1} \\) of the selected stocks in period \\(T+1\\); the \\( \\mathrm{IR} \\) value of factor \\(k\\) is the mean of the \\( \\mathrm{IC} \\) of factor \\(k\\) divided by the standard deviation of the \\( \\mathrm{IC} \\) of factor \\(k\\). The calculation formulas are as follows:\n$$ \\begin{gathered} I C=\\rho_{x_{k}^{T}, r^{T+1}}=\\frac{\\operatorname{cov}\\left(x_{k}^{T}, r^{T+1}\\right)}{\\sigma_{x_{k}^{T}} \\sigma_{r^{T+1}}}=\\frac{\\mathrm{E}\\left(x_{k}^{T} * r^{T+1}\\right)-\\mathrm{E}\\left(x_{k}^{T}\\right) \\mathrm{E}\\left(r^{T+1}\\right)}{\\sqrt{\\mathrm{E}\\left(\\left(x_{k}^{T}\\right)^{2}\\right)-\\mathrm{E}\\left(x_{k}^{T}\\right)^{2}} \\cdot \\sqrt{\\mathrm{E}\\left(\\left(r^{T+1}\\right)^{2}\\right)-\\mathrm{E}\\left(r^{T+1}\\right)^{2}}} \\\\ I R=\\frac{\\overline{I C}}{\\sigma_{I C}} \\end{gathered} $$Where:\n$x_{k}^{T}$: Exposure of factor $k$ in period $T$ of the selected stocks $r^{T+1}$: Return rate of the selected stocks in period $T+1$ $\\overline{I C}: Mean of IC This paper uses IR to judge the quality of factors. Through \u0026ldquo;screening\u0026rdquo; a large number of different combinations of operators and basic data and IC and IR, this paper obtains the 50 price-volume factors selected in this paper. After IR testing, the table shown in the figure below is obtained by sorting IR from high to low. From the table below, we can see that the IRs of the selected 50 price-volume factors are all greater than 0.5, indicating that these factors have a strong ability to stably obtain excess returns.\n4.2.11 Factor IR Test Table Factor Name IR Factor Name IR 0 3.11 25 2.73 1 2.95 26 2.71 2 2.95 27 2.70 3 2.95 28 2.69 4 2.95 29 2.69 5 2.94 30 2.69 6 2.94 31 2.68 7 2.94 32 2.68 8 2.93 33 2.68 9 2.93 34 2.68 10 2.93 35 2.67 11 2.92 36 2.67 12 2.91 37 2.66 13 2.89 38 2.65 14 2.86 39 2.65 15 2.83 40 2.65 16 2.83 41 2.65 17 2.83 42 2.64 18 2.79 43 2.63 19 2.78 44 2.63 20 2.78 45 2.62 21 2.76 46 2.62 22 2.75 47 2.62 It can be seen from this table that among the screened factors, the IRs of all factors are greater than 0.5, which has a strong and stable ability to obtain excess returns.\n4.3 Factor Cleaning 4.3.1 Factor Missing Value Handling and Outlier Removal Methods for handling missing values of factors include case deletion, mean imputation, regression imputation, and other methods. This paper adopts a relatively simple mean imputation method to handle missing values, that is, using the average value of the factor to replace the missing data. Methods for factor outlier removal include median outlier removal, percentile outlier removal, and $3 \\sigma$ outlier removal. This paper uses the $3 \\sigma$ outlier removal method. This method uses the $3 \\sigma$ principle in statistics to convert outlier factors that are more than three standard deviations away from the mean of the factor to a position that is just three standard deviations away from the mean. The specific calculation formula is as follows:\n$$ X_i^{\\prime}= \\begin{cases} \\bar{X}+3 \\sigma \u0026 \\text{if } X_i \u003e \\bar{X} + 3 \\sigma \\\\ \\bar{X}-3 \\sigma \u0026 \\text{if } X_i \u003c \\bar{X} - 3 \\sigma \\\\ X_i \u0026 \\text{if } \\bar{X} - 3 \\sigma \u003c X_i \u003c \\bar{X} + 3 \\sigma \\end{cases} $$Where:\n$X_{i}$: Value of the factor before processing $\\bar{X}$: Mean of the factor sequence $\\sigma$: Standard deviation of the factor sequence $X_{i}^{\\prime}$: Value of the factor after outlier removal 4.3.2 Factor Standardization In this experiment, multiple factors are selected, and the dimensions of each factor are not completely the same. For the convenience of comparison and regression, we also need to standardize the factors. Currently, common specific standardization methods include Min-Max standardization, Z-score standardization, and Decimal scaling standardization. This paper chooses the Z-score standardization method. The data is standardized through the mean and standard deviation of the original data. The processed data conforms to the standard normal distribution, that is, the mean is 0 and the standard deviation is 1. The standardized numerical value is positive or negative, and a standard normal distribution curve is obtained.\nThe Z-score standardization formula used in this paper is as follows:\n$$ \\tilde{x}=\\frac{x_{i}-u}{\\sigma} $$Where:\n$x_{i}$: Original value of the factor $u$: Mean of the factor sequence $\\sigma$: Standard deviation of the factor sequence $\\tilde{x}$: Standardized factor value 4.3.3 Factor Neutralization Factor neutralization is to eliminate the influence of other factors on our selected factors, so that the stocks selected by our quantitative investment strategy portfolio are more dispersed, rather than concentrated in specific industries or market capitalization stocks. It can better share the risk of the investment portfolio and solve the problem of factor multicollinearity. Market capitalization and industry are the two main independent variables that affect stock returns. Therefore, in the process of factor cleaning, the influence of market capitalization and industry must also be considered. In this empirical study, we adopt the method of only including industry factors and including market factors in industry factors. The single-factor regression model for factors is shown in formula (31). We take the residual term of the following regression model as the new factor value after factor neutralization.\n$$ \\tilde{r}_{j}^{t}=\\sum_{s=1}^{s} X_{j s}^{t} \\tilde{f}_{s}^{t}+X_{j k}^{t} \\tilde{f}_{k}^{t}+\\tilde{u}_{j}^{t} $$Where:\n$\\tilde{r}_{j}^{t}$: Return rate of stock $j$ in period $t$ $X_{j s}^{t}$: Exposure of stock $j$ in industry $s$ in period $t$ $\\tilde{f}_{s}^{t}$: Return rate of the industry in period $t$ $X_{j k}^{t}$: Exposure of stock $j$ on factor $k$ in period $t$ $\\tilde{f}_{k}^{t}$: Return rate of factor $k$ in period $t$ $\\tilde{u}_j^t$: A $0-1$ dummy variable, that is, if stock $j$ belongs to industry $s$, the exposure is 1, otherwise it is 0 In this paper, the industry to which a company belongs is not proportionally split, that is, stock $j$ can only belong to a specific industry $s$, the exposure in industry $s$ is 1, and the exposure in all other industries is 0. This paper uses the Shenwan Hongyuan industry classification standard. The specific classifications are sequentially: agriculture, forestry, animal husbandry and fishery, mining, chemical industry, steel, nonferrous metals, electronic components, household appliances, food and beverage, textile and apparel, light industry manufacturing, pharmaceutical and biological, public utilities, transportation, real estate, commercial trade, catering and tourism, comprehensive, building materials, building decoration, electrical equipment, national defense and military industry, computer, media, communication, banking, non-banking finance, automobile, and mechanical equipment, a total of 28 categories. The table below shows the historical market chart of Shenwan Index Level 1 industries on February 5, 2021.\n4.3.3.1 Historical Market Chart of Shenwan Index Level 1 Industries on February 5, 2021 Index Code Index Name Release Date Open Index High Index Low Index Close Index Volume (100 Million Hands) Turnover (100 Million CNY) Change (%) 801010 Agriculture, Forestry, Animal Husbandry and Fishery 2021/2/5 0:00 4111.43 4271.09 4072.53 4081.81 15.81 307.82 -0.3 801020 Mining 2021/2/5 0:00 2344.62 2357.33 2288.97 2289.41 18.06 115.6 -2.25 801030 Chemical Industry 2021/2/5 0:00 4087.77 4097.59 3910.67 3910.67 55.78 778.85 -3.95 801040 Steel 2021/2/5 0:00 2253.78 2268.17 2243.48 2250.81 11.61 48.39 -1.02 801050 Nonferrous Metals 2021/2/5 0:00 4212.1 4250.59 4035.99 4036.74 45.41 593.92 -4.43 801080 Electronic Components 2021/2/5 0:00 4694.8 4694.8 4561.95 4561.95 52.67 850.79 -2.78 801110 Household Appliances 2021/2/5 0:00 10033.82 10171.26 9968.93 10096.83 8.55 149.18 0.83 801120 Food and Beverage 2021/2/5 0:00 30876.33 31545.02 30649.57 30931.69 11.32 657.11 0.47 801130 Textile and Apparel 2021/2/5 0:00 1614.48 1633.89 1604.68 1607.63 6.28 57.47 -0.39 801140 Light Industry Manufacturing 2021/2/5 0:00 2782.07 2791.88 2735.48 2737.24 15.28 176.16 -1.35 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; Data Source: Shenwan Hongyuan\nThe table below is partial data of the original factors. After sequentially going through the four factor cleaning steps of missing value imputation, factor outlier removal, factor standardization, and factor neutralization mentioned above, partial data of the cleaned factors are obtained as shown in the table.\n4.3.3.2 Original Factor Data trade_date sec_code ret factor_0 factor_1 factor_2 factor_3 factor_4 factor_5 factor_6 \u0026hellip; 2005-01-04 600874.SH 0.001684 NaN 9.445412 9.445412 9.445408 -1.00 NaN 12651.124023 \u0026hellip; 2005-01-04 000411.SZ 0.021073 NaN 5.971262 5.971262 5.971313 0.38 NaN 392.124298 \u0026hellip; 2005-01-04 000979.SZ 0.021207 NaN 6.768918 6.768918 6.768815 -1.45 NaN 870.587585 \u0026hellip; 2005-01-04 000498.SZ 0.030220 NaN 8.852752 8.852752 8.852755 0.55 NaN 6994.011719 \u0026hellip; 2005-01-04 600631.SH 0.015699 NaN 9.589897 9.589897 9.589889 -1.70 NaN 14616.806641 \u0026hellip; 4.3.3.3 Cleaned Factor Data sec_code trade_date ret factor_0 factor_1 factor_2 factor_3 factor_4 factor_5 factor_6 \u0026hellip; 000001.SZ 2005-01-04 -1.58653 0.01545 1.38306 1.38306 1.38306 0.13392 0.01545 1.38564 \u0026hellip; 000002.SZ 2005-01-04 1.36761 -0.44814 1.69728 1.69728 1.69728 1.04567 -0.44814 1.69728 \u0026hellip; 000004.SZ 2005-01-04 0.32966 -1.41654 -0.13907 -0.13907 -0.13907 -0.34769 -1.41654 -0.13650 \u0026hellip; 000005.SZ 2005-01-04 0.61297 -1.13066 1.05339 1.05339 1.05339 -1.20020 -1.13066 1.05597 \u0026hellip; 000006.SZ 2005-01-04 -0.35542 1.67667 -0.07726 -0.07726 -0.07726 1.55820 1.67667 -0.07469 \u0026hellip; 4.4 Factor Selection Based on LightGBM 4.4.1 GBDT Gradient Boosting Decision Tree (GBDT), proposed by Friedman (2001)$^{[20]}$, is an iterative regression decision tree. Its main idea is to optimize the model by gradually adding weak classifiers (usually decision trees), so that the overall model can minimize the loss function. The GBDT model can be expressed as:\n$$ \\hat{y} = \\sum_{m=1}^{M} \\gamma_m h_m(\\mathbf{x}) $$Where:\n\\( M \\) is the number of iterations, \\( \\gamma_m \\) is the weight of the \\( m \\)-th weak classifier, \\( h_m(\\mathbf{x}) \\) is the \\( m \\)-th decision tree model. The training process of GBDT minimizes the loss function by gradually fitting the negative gradient direction. The specific update formula is:\n$$ \\gamma_m = \\arg\\min_\\gamma \\sum_{i=1}^{N} L\\left(y_i, \\hat{y}_{i}^{(m-1)} + \\gamma h_m(\\mathbf{x}_i)\\right) $$Where, \\( L \\) is the loss function, \\( y_i \\) is the true value, and \\( \\hat{y}_{i}^{(m-1)} \\) is the predicted value after the \\( (m-1) \\)-th iteration.\n4.4.2 LightGBM Light Gradient Boosting Machine (LightGBM)$^{[21]}$ is an efficient framework for implementing the GBDT algorithm, initially developed by Microsoft as a free and open-source distributed gradient boosting framework. LightGBM is based on decision tree algorithms and is widely used in ranking, classification, and other machine learning tasks. Its development focuses on performance and scalability. Its main advantages include high-efficiency parallel training, faster training speed, lower memory consumption, better accuracy, and support for distributed computing and fast processing of massive data$^{[22]}$.\nThe core algorithm of LightGBM is based on the following optimization objective:\n$$ L = \\sum_{i=1}^{N} l(y_i, \\hat{y}_i) + \\sum_{m=1}^{M} \\Omega(h_m) $$Where, \\( l \\) is the loss function, and \\( \\Omega \\) is the regularization term, used to control model complexity, usually expressed as:\n$$ \\Omega(h_m) = \\gamma T + \\frac{1}{2} \\lambda \\sum_{j=1}^{T} w_j^2 $$Here, \\( T \\) is the number of leaves in the tree, \\( w_j \\) is the weight of the \\( j \\)-th leaf, and \\( \\gamma \\) and \\( \\lambda \\) are regularization parameters.\nLightGBM uses technologies such as Gradient-based One-Side Sampling (GOSS) and Exclusive Feature Bundling (EFB), which significantly improve training efficiency and model performance.\nIn this study, the loss function used during training is Mean Squared Error (MSE), which is defined as:\n$$ L(y, \\hat{y}) = \\frac{1}{N} \\sum_{i=1}^{N} (y_i - \\hat{y}_i)^2 $$Where, \\( y \\) is the true return rate, \\( \\hat{y} \\) is the return rate predicted by the model, and \\( N \\) is the number of samples.\n4.4.3 Algorithm Flow The specific algorithm flow in this section is as follows:\nData Preparation: Use one year\u0026rsquo;s worth of 50 factor data for each stock (A-share market-wide data) and historical future one-month returns as features.\nModel Training: Use Grid Search to optimize the hyperparameters of the LightGBM model and train the model to predict the future one-month return rate. The model training flow is shown in Fig. 4.12.\n$$ \\text{Parameter Optimization:} \\quad \\theta^* = \\arg\\min_\\theta \\sum_{i=1}^{N} L(y_i, \\hat{y}_i(\\theta)) $$Where, \\( \\theta \\) represents the set of model hyperparameters, and \\( \\theta^* \\) is the optimal parameter.\nFactor Importance Calculation: Use LightGBM\u0026rsquo;s feature_importances_ method to calculate the feature importance of each factor. Feature importance is mainly measured by two indicators:\nSplit: The number of times the feature is used for splitting in all trees. Gain: The total gain brought by the feature in all splits (i.e., the amount of reduction in the loss function). The feature importance of a factor can be expressed as:\n$$ \\text{Importance}_{\\text{split}}(f) = \\sum_{m=1}^{M} \\sum_{j=1}^{T_m} \\mathbb{I}(f \\text{ is used for splitting the } j \\text{-th leaf node}) $$$$ \\text{Importance}_{\\text{gain}}(f) = \\sum_{m=1}^{M} \\sum_{j=1}^{T_m} \\Delta L_{m,j} \\cdot \\mathbb{I}(f \\text{ is used for splitting the } j \\text{-th leaf node}) $$Where, \\( \\mathbb{I} \\) is the indicator function, and \\( \\Delta L_{m,j} \\) is the reduction in loss brought by factor \\( f \\) in the \\( j \\)-th split of the \\( m \\)-th tree.\nFactor Screening: Sort according to the factor importance calculated by the model, and select the top ten factors with the highest importance as the factors used in this cross-sectional analysis. The importance of the selected factors is shown in Table 4.4.4.\n4.4.4 Partial Ranking of Selected Factor Importance importance feature_name trade_date 35 factor_35 2010-08-11 27 factor_27 2010-08-11 33 factor_33 2010-08-11 20 factor_20 2010-08-11 24 factor_24 2010-08-11 45 factor_45 2010-08-11 37 factor_37 2010-08-11 49 factor_49 2010-08-11 19 factor_19 2010-08-11 47 factor_47 2010-08-11 22 factor_22 2010-09-09 20 factor_20 2010-09-09 30 factor_30 2010-09-09 24 factor_24 2010-09-09 4.4.5 Code Implementation Snippet The following is a code snippet used in the training process for factor selection.\nfeature_choice def feature_choice( self, days=21, is_local=False ): if is_local: feature_info = pd.read_hdf(os.path.join(RESULTS, Feature_Info + \u0026#39;.h5\u0026#39;)) else: factors = self.get_env().query_data(Factors_Data) factors = factors[ factors[COM_DATE] \u0026gt;= \u0026#39;2010-01-01\u0026#39; ] trade_list = list(set(factors[COM_DATE])) trade_list.sort() if len(trade_list) % days == 0: n = int(len(trade_list) / days) - 7 else: n = int(len(trade_list) / days) - 6 feature_info = pd.DataFrame() begin_index = 147 feature = list(factors.columns) feature.remove(COM_SEC) feature.remove(COM_DATE) feature.remove(Ret) for i in range(n): end_date = days * i + begin_index - 21 begin_date = days * i trade_date = days * i + begin_index print(trade_list[trade_date]) train_data = factors[ (factors[COM_DATE] \u0026lt;= trade_list[end_date]) \u0026amp; (factors[COM_DATE] \u0026gt;= trade_list[begin_date]) ] model = lgb.LGBMRegressor() model.fit(train_data[feature], train_data[Ret]) feature_info_cell = pd.DataFrame(columns=Info_Fields) feature_info_cell[Importance] = model.feature_importances_ feature_info_cell[Feature_Name] = model.feature_name_ feature_info_cell = feature_info_cell.sort_values(by=Importance).tail(10) feature_info_cell[COM_DATE] = trade_list[trade_date] feature_info = pd.concat( [feature_info, feature_info_cell], axis=0 ) h = pd.HDFStore(os.path.join(RESULTS, Feature_Info + \u0026#39;.h5\u0026#39;), \u0026#39;w\u0026#39;) h[\u0026#39;data\u0026#39;] = feature_info h.close() self.get_env().add_data(feature_info, Feature_Info) pass Through the above process, LightGBM is used to efficiently screen out the factors that have the greatest impact on predicting future returns, thereby improving the predictive ability and interpretability of the model.\n4.5 Factor Combination Based on BiLSTM This section uses BiLSTM for factor combination. The specific principle of BiLSTM has been introduced in Chapter 2, and will not be repeated here. First, let\u0026rsquo;s introduce the specific network structure of the model. The network structure of BiLSTM set in this paper through a large number of repeated experiments is shown in Table 4.5.1. The default tanh and linear activation functions of recurrent neural networks are used between layers. Dropout is added to prevent overfitting, but if Dropout uses an excessively large dropout rate, underfitting will occur. Therefore, the dropout rate of Dropout is set to 0.01. The number of neurons in the BiLSTM recurrent layer of the final model is 100. A BiLSTM layer and three fully connected layers are used, and a Dropout is set between the BiLSTM layer and the first fully connected layer.\n4.5.1 BiLSTM Network Structure Layer(type) Output Shape Param# bidirectional_1 (Bidirection) (None, 100) 24400 dropout_1 (Dropout) (None, 100) 0 dense_1 (Dense) (None, 256) 25856 dropout_2 (Dropout) (None, 256) 0 dense_2 (Dense) (None, 64) 16448 dense_3 (Dense) (None, 1) 0 Total params: 66,769\nTrainable params: 66,769\nNon-trainable params: 0\nBecause the amount of data used in this experiment is large, epochs=400 and batch_size=1024 are selected. The loss function of the model is Mean Squared Error (MSE). The optimizer used is Stochastic Gradient Descent (SGD). Stochastic gradient descent has three advantages over gradient descent (GD): it can more effectively use information when information is redundant, and the early iteration effect is excellent, which is suitable for processing large-sample data $^{[23]}$. Since the amount of training data in this experiment is large, if SGD is used, only one sample is used for iteration each time, and the training speed is very fast, which can greatly reduce the time spent on training. The default values in its keras package are used, i.e., lr=0.01, momentum=0.0, decay=0.0, and nesterov=False.\nParameter Explanation:\nlr: Learning rate momentum: Momentum parameter decay: Learning rate decay value after each update nesterov: Determine whether to use Nesterov momentum 4.5.2 Algorithm Flow The specific algorithm flow in this section is as follows:\nUse A-share market-wide data of 10 factors (factors selected by LightGBM) and historical future one-month returns for each stock for one year as features. Take the future one-month return rate of each stock per year as the prediction target, and use BiLSTM for training, as shown in Fig. 12. Fig. 12. Rolling Window\nThe real-time factor data of out-of-sample data for one month is passed through the trained BiLSTM model to obtain the real-time expected return rate of each stock for the next month. The return rate is shown in Table 4.11. 4.5.3 Partial Stock Predicted Return Rate Table sec_code trade_date y_hat 000001.SZ 2011/5/26 0.0424621 000002.SZ 2011/5/26 -0.1632174 000004.SZ 2011/5/26 -0.0642319 000005.SZ 2011/5/26 0.08154649 000006.SZ 2011/5/26 0.00093213 000007.SZ 2011/5/26 -0.073218 000008.SZ 2011/5/26 -0.0464256 000009.SZ 2011/5/26 -0.091549 000010.SZ 2011/5/26 0.08154649 000011.SZ 2011/5/26 -0.1219943 000012.SZ 2011/5/26 -0.1448984 000014.SZ 2011/5/26 0.09038845 000016.SZ 2011/5/26 -0.11225 4.5.4 Code Implementation Snippet The following is a code snippet used in the training process for building the BiLSTM training network.\nbuild_net_blstm def build_net_blstm(self): model = ks.Sequential() model.add( ks.layers.Bidirectional(ks.layers.LSTM( 50 ),input_shape=(11,10)) ) model.add( ks.layers.Dropout(0.01) ) model.add(ks.layers.Dense(256)) model.add( ks.layers.Dropout(0.01) ) model.add(ks.layers.Dense(64)) model.add(ks.layers.Dense(1)) model.compile(optimizer=\u0026#39;sgd\u0026#39;, loss=\u0026#39;mse\u0026#39;) model.summary() self.set_model(model) 4.6 Quantitative Strategy and Strategy Backtesting 4.6.1 Backtesting Metrics First, let\u0026rsquo;s introduce some common backtesting metrics for strategies. Evaluation metrics include Total Rate of Return, Annualized Rate of Return, Annualized volatility, Sharpe ratio, Maximum Drawdown (MDD), Annualized turnover rate, and Annualized transaction cost rate. It is assumed that the stock market is open for 252 days a year, the risk-free rate is defaulted to 0.035, and the commission fee is defaulted to 0.002.\nTotal Rate of Return: Under the same other indicators, the larger the cumulative rate of return, the better the strategy, and the more it can bring greater returns. The formula is as follows: $$ \\text{Total Rate of Return} = r_{p} = \\frac{P_{1} - P_{0}}{P_{0}} $$$P_{1}$: Total value of final stocks and cash\n$P_{0}$: Total value of initial stocks and cash\nAnnualized Rate of Return: It is to convert the cumulative total rate of return into a geometric average rate of return on an annual basis. Under the same other indicators, the larger the annualized rate of return, the better the strategy. The formula is as follows: $$ \\text{Annualized Rate of Return} = R_{p} = \\left(1 + r_{p}\\right)^{\\frac{252}{t}} - 1 $$$r_{p}$: Cumulative rate of return\n$t$: Number of days the investment strategy is executed\nAnnualized volatility: Defined as the standard deviation of the logarithmic value of the annual return rate of the object asset. Annualized volatility is used to measure the risk of a strategy. The greater the volatility, the higher the risk of the strategy. The formula is as follows: $$ \\begin{aligned} \\text{Annualized volatility} = \\sigma_{p} \u0026= \\sqrt{\\frac{252}{t-1} \\sum_{i=1}^{t}\\left(r_{d} - \\bar{r}_{d}\\right)^{2}} \\\\ \\bar{r}_{d} \u0026= \\frac{1}{t} \\sum_{i=1}^{t} r_{d_{i}} \\end{aligned} $$$r_{d_{i}}$: Daily return rate on the $i$-th day\n$\\bar{r}_{d}$: Average daily return rate\n$t$: Number of days the investment strategy is executed\nSharpe ratio: Proposed by Sharpe (1966)$^{[24]}$. It represents the excess return obtained by investors for bearing an extra unit of risk$^{[25]}$. Here is the calculation formula for the annualized Sharpe ratio: $$ S = \\frac{R_{p} - R_{f}}{\\sigma_{p}} $$$R_{p}$: Annualized rate of return\n$R_{f}$: Risk-free rate of return\n$\\sigma_{p}$: Annualized volatility\nMaximum Drawdown (MDD): Indicates the maximum value of the return rate drawdown when the total value of stocks and cash of our strategy portfolio reaches the lowest point during the operation period. Maximum drawdown is used to measure the most extreme possible loss situation of the strategy. $$ MDD = \\frac{\\max \\left(V_{x} - V_{y}\\right)}{V_{x}} $$$V_{x}$ and $V_{y}$ are the total value of stocks and cash of the strategy portfolio on day $x$ and day $y$ respectively, and $x \u0026lt; y$.\nAnnualized turnover rate: Used to measure the frequency of buying and selling stocks in the investment portfolio. The larger the value, the more frequent the portfolio turnover and the greater the transaction cost. $$ \\text{change} = \\frac{N \\times 252}{t} $$$t$: Number of days the investment strategy is executed\n$N$: Total number of buy and sell transactions\nAnnualized transaction cost rate: Used to measure the transaction cost of the investment portfolio strategy. The larger the value, the higher the transaction cost. $$ c = \\left(1 + \\text{commison}\\right)^{\\text{change}} - 1 $$change: Annualized turnover rate\ncommison: Commission fee\n4.6.2 Strategy and Backtesting Results The quantitative trading strategy in this paper adopts position switching every month (i.e., the rebalancing period is 28 trading days). Each time, the strategy adopts an equal-weight stock holding method to buy the 25 stocks with the highest expected return rate predicted by BiLSTM and sell the originally held stocks. The backtesting time and rules in this paper are as follows:\nBacktesting Time: From January 2012 to October 2020. Backtesting Stock Pool: All A-shares, excluding Special Treatment (ST) stocks. Transaction Fee: A brokerage commission of 0.2% is paid when buying, and a brokerage commission of 0.2% is paid when selling. If the commission for a single transaction is less than 5 CNY, the brokerage charges 5 CNY. Buying and Selling Rules: Stocks that hit the upper limit on the opening day cannot be bought, and stocks that hit the lower limit cannot be sold. 4.6.2.1 Strategy Backtesting Results Cumulative Return Annualized Return Annualized Volatility Sharpe Ratio Max Drawdown Annualized Turnover Rate Annualized Transaction Cost Rate Strategy 701.00% 29.18% 33.44% 0.77 51.10% 51.10% 11.35% Benchmark 110.40% 9.70% 26.01% 0.24 58.49% 58.49% 0.00% Fig. 22. Net Profit Curve\nThe backtesting results are shown in the table and Fig. 22 above. My strategy adopts the LightGBM-BiLSTM quantitative strategy introduced in this chapter. The benchmark uses the CSI All Share (000985). From the results above, it can be seen that the cumulative return of this strategy is 701.00%, which is much higher than the benchmark\u0026rsquo;s 110.40%; the annualized return is 29.18%, which is much higher than the benchmark\u0026rsquo;s 9.70%; and the Sharpe ratio is 0.77, which is higher than the benchmark\u0026rsquo;s 0.24. These three backtesting indicators show that the LightGBM-BiLSTM quantitative strategy can indeed bring greater returns to investors. The annualized volatility of this strategy is 33.44%, which is greater than the benchmark\u0026rsquo;s 26.01%, and the maximum drawdown is 51.10%, which is less than the benchmark\u0026rsquo;s 58.49%. These two backtesting indicators show that the LightGBM-BiLSTM quantitative strategy has certain risks, especially it is difficult to resist the impact of systemic risks. The annualized turnover rate is 11.35%, and the annualized transaction cost rate is 2.29%, indicating that our strategy is not a high-frequency trading strategy and the transaction cost is small. It can be seen from the return curve chart that the return rate of the LightGBM-BiLSTM quantitative strategy in the first two years is not much different from the benchmark, and there is no special advantage. However, from around April 2015, the return rate of the LightGBM-BiLSTM quantitative strategy is significantly better than the benchmark\u0026rsquo;s return rate. Overall, the return rate of this LightGBM-BiLSTM quantitative strategy is very considerable, but there are still certain risks.\nChapter 5 Conclusion and Future Directions 5.1 Conclusion This paper first introduced the research background and significance of stock price prediction and quantitative strategy research based on deep learning, and then introduced the domestic and international research status of stock price prediction and quantitative investment strategies respectively. Then, the innovations and research framework of this paper were explained. Then, in the chapter on related theoretical foundations, this paper briefly introduced the deep learning models and the development history of quantitative investment used in this paper. The basic structure, basic principles, and characteristics of the three models LSTM, GRU, and BiLSTM are mainly introduced.\nSubsequently, this paper used the daily frequency data of SPD Bank and IBM, and preprocessed the data through a series of data processing processes and feature extraction. Then, the specific network structure and hyperparameter settings of the three models LSTM, GRU, and BiLSTM were introduced. Then, we used LSTM, GRU, and BiLSTM to predict the closing prices of the two stocks and compare the model evaluations. The experimental results show that for both stocks, the BiLSTM prediction effect is more accurate.\nFinally, in order to further illustrate the application value of BiLSTM in finance, this paper constructed a quantitative investment model based on LightGBM-BiLSTM. Stocks in the entire A-share market and multiple factors were selected for factor cleaning, factor selection based on LightGBM, and factor combination based on LSTM. Then, we constructed a certain investment strategy and compared it with the benchmark holding CSI All Share through evaluation indicators such as cumulative return rate, annualized return rate, annualized volatility, and Sharpe ratio. Through comparison, it was found that the LightGBM-BiLSTM quantitative investment model can bring better returns, indicating the effectiveness of using deep learning to build quantitative investment strategies.\n5.2 Future Directions Although this paper compares the effects of LSTM, GRU, and BiLSTM models in predicting stock closing prices and achieves certain results based on the LightGBM-BiLSTM quantitative investment strategy, there are still some shortcomings in this paper\u0026rsquo;s research. Combining the research results of this paper, the following research and improvements can be further carried out:\nDiversification of Prediction Targets: In terms of predicting stock prices, this paper selects the stock closing price as the prediction target. Although this result is the most intuitive, the Random Walk Hypothesis (RWH) proposed by Bachelier (1900)$^{[26]}$ believes that stock prices follow a random walk and are unpredictable. Although many behavioral economists have since proved that this view is not entirely correct, it also shows that simply predicting stock closing prices is not so strong in terms of difficulty and interpretability $^{[27][28]}$. Therefore, stock volatility prediction, stock price increase/decrease judgment, and stock return rate prediction can be selected as future research directions. Diversified Model Comparison: In terms of predicting stock prices, this paper compares the three recurrent neural network models LSTM, GRU, and BiLSTM and shows that BiLSTM has better prediction effect, but there is still a lack of comparative research with more different models. Therefore, future in-depth research can be conducted on comparisons with Autoregressive Integrated Moving Average (ARIMA), Convolutional Neural Networks (CNNs), Deep Neural Networks (DNNs), CNN-LSTM, Transformer, TimeGPT, and other single or composite models. Factor Diversification: The factors used in this paper to construct quantitative investment strategies are all technical price-volume factors, and the types of factors are single. In the future, different types of factors such as financial factors, sentiment factors, and growth factors can be selected to improve the performance of the strategy. At the same time, future research can also appropriately add timing strategies to increase positions when predicting that the market will rise and reduce positions when predicting that the market will fall to earn beta (\\(\\beta\\)) returns. Investment Portfolio Optimization: The factor combination process in this paper is still imperfect. In the future, quadratic programming methods can be used to optimize the investment portfolio. High-Frequency Trading Strategy Research: The quantitative investment strategy method in this paper adopts a low-frequency trading strategy. In the future, stock tick data can be used to study high-frequency strategies and ultra-high-frequency strategies. References [1] White, H. “Economic prediction using neural networks: The case of IBM daily stock returns.” Proc. of ICNN. 1988, 2: 451-458.\n[2] Kimoto, T., Asakawa, K., Yoda, M., et al. “Stock market prediction system with modular neural networks.” Proc. of 1990 IJCNN International Joint Conference on Neural Networks. IEEE, 1990: 1-6.\n[3] Zhang, G. P. “Time series forecasting using a hybrid ARIMA and neural network model.” Neurocomputing. 2003, 50: 159-175.\n[4] Akita, R., Yoshihara, A., Matsubara, T., et al. “Deep learning for stock prediction using numerical and textual information.” Proc. of 2016 IEEE/ACIS 15th International Conference on Computer and Information Science (ICIS). IEEE, 2016: 1-6.\n[5] 宮崎邦洋, 松尾豊. “Deep Learning を用いた株価予測の分析.” 人工知能学会全国大会論文集 第31回全国大会. 一般社団法人 人工知能学会, 2017: 2D3OS19a3-2D3OS19a3.\n[6] Kim, T., Kim, H. Y. “Forecasting stock prices with a feature fusion LSTM-CNN model using different representations of the same data.” PLoS ONE. 2019, 14(2): e0212320.\n[7] Hochreiter, S., Schmidhuber, J. “Long short-term memory.” Neural Computation. 1997, 9(8): 1735-1780.\n[8] Cho, K., Van Merriënboer, B., Gulcehre, C., et al. “Learning phrase representations using RNN encoder-decoder for statistical machine translation.” arXiv preprint arXiv:1406.1078. 2014.\n[9] Chung, J., Gulcehre, C., Cho, K. H., et al. “Empirical evaluation of gated recurrent neural networks on sequence modeling.” arXiv preprint arXiv:1412.3555. 2014.\n[10] Gruber, N., Jockisch, A. “Are GRU cells more specific and LSTM cells more sensitive in motive classification of text?” Frontiers in Artificial Intelligence. 2020, 3(40): 1-6.\n[11] Markowitz, H. “Portfolio Selection.” The Journal of Finance. 1952, 7(1): 77-91. doi:10.2307/2975974.\n[12] Merton, R. C. “An analytic derivation of the efficient portfolio frontier.” Journal of Financial and Quantitative Analysis. 1972: 1851-1872.\n[13] Sharpe, W. F. “Capital asset prices: A theory of market equilibrium under conditions of risk.” The Journal of Finance. 1964, 19(3): 425-442.\n[14] Lintner, J. “The Valuation of Risk Assets and the Selection of Risky Investments in Stock Portfolios and Capital Budgets.” Review of Economics and Statistics. 1965, 47(1): 13-37.\n[15] Mossin, J. “Equilibrium in a capital asset market.” Econometrica: Journal of the Econometric Society. 1966: 768-783.\n[16] Ross, S. A. “The arbitrage theory of capital asset pricing.” Journal of Economic Theory. 1976, 13(3): 341-60.\n[17] Fama, E. F., French, K. R. “Common risk factors in the returns on stocks and bonds.” Journal of Financial Economics. 1993, 33(1): 3-56.\n[18] Fama, E. F., French, K. R. “A five-factor asset pricing model.” Journal of Financial Economics. 2015, 116(1): 1-22.\n[19] Kingma, D. P., Ba, J. “Adam: A method for stochastic optimization.” arXiv preprint arXiv:1412.6980. 2014.\n[20] Friedman, J. H. “Greedy function approximation: A gradient boosting machine.” Annals of Statistics. 2001: 1189-1232.\n[21] Kopitar, L., Kocbek, P., Cilar, L., et al. “Early detection of type 2 diabetes mellitus using machine learning-based prediction models.” Scientific Reports. 2020, 10(1): 1-12.\n[22] Ke, G., Meng, Q., Finley, T., et al. “Lightgbm: A highly efficient gradient boosting decision tree.” Advances in Neural Information Processing Systems. 2017, 30: 3146-3154.\n[23] Bottou, L., Curtis, F. E., Nocedal, J. “Optimization methods for large-scale machine learning.” SIAM Review. 2018, 60(2): 223-311.\n[24] Sharpe, W. F. “Mutual fund performance.” The Journal of Business. 1966, 39(1): 119-138.\n[25] Sharpe, W. F. “The sharpe ratio.” Journal of Portfolio Management. 1994, 21(1): 49-58.\n[26] Bachelier, L. “Théorie de la spéculation.” Annales Scientifiques de l\u0026rsquo;École Normale Supérieure. 1900, 17: 21-86.\n[27] Fromlet, H. “Behavioral finance-theory and practical application: Systematic analysis of departures from the homo oeconomicus paradigm are essential for realistic financial research and analysis.” Business Economics. 2001: 63-69.\n[28] Lo, A. W. “The adaptive markets hypothesis.” The Journal of Portfolio Management. 2004, 30(5): 15-29.\nReference Blog Colah\u0026rsquo;s Blog. (2015, August 27). Understanding LSTM Networks. Citation Citation: For reprint or citation of this article, please indicate the original author and source.\nCited as:\nYue Shui. (Apr 2021). Stock Price Prediction and Quantitative Strategy Based on Deep Learning. https://syhya.github.io/posts/2021-04-21-deep-learning-stock-prediction/\nOr\n@article{syhya2021stockprediction, title = \u0026#34;Stock Price Prediction and Quantitative Strategy Based on Deep Learning\u0026#34;, author = \u0026#34;Yue Shui\u0026#34;, journal = \u0026#34;syhya.github.io\u0026#34;, year = \u0026#34;2021\u0026#34;, month = \u0026#34;Apr\u0026#34;, url = \u0026#34;https://syhya.github.io/posts/2021-04-21-deep-learning-stock-prediction/\u0026#34; } ","permalink":"https://syhya.github.io/posts/2021-04-21-deep-learning-stock-prediction/","summary":"\u003ch2 id=\"abstract\"\u003eAbstract\u003c/h2\u003e\n\u003cp\u003eThe stock market is a crucial component of the financial market. In recent years, with its vigorous development, research on stock price prediction and quantitative investment strategies has attracted scholars from various fields.  With the advancement of Artificial Intelligence (AI) and Machine Learning (ML) in recent years, researchers have shifted from traditional statistical models to AI algorithms. Particularly after the deep learning boom, neural networks have achieved remarkable results in stock price prediction and quantitative investment strategy research. The objective of deep learning is to learn multi-level features, constructing abstract high-level features by combining low-level ones, thereby mining the distributed feature representations of data. This approach enables complex nonlinear modeling to accomplish prediction tasks. Recurrent Neural Networks (RNNs) have been widely applied to sequential data, such as natural language and speech. Daily stock prices and trading information are sequential data, leading many researchers to use RNNs for stock price prediction. However, basic RNNs suffer from gradient vanishing issues when the number of layers is excessive. The advent of Long Short-Term Memory (LSTM) networks addressed this problem, followed by variants such as Gated Recurrent Units (GRUs), Peephole LSTMs, and Bidirectional LSTMs (BiLSTMs). Traditional stock prediction models often overlook temporal factors or only consider unidirectional temporal relationships. Therefore, this paper employs the BiLSTM model for stock price prediction. From a model principle perspective, the BiLSTM model fully leverages the contextual relationships in both forward and backward temporal directions of time series data. It also avoids gradient vanishing and explosion problems in long sequences, enabling better learning of information with long-term dependencies.\u003c/p\u003e","title":"Stock Price Prediction and Quantitative Strategy Based on Deep Learning"}]